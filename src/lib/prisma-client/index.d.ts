
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Treatment
 * 
 */
export type Treatment = $Result.DefaultSelection<Prisma.$TreatmentPayload>
/**
 * Model PatientTreatment
 * 
 */
export type PatientTreatment = $Result.DefaultSelection<Prisma.$PatientTreatmentPayload>
/**
 * Model PatientBill
 * 
 */
export type PatientBill = $Result.DefaultSelection<Prisma.$PatientBillPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Expense
 * 
 */
export type Expense = $Result.DefaultSelection<Prisma.$ExpensePayload>
/**
 * Model Salary
 * 
 */
export type Salary = $Result.DefaultSelection<Prisma.$SalaryPayload>
/**
 * Model BranchInventory
 * 
 */
export type BranchInventory = $Result.DefaultSelection<Prisma.$BranchInventoryPayload>
/**
 * Model InventoryOrder
 * 
 */
export type InventoryOrder = $Result.DefaultSelection<Prisma.$InventoryOrderPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BranchStatus: {
  active: 'active',
  inactive: 'inactive'
};

export type BranchStatus = (typeof BranchStatus)[keyof typeof BranchStatus]


export const Role: {
  doctor: 'doctor',
  receptionist: 'receptionist',
  branch_admin: 'branch_admin',
  organization_admin: 'organization_admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const PatientType: {
  walk_in: 'walk_in',
  regular: 'regular',
  appointed: 'appointed'
};

export type PatientType = (typeof PatientType)[keyof typeof PatientType]


export const AppointmentType: {
  scheduled: 'scheduled',
  walk_in: 'walk_in'
};

export type AppointmentType = (typeof AppointmentType)[keyof typeof AppointmentType]


export const AppointmentStatus: {
  scheduled: 'scheduled',
  expired: 'expired',
  waiting: 'waiting',
  completed: 'completed',
  cancelled: 'cancelled',
  rescheduled: 'rescheduled'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const TreatmentStatus: {
  pending: 'pending',
  in_progress: 'in_progress',
  completed: 'completed'
};

export type TreatmentStatus = (typeof TreatmentStatus)[keyof typeof TreatmentStatus]


export const PaymentMethod: {
  cash: 'cash',
  card: 'card',
  online: 'online'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  paid: 'paid',
  pending: 'pending'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const BillStatus: {
  paid: 'paid',
  partially_paid: 'partially_paid',
  pending: 'pending'
};

export type BillStatus = (typeof BillStatus)[keyof typeof BillStatus]


export const ExpenseType: {
  rent: 'rent',
  salaries: 'salaries',
  utilities: 'utilities',
  inventory: 'inventory',
  other: 'other'
};

export type ExpenseType = (typeof ExpenseType)[keyof typeof ExpenseType]


export const SalaryStatus: {
  paid: 'paid',
  unpaid: 'unpaid'
};

export type SalaryStatus = (typeof SalaryStatus)[keyof typeof SalaryStatus]

}

export type BranchStatus = $Enums.BranchStatus

export const BranchStatus: typeof $Enums.BranchStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type PatientType = $Enums.PatientType

export const PatientType: typeof $Enums.PatientType

export type AppointmentType = $Enums.AppointmentType

export const AppointmentType: typeof $Enums.AppointmentType

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type TreatmentStatus = $Enums.TreatmentStatus

export const TreatmentStatus: typeof $Enums.TreatmentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type BillStatus = $Enums.BillStatus

export const BillStatus: typeof $Enums.BillStatus

export type ExpenseType = $Enums.ExpenseType

export const ExpenseType: typeof $Enums.ExpenseType

export type SalaryStatus = $Enums.SalaryStatus

export const SalaryStatus: typeof $Enums.SalaryStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tokens
 * const tokens = await prisma.token.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tokens
   * const tokens = await prisma.token.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.treatment`: Exposes CRUD operations for the **Treatment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treatments
    * const treatments = await prisma.treatment.findMany()
    * ```
    */
  get treatment(): Prisma.TreatmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientTreatment`: Exposes CRUD operations for the **PatientTreatment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientTreatments
    * const patientTreatments = await prisma.patientTreatment.findMany()
    * ```
    */
  get patientTreatment(): Prisma.PatientTreatmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientBill`: Exposes CRUD operations for the **PatientBill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientBills
    * const patientBills = await prisma.patientBill.findMany()
    * ```
    */
  get patientBill(): Prisma.PatientBillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expense`: Exposes CRUD operations for the **Expense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expense.findMany()
    * ```
    */
  get expense(): Prisma.ExpenseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.salary`: Exposes CRUD operations for the **Salary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salaries
    * const salaries = await prisma.salary.findMany()
    * ```
    */
  get salary(): Prisma.SalaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.branchInventory`: Exposes CRUD operations for the **BranchInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BranchInventories
    * const branchInventories = await prisma.branchInventory.findMany()
    * ```
    */
  get branchInventory(): Prisma.BranchInventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryOrder`: Exposes CRUD operations for the **InventoryOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryOrders
    * const inventoryOrders = await prisma.inventoryOrder.findMany()
    * ```
    */
  get inventoryOrder(): Prisma.InventoryOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Token: 'Token',
    Organization: 'Organization',
    Branch: 'Branch',
    User: 'User',
    Patient: 'Patient',
    Appointment: 'Appointment',
    Treatment: 'Treatment',
    PatientTreatment: 'PatientTreatment',
    PatientBill: 'PatientBill',
    Payment: 'Payment',
    Expense: 'Expense',
    Salary: 'Salary',
    BranchInventory: 'BranchInventory',
    InventoryOrder: 'InventoryOrder',
    Log: 'Log'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "token" | "organization" | "branch" | "user" | "patient" | "appointment" | "treatment" | "patientTreatment" | "patientBill" | "payment" | "expense" | "salary" | "branchInventory" | "inventoryOrder" | "log"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Treatment: {
        payload: Prisma.$TreatmentPayload<ExtArgs>
        fields: Prisma.TreatmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findFirst: {
            args: Prisma.TreatmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findMany: {
            args: Prisma.TreatmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          create: {
            args: Prisma.TreatmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          createMany: {
            args: Prisma.TreatmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TreatmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          update: {
            args: Prisma.TreatmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          deleteMany: {
            args: Prisma.TreatmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TreatmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          aggregate: {
            args: Prisma.TreatmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatment>
          }
          groupBy: {
            args: Prisma.TreatmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentCountAggregateOutputType> | number
          }
        }
      }
      PatientTreatment: {
        payload: Prisma.$PatientTreatmentPayload<ExtArgs>
        fields: Prisma.PatientTreatmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientTreatmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientTreatmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          findFirst: {
            args: Prisma.PatientTreatmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientTreatmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          findMany: {
            args: Prisma.PatientTreatmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>[]
          }
          create: {
            args: Prisma.PatientTreatmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          createMany: {
            args: Prisma.PatientTreatmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientTreatmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          update: {
            args: Prisma.PatientTreatmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          deleteMany: {
            args: Prisma.PatientTreatmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientTreatmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientTreatmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          aggregate: {
            args: Prisma.PatientTreatmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientTreatment>
          }
          groupBy: {
            args: Prisma.PatientTreatmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientTreatmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientTreatmentCountArgs<ExtArgs>
            result: $Utils.Optional<PatientTreatmentCountAggregateOutputType> | number
          }
        }
      }
      PatientBill: {
        payload: Prisma.$PatientBillPayload<ExtArgs>
        fields: Prisma.PatientBillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientBillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientBillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>
          }
          findFirst: {
            args: Prisma.PatientBillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientBillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>
          }
          findMany: {
            args: Prisma.PatientBillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>[]
          }
          create: {
            args: Prisma.PatientBillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>
          }
          createMany: {
            args: Prisma.PatientBillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientBillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>
          }
          update: {
            args: Prisma.PatientBillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>
          }
          deleteMany: {
            args: Prisma.PatientBillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientBillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientBillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientBillPayload>
          }
          aggregate: {
            args: Prisma.PatientBillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientBill>
          }
          groupBy: {
            args: Prisma.PatientBillGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientBillGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientBillCountArgs<ExtArgs>
            result: $Utils.Optional<PatientBillCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Expense: {
        payload: Prisma.$ExpensePayload<ExtArgs>
        fields: Prisma.ExpenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          findFirst: {
            args: Prisma.ExpenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          findMany: {
            args: Prisma.ExpenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          create: {
            args: Prisma.ExpenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          createMany: {
            args: Prisma.ExpenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExpenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          update: {
            args: Prisma.ExpenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          deleteMany: {
            args: Prisma.ExpenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExpenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          aggregate: {
            args: Prisma.ExpenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpense>
          }
          groupBy: {
            args: Prisma.ExpenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenseCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseCountAggregateOutputType> | number
          }
        }
      }
      Salary: {
        payload: Prisma.$SalaryPayload<ExtArgs>
        fields: Prisma.SalaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>
          }
          findFirst: {
            args: Prisma.SalaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>
          }
          findMany: {
            args: Prisma.SalaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>[]
          }
          create: {
            args: Prisma.SalaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>
          }
          createMany: {
            args: Prisma.SalaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SalaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>
          }
          update: {
            args: Prisma.SalaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>
          }
          deleteMany: {
            args: Prisma.SalaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SalaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryPayload>
          }
          aggregate: {
            args: Prisma.SalaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalary>
          }
          groupBy: {
            args: Prisma.SalaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaryCountArgs<ExtArgs>
            result: $Utils.Optional<SalaryCountAggregateOutputType> | number
          }
        }
      }
      BranchInventory: {
        payload: Prisma.$BranchInventoryPayload<ExtArgs>
        fields: Prisma.BranchInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchInventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchInventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>
          }
          findFirst: {
            args: Prisma.BranchInventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchInventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>
          }
          findMany: {
            args: Prisma.BranchInventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>[]
          }
          create: {
            args: Prisma.BranchInventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>
          }
          createMany: {
            args: Prisma.BranchInventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BranchInventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>
          }
          update: {
            args: Prisma.BranchInventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>
          }
          deleteMany: {
            args: Prisma.BranchInventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchInventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BranchInventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchInventoryPayload>
          }
          aggregate: {
            args: Prisma.BranchInventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranchInventory>
          }
          groupBy: {
            args: Prisma.BranchInventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchInventoryCountArgs<ExtArgs>
            result: $Utils.Optional<BranchInventoryCountAggregateOutputType> | number
          }
        }
      }
      InventoryOrder: {
        payload: Prisma.$InventoryOrderPayload<ExtArgs>
        fields: Prisma.InventoryOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>
          }
          findFirst: {
            args: Prisma.InventoryOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>
          }
          findMany: {
            args: Prisma.InventoryOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>[]
          }
          create: {
            args: Prisma.InventoryOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>
          }
          createMany: {
            args: Prisma.InventoryOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>
          }
          update: {
            args: Prisma.InventoryOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>
          }
          deleteMany: {
            args: Prisma.InventoryOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryOrderPayload>
          }
          aggregate: {
            args: Prisma.InventoryOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryOrder>
          }
          groupBy: {
            args: Prisma.InventoryOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryOrderCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryOrderCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    token?: TokenOmit
    organization?: OrganizationOmit
    branch?: BranchOmit
    user?: UserOmit
    patient?: PatientOmit
    appointment?: AppointmentOmit
    treatment?: TreatmentOmit
    patientTreatment?: PatientTreatmentOmit
    patientBill?: PatientBillOmit
    payment?: PaymentOmit
    expense?: ExpenseOmit
    salary?: SalaryOmit
    branchInventory?: BranchInventoryOmit
    inventoryOrder?: InventoryOrderOmit
    log?: LogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    branches: number
    users: number
    expenses: number
    logs: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branches?: boolean | OrganizationCountOutputTypeCountBranchesArgs
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
    expenses?: boolean | OrganizationCountOutputTypeCountExpensesArgs
    logs?: boolean | OrganizationCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    users: number
    patients: number
    expenses: number
    salaries: number
    inventories: number
    orders: number
    logs: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | BranchCountOutputTypeCountUsersArgs
    patients?: boolean | BranchCountOutputTypeCountPatientsArgs
    expenses?: boolean | BranchCountOutputTypeCountExpensesArgs
    salaries?: boolean | BranchCountOutputTypeCountSalariesArgs
    inventories?: boolean | BranchCountOutputTypeCountInventoriesArgs
    orders?: boolean | BranchCountOutputTypeCountOrdersArgs
    logs?: boolean | BranchCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountSalariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchInventoryWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryOrderWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdPatients: number
    updatedPatients: number
    doctorAppointments: number
    receptionistAppointments: number
    createdAppointments: number
    updatedAppointments: number
    treatments: number
    payments: number
    salaries: number
    orders: number
    logs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdPatients?: boolean | UserCountOutputTypeCountCreatedPatientsArgs
    updatedPatients?: boolean | UserCountOutputTypeCountUpdatedPatientsArgs
    doctorAppointments?: boolean | UserCountOutputTypeCountDoctorAppointmentsArgs
    receptionistAppointments?: boolean | UserCountOutputTypeCountReceptionistAppointmentsArgs
    createdAppointments?: boolean | UserCountOutputTypeCountCreatedAppointmentsArgs
    updatedAppointments?: boolean | UserCountOutputTypeCountUpdatedAppointmentsArgs
    treatments?: boolean | UserCountOutputTypeCountTreatmentsArgs
    payments?: boolean | UserCountOutputTypeCountPaymentsArgs
    salaries?: boolean | UserCountOutputTypeCountSalariesArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    logs?: boolean | UserCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDoctorAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceptionistAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSalariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    appointments: number
    treatments: number
    bills: number
    payments: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | PatientCountOutputTypeCountAppointmentsArgs
    treatments?: boolean | PatientCountOutputTypeCountTreatmentsArgs
    bills?: boolean | PatientCountOutputTypeCountBillsArgs
    payments?: boolean | PatientCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountBillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientBillWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    treatments: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatments?: boolean | AppointmentCountOutputTypeCountTreatmentsArgs
  }

  // Custom InputTypes
  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }


  /**
   * Count Type TreatmentCountOutputType
   */

  export type TreatmentCountOutputType = {
    patientTreatments: number
    patientBill: number
  }

  export type TreatmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTreatments?: boolean | TreatmentCountOutputTypeCountPatientTreatmentsArgs
    patientBill?: boolean | TreatmentCountOutputTypeCountPatientBillArgs
  }

  // Custom InputTypes
  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentCountOutputType
     */
    select?: TreatmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountPatientBillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientBillWhereInput
  }


  /**
   * Count Type PatientBillCountOutputType
   */

  export type PatientBillCountOutputType = {
    payments: number
  }

  export type PatientBillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | PatientBillCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * PatientBillCountOutputType without action
   */
  export type PatientBillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBillCountOutputType
     */
    select?: PatientBillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientBillCountOutputType without action
   */
  export type PatientBillCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    userId: number | null
  }

  export type TokenSumAggregateOutputType = {
    userId: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: string | null
    userId: number | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    userId: number
    refreshToken: number
    accessToken: number
    expiresAt: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    userId?: true
  }

  export type TokenSumAggregateInputType = {
    userId?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: string
    userId: number
    refreshToken: string
    accessToken: string
    expiresAt: Date
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>



  export type TokenSelectScalar = {
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
  }

  export type TokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "refreshToken" | "accessToken" | "expiresAt", ExtArgs["result"]["token"]>
  export type TokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      refreshToken: string
      accessToken: string
      expiresAt: Date
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */ 
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'String'>
    readonly userId: FieldRef<"Token", 'Int'>
    readonly refreshToken: FieldRef<"Token", 'String'>
    readonly accessToken: FieldRef<"Token", 'String'>
    readonly expiresAt: FieldRef<"Token", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to delete.
     */
    limit?: number
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contact: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contact: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    contact: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: number
    name: string
    address: string
    contact: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branches?: boolean | Organization$branchesArgs<ExtArgs>
    users?: boolean | Organization$usersArgs<ExtArgs>
    expenses?: boolean | Organization$expensesArgs<ExtArgs>
    logs?: boolean | Organization$logsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>



  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "contact" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branches?: boolean | Organization$branchesArgs<ExtArgs>
    users?: boolean | Organization$usersArgs<ExtArgs>
    expenses?: boolean | Organization$expensesArgs<ExtArgs>
    logs?: boolean | Organization$logsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      branches: Prisma.$BranchPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      expenses: Prisma.$ExpensePayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      contact: string
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branches<T extends Organization$branchesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$branchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenses<T extends Organization$expensesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Organization$logsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */ 
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'Int'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly address: FieldRef<"Organization", 'String'>
    readonly contact: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
    readonly deletedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.branches
   */
  export type Organization$branchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    cursor?: BranchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization.expenses
   */
  export type Organization$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    cursor?: ExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Organization.logs
   */
  export type Organization$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _avg: BranchAvgAggregateOutputType | null
    _sum: BranchSumAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type BranchSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type BranchMinAggregateOutputType = {
    id: number | null
    name: string | null
    organizationId: number | null
    address: string | null
    contact: string | null
    status: $Enums.BranchStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type BranchMaxAggregateOutputType = {
    id: number | null
    name: string | null
    organizationId: number | null
    address: string | null
    contact: string | null
    status: $Enums.BranchStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type BranchCountAggregateOutputType = {
    id: number
    name: number
    organizationId: number
    address: number
    contact: number
    status: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type BranchAvgAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type BranchSumAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type BranchMinAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    address?: true
    contact?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type BranchMaxAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    address?: true
    contact?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type BranchCountAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    address?: true
    contact?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BranchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BranchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _avg?: BranchAvgAggregateInputType
    _sum?: BranchSumAggregateInputType
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    id: number
    name: string
    organizationId: number
    address: string
    contact: string
    status: $Enums.BranchStatus
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: BranchCountAggregateOutputType | null
    _avg: BranchAvgAggregateOutputType | null
    _sum: BranchSumAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    organizationId?: boolean
    address?: boolean
    contact?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    users?: boolean | Branch$usersArgs<ExtArgs>
    patients?: boolean | Branch$patientsArgs<ExtArgs>
    expenses?: boolean | Branch$expensesArgs<ExtArgs>
    salaries?: boolean | Branch$salariesArgs<ExtArgs>
    inventories?: boolean | Branch$inventoriesArgs<ExtArgs>
    orders?: boolean | Branch$ordersArgs<ExtArgs>
    logs?: boolean | Branch$logsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>



  export type BranchSelectScalar = {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    address?: boolean
    contact?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type BranchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "organizationId" | "address" | "contact" | "status" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["branch"]>
  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    users?: boolean | Branch$usersArgs<ExtArgs>
    patients?: boolean | Branch$patientsArgs<ExtArgs>
    expenses?: boolean | Branch$expensesArgs<ExtArgs>
    salaries?: boolean | Branch$salariesArgs<ExtArgs>
    inventories?: boolean | Branch$inventoriesArgs<ExtArgs>
    orders?: boolean | Branch$ordersArgs<ExtArgs>
    logs?: boolean | Branch$logsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      patients: Prisma.$PatientPayload<ExtArgs>[]
      expenses: Prisma.$ExpensePayload<ExtArgs>[]
      salaries: Prisma.$SalaryPayload<ExtArgs>[]
      inventories: Prisma.$BranchInventoryPayload<ExtArgs>[]
      orders: Prisma.$InventoryOrderPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      organizationId: number
      address: string
      contact: string
      status: $Enums.BranchStatus
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchWithIdOnly = await prisma.branch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends Branch$usersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patients<T extends Branch$patientsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenses<T extends Branch$expensesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaries<T extends Branch$salariesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$salariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inventories<T extends Branch$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends Branch$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Branch$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Branch$logsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */ 
  interface BranchFieldRefs {
    readonly id: FieldRef<"Branch", 'Int'>
    readonly name: FieldRef<"Branch", 'String'>
    readonly organizationId: FieldRef<"Branch", 'Int'>
    readonly address: FieldRef<"Branch", 'String'>
    readonly contact: FieldRef<"Branch", 'String'>
    readonly status: FieldRef<"Branch", 'BranchStatus'>
    readonly createdAt: FieldRef<"Branch", 'DateTime'>
    readonly updatedAt: FieldRef<"Branch", 'DateTime'>
    readonly deletedAt: FieldRef<"Branch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to delete.
     */
    limit?: number
  }

  /**
   * Branch.users
   */
  export type Branch$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Branch.patients
   */
  export type Branch$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Branch.expenses
   */
  export type Branch$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    cursor?: ExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Branch.salaries
   */
  export type Branch$salariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    where?: SalaryWhereInput
    orderBy?: SalaryOrderByWithRelationInput | SalaryOrderByWithRelationInput[]
    cursor?: SalaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryScalarFieldEnum | SalaryScalarFieldEnum[]
  }

  /**
   * Branch.inventories
   */
  export type Branch$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    where?: BranchInventoryWhereInput
    orderBy?: BranchInventoryOrderByWithRelationInput | BranchInventoryOrderByWithRelationInput[]
    cursor?: BranchInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BranchInventoryScalarFieldEnum | BranchInventoryScalarFieldEnum[]
  }

  /**
   * Branch.orders
   */
  export type Branch$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    where?: InventoryOrderWhereInput
    orderBy?: InventoryOrderOrderByWithRelationInput | InventoryOrderOrderByWithRelationInput[]
    cursor?: InventoryOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryOrderScalarFieldEnum | InventoryOrderScalarFieldEnum[]
  }

  /**
   * Branch.logs
   */
  export type Branch$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    branchId: number | null
    organizationId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    branchId: number | null
    organizationId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    contactNo: string | null
    identityNo: string | null
    avatar: string | null
    password: string | null
    email: string | null
    role: $Enums.Role | null
    branchId: number | null
    organizationId: number | null
    identityImage: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contactNo: string | null
    identityNo: string | null
    avatar: string | null
    password: string | null
    email: string | null
    role: $Enums.Role | null
    branchId: number | null
    organizationId: number | null
    identityImage: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    contactNo: number
    identityNo: number
    avatar: number
    password: number
    email: number
    role: number
    branchId: number
    organizationId: number
    identityImage: number
    isActive: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    contactNo?: true
    identityNo?: true
    avatar?: true
    password?: true
    email?: true
    role?: true
    branchId?: true
    organizationId?: true
    identityImage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    contactNo?: true
    identityNo?: true
    avatar?: true
    password?: true
    email?: true
    role?: true
    branchId?: true
    organizationId?: true
    identityImage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    contactNo?: true
    identityNo?: true
    avatar?: true
    password?: true
    email?: true
    role?: true
    branchId?: true
    organizationId?: true
    identityImage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    contactNo: string
    identityNo: string
    avatar: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId: number | null
    organizationId: number
    identityImage: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactNo?: boolean
    identityNo?: boolean
    avatar?: boolean
    password?: boolean
    email?: boolean
    role?: boolean
    branchId?: boolean
    organizationId?: boolean
    identityImage?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | User$branchArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdPatients?: boolean | User$createdPatientsArgs<ExtArgs>
    updatedPatients?: boolean | User$updatedPatientsArgs<ExtArgs>
    doctorAppointments?: boolean | User$doctorAppointmentsArgs<ExtArgs>
    receptionistAppointments?: boolean | User$receptionistAppointmentsArgs<ExtArgs>
    createdAppointments?: boolean | User$createdAppointmentsArgs<ExtArgs>
    updatedAppointments?: boolean | User$updatedAppointmentsArgs<ExtArgs>
    treatments?: boolean | User$treatmentsArgs<ExtArgs>
    payments?: boolean | User$paymentsArgs<ExtArgs>
    salaries?: boolean | User$salariesArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    Token?: boolean | User$TokenArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    contactNo?: boolean
    identityNo?: boolean
    avatar?: boolean
    password?: boolean
    email?: boolean
    role?: boolean
    branchId?: boolean
    organizationId?: boolean
    identityImage?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contactNo" | "identityNo" | "avatar" | "password" | "email" | "role" | "branchId" | "organizationId" | "identityImage" | "isActive" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | User$branchArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdPatients?: boolean | User$createdPatientsArgs<ExtArgs>
    updatedPatients?: boolean | User$updatedPatientsArgs<ExtArgs>
    doctorAppointments?: boolean | User$doctorAppointmentsArgs<ExtArgs>
    receptionistAppointments?: boolean | User$receptionistAppointmentsArgs<ExtArgs>
    createdAppointments?: boolean | User$createdAppointmentsArgs<ExtArgs>
    updatedAppointments?: boolean | User$updatedAppointmentsArgs<ExtArgs>
    treatments?: boolean | User$treatmentsArgs<ExtArgs>
    payments?: boolean | User$paymentsArgs<ExtArgs>
    salaries?: boolean | User$salariesArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    Token?: boolean | User$TokenArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs>
      createdPatients: Prisma.$PatientPayload<ExtArgs>[]
      updatedPatients: Prisma.$PatientPayload<ExtArgs>[]
      doctorAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
      receptionistAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
      createdAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
      updatedAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
      treatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      salaries: Prisma.$SalaryPayload<ExtArgs>[]
      orders: Prisma.$InventoryOrderPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
      Token: Prisma.$TokenPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contactNo: string
      identityNo: string
      avatar: string | null
      password: string
      email: string
      role: $Enums.Role
      branchId: number | null
      organizationId: number
      identityImage: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends User$branchArgs<ExtArgs> = {}>(args?: Subset<T, User$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdPatients<T extends User$createdPatientsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedPatients<T extends User$updatedPatientsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctorAppointments<T extends User$doctorAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$doctorAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receptionistAppointments<T extends User$receptionistAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$receptionistAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdAppointments<T extends User$createdAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedAppointments<T extends User$updatedAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    treatments<T extends User$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends User$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaries<T extends User$salariesArgs<ExtArgs> = {}>(args?: Subset<T, User$salariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends User$logsArgs<ExtArgs> = {}>(args?: Subset<T, User$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Token<T extends User$TokenArgs<ExtArgs> = {}>(args?: Subset<T, User$TokenArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly contactNo: FieldRef<"User", 'String'>
    readonly identityNo: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly branchId: FieldRef<"User", 'Int'>
    readonly organizationId: FieldRef<"User", 'Int'>
    readonly identityImage: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.branch
   */
  export type User$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * User.createdPatients
   */
  export type User$createdPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.updatedPatients
   */
  export type User$updatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.doctorAppointments
   */
  export type User$doctorAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.receptionistAppointments
   */
  export type User$receptionistAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.createdAppointments
   */
  export type User$createdAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.updatedAppointments
   */
  export type User$updatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.treatments
   */
  export type User$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * User.payments
   */
  export type User$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User.salaries
   */
  export type User$salariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    where?: SalaryWhereInput
    orderBy?: SalaryOrderByWithRelationInput | SalaryOrderByWithRelationInput[]
    cursor?: SalaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryScalarFieldEnum | SalaryScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    where?: InventoryOrderWhereInput
    orderBy?: InventoryOrderOrderByWithRelationInput | InventoryOrderOrderByWithRelationInput[]
    cursor?: InventoryOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryOrderScalarFieldEnum | InventoryOrderScalarFieldEnum[]
  }

  /**
   * User.logs
   */
  export type User$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * User.Token
   */
  export type User$TokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
    branchId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
    branchId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    name: string | null
    contactNumber: string | null
    idCardNo: string | null
    email: string | null
    dateOfBirth: Date | null
    address: string | null
    medicalHistory: string | null
    allergies: string | null
    branchId: number | null
    patientType: $Enums.PatientType | null
    createdById: number | null
    updatedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contactNumber: string | null
    idCardNo: string | null
    email: string | null
    dateOfBirth: Date | null
    address: string | null
    medicalHistory: string | null
    allergies: string | null
    branchId: number | null
    patientType: $Enums.PatientType | null
    createdById: number | null
    updatedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    name: number
    contactNumber: number
    idCardNo: number
    email: number
    dateOfBirth: number
    address: number
    medicalHistory: number
    allergies: number
    branchId: number
    patientType: number
    createdById: number
    updatedById: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
    branchId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
    branchId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    name?: true
    contactNumber?: true
    idCardNo?: true
    email?: true
    dateOfBirth?: true
    address?: true
    medicalHistory?: true
    allergies?: true
    branchId?: true
    patientType?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    name?: true
    contactNumber?: true
    idCardNo?: true
    email?: true
    dateOfBirth?: true
    address?: true
    medicalHistory?: true
    allergies?: true
    branchId?: true
    patientType?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    name?: true
    contactNumber?: true
    idCardNo?: true
    email?: true
    dateOfBirth?: true
    address?: true
    medicalHistory?: true
    allergies?: true
    branchId?: true
    patientType?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: number
    name: string
    contactNumber: string | null
    idCardNo: string | null
    email: string | null
    dateOfBirth: Date | null
    address: string | null
    medicalHistory: string | null
    allergies: string | null
    branchId: number
    patientType: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactNumber?: boolean
    idCardNo?: boolean
    email?: boolean
    dateOfBirth?: boolean
    address?: boolean
    medicalHistory?: boolean
    allergies?: boolean
    branchId?: boolean
    patientType?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
    treatments?: boolean | Patient$treatmentsArgs<ExtArgs>
    bills?: boolean | Patient$billsArgs<ExtArgs>
    payments?: boolean | Patient$paymentsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>



  export type PatientSelectScalar = {
    id?: boolean
    name?: boolean
    contactNumber?: boolean
    idCardNo?: boolean
    email?: boolean
    dateOfBirth?: boolean
    address?: boolean
    medicalHistory?: boolean
    allergies?: boolean
    branchId?: boolean
    patientType?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contactNumber" | "idCardNo" | "email" | "dateOfBirth" | "address" | "medicalHistory" | "allergies" | "branchId" | "patientType" | "createdById" | "updatedById" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
    treatments?: boolean | Patient$treatmentsArgs<ExtArgs>
    bills?: boolean | Patient$billsArgs<ExtArgs>
    payments?: boolean | Patient$paymentsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      treatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      bills: Prisma.$PatientBillPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contactNumber: string | null
      idCardNo: string | null
      email: string | null
      dateOfBirth: Date | null
      address: string | null
      medicalHistory: string | null
      allergies: string | null
      branchId: number
      patientType: $Enums.PatientType
      createdById: number
      updatedById: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointments<T extends Patient$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    treatments<T extends Patient$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bills<T extends Patient$billsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$billsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Patient$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'Int'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly contactNumber: FieldRef<"Patient", 'String'>
    readonly idCardNo: FieldRef<"Patient", 'String'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly dateOfBirth: FieldRef<"Patient", 'DateTime'>
    readonly address: FieldRef<"Patient", 'String'>
    readonly medicalHistory: FieldRef<"Patient", 'String'>
    readonly allergies: FieldRef<"Patient", 'String'>
    readonly branchId: FieldRef<"Patient", 'Int'>
    readonly patientType: FieldRef<"Patient", 'PatientType'>
    readonly createdById: FieldRef<"Patient", 'Int'>
    readonly updatedById: FieldRef<"Patient", 'Int'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
    readonly deletedAt: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.appointments
   */
  export type Patient$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Patient.treatments
   */
  export type Patient$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Patient.bills
   */
  export type Patient$billsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    where?: PatientBillWhereInput
    orderBy?: PatientBillOrderByWithRelationInput | PatientBillOrderByWithRelationInput[]
    cursor?: PatientBillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientBillScalarFieldEnum | PatientBillScalarFieldEnum[]
  }

  /**
   * Patient.payments
   */
  export type Patient$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    receptionistId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    receptionistId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    receptionistId: number | null
    appointmentDate: Date | null
    appointmentTime: Date | null
    type: $Enums.AppointmentType | null
    status: $Enums.AppointmentStatus | null
    isFinalAppointment: boolean | null
    treatmentPlan: string | null
    createdById: number | null
    updatedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    receptionistId: number | null
    appointmentDate: Date | null
    appointmentTime: Date | null
    type: $Enums.AppointmentType | null
    status: $Enums.AppointmentStatus | null
    isFinalAppointment: boolean | null
    treatmentPlan: string | null
    createdById: number | null
    updatedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    receptionistId: number
    appointmentDate: number
    appointmentTime: number
    type: number
    status: number
    isFinalAppointment: number
    treatmentPlan: number
    createdById: number
    updatedById: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    receptionistId?: true
    createdById?: true
    updatedById?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    receptionistId?: true
    createdById?: true
    updatedById?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    receptionistId?: true
    appointmentDate?: true
    appointmentTime?: true
    type?: true
    status?: true
    isFinalAppointment?: true
    treatmentPlan?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    receptionistId?: true
    appointmentDate?: true
    appointmentTime?: true
    type?: true
    status?: true
    isFinalAppointment?: true
    treatmentPlan?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    receptionistId?: true
    appointmentDate?: true
    appointmentTime?: true
    type?: true
    status?: true
    isFinalAppointment?: true
    treatmentPlan?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: number
    patientId: number
    doctorId: number | null
    receptionistId: number | null
    appointmentDate: Date
    appointmentTime: Date | null
    type: $Enums.AppointmentType
    status: $Enums.AppointmentStatus
    isFinalAppointment: boolean
    treatmentPlan: string | null
    createdById: number
    updatedById: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    receptionistId?: boolean
    appointmentDate?: boolean
    appointmentTime?: boolean
    type?: boolean
    status?: boolean
    isFinalAppointment?: boolean
    treatmentPlan?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | Appointment$doctorArgs<ExtArgs>
    receptionist?: boolean | Appointment$receptionistArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    treatments?: boolean | Appointment$treatmentsArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>



  export type AppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    receptionistId?: boolean
    appointmentDate?: boolean
    appointmentTime?: boolean
    type?: boolean
    status?: boolean
    isFinalAppointment?: boolean
    treatmentPlan?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "receptionistId" | "appointmentDate" | "appointmentTime" | "type" | "status" | "isFinalAppointment" | "treatmentPlan" | "createdById" | "updatedById" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | Appointment$doctorArgs<ExtArgs>
    receptionist?: boolean | Appointment$receptionistArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    treatments?: boolean | Appointment$treatmentsArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$UserPayload<ExtArgs> | null
      receptionist: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      treatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      doctorId: number | null
      receptionistId: number | null
      appointmentDate: Date
      appointmentTime: Date | null
      type: $Enums.AppointmentType
      status: $Enums.AppointmentStatus
      isFinalAppointment: boolean
      treatmentPlan: string | null
      createdById: number
      updatedById: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends Appointment$doctorArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$doctorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    receptionist<T extends Appointment$receptionistArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$receptionistArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    treatments<T extends Appointment$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */ 
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'Int'>
    readonly patientId: FieldRef<"Appointment", 'Int'>
    readonly doctorId: FieldRef<"Appointment", 'Int'>
    readonly receptionistId: FieldRef<"Appointment", 'Int'>
    readonly appointmentDate: FieldRef<"Appointment", 'DateTime'>
    readonly appointmentTime: FieldRef<"Appointment", 'DateTime'>
    readonly type: FieldRef<"Appointment", 'AppointmentType'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly isFinalAppointment: FieldRef<"Appointment", 'Boolean'>
    readonly treatmentPlan: FieldRef<"Appointment", 'String'>
    readonly createdById: FieldRef<"Appointment", 'Int'>
    readonly updatedById: FieldRef<"Appointment", 'Int'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
    readonly deletedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.doctor
   */
  export type Appointment$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Appointment.receptionist
   */
  export type Appointment$receptionistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Appointment.treatments
   */
  export type Appointment$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Treatment
   */

  export type AggregateTreatment = {
    _count: TreatmentCountAggregateOutputType | null
    _avg: TreatmentAvgAggregateOutputType | null
    _sum: TreatmentSumAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  export type TreatmentAvgAggregateOutputType = {
    id: number | null
    baseCost: Decimal | null
    duration: number | null
  }

  export type TreatmentSumAggregateOutputType = {
    id: number | null
    baseCost: Decimal | null
    duration: number | null
  }

  export type TreatmentMinAggregateOutputType = {
    id: number | null
    treatmentName: string | null
    description: string | null
    baseCost: Decimal | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type TreatmentMaxAggregateOutputType = {
    id: number | null
    treatmentName: string | null
    description: string | null
    baseCost: Decimal | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type TreatmentCountAggregateOutputType = {
    id: number
    treatmentName: number
    description: number
    baseCost: number
    duration: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type TreatmentAvgAggregateInputType = {
    id?: true
    baseCost?: true
    duration?: true
  }

  export type TreatmentSumAggregateInputType = {
    id?: true
    baseCost?: true
    duration?: true
  }

  export type TreatmentMinAggregateInputType = {
    id?: true
    treatmentName?: true
    description?: true
    baseCost?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type TreatmentMaxAggregateInputType = {
    id?: true
    treatmentName?: true
    description?: true
    baseCost?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type TreatmentCountAggregateInputType = {
    id?: true
    treatmentName?: true
    description?: true
    baseCost?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type TreatmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatment to aggregate.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Treatments
    **/
    _count?: true | TreatmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreatmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreatmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentMaxAggregateInputType
  }

  export type GetTreatmentAggregateType<T extends TreatmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatment[P]>
      : GetScalarType<T[P], AggregateTreatment[P]>
  }




  export type TreatmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithAggregationInput | TreatmentOrderByWithAggregationInput[]
    by: TreatmentScalarFieldEnum[] | TreatmentScalarFieldEnum
    having?: TreatmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentCountAggregateInputType | true
    _avg?: TreatmentAvgAggregateInputType
    _sum?: TreatmentSumAggregateInputType
    _min?: TreatmentMinAggregateInputType
    _max?: TreatmentMaxAggregateInputType
  }

  export type TreatmentGroupByOutputType = {
    id: number
    treatmentName: string
    description: string | null
    baseCost: Decimal
    duration: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: TreatmentCountAggregateOutputType | null
    _avg: TreatmentAvgAggregateOutputType | null
    _sum: TreatmentSumAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  type GetTreatmentGroupByPayload<T extends TreatmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentName?: boolean
    description?: boolean
    baseCost?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patientTreatments?: boolean | Treatment$patientTreatmentsArgs<ExtArgs>
    patientBill?: boolean | Treatment$patientBillArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>



  export type TreatmentSelectScalar = {
    id?: boolean
    treatmentName?: boolean
    description?: boolean
    baseCost?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type TreatmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "treatmentName" | "description" | "baseCost" | "duration" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["treatment"]>
  export type TreatmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTreatments?: boolean | Treatment$patientTreatmentsArgs<ExtArgs>
    patientBill?: boolean | Treatment$patientBillArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TreatmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Treatment"
    objects: {
      patientTreatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      patientBill: Prisma.$PatientBillPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      treatmentName: string
      description: string | null
      baseCost: Prisma.Decimal
      duration: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["treatment"]>
    composites: {}
  }

  type TreatmentGetPayload<S extends boolean | null | undefined | TreatmentDefaultArgs> = $Result.GetResult<Prisma.$TreatmentPayload, S>

  type TreatmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TreatmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TreatmentCountAggregateInputType | true
    }

  export interface TreatmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Treatment'], meta: { name: 'Treatment' } }
    /**
     * Find zero or one Treatment that matches the filter.
     * @param {TreatmentFindUniqueArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentFindUniqueArgs>(args: SelectSubset<T, TreatmentFindUniqueArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Treatment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TreatmentFindUniqueOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Treatment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentFindFirstArgs>(args?: SelectSubset<T, TreatmentFindFirstArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Treatment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Treatments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treatments
     * const treatments = await prisma.treatment.findMany()
     * 
     * // Get first 10 Treatments
     * const treatments = await prisma.treatment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentWithIdOnly = await prisma.treatment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentFindManyArgs>(args?: SelectSubset<T, TreatmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Treatment.
     * @param {TreatmentCreateArgs} args - Arguments to create a Treatment.
     * @example
     * // Create one Treatment
     * const Treatment = await prisma.treatment.create({
     *   data: {
     *     // ... data to create a Treatment
     *   }
     * })
     * 
     */
    create<T extends TreatmentCreateArgs>(args: SelectSubset<T, TreatmentCreateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Treatments.
     * @param {TreatmentCreateManyArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentCreateManyArgs>(args?: SelectSubset<T, TreatmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Treatment.
     * @param {TreatmentDeleteArgs} args - Arguments to delete one Treatment.
     * @example
     * // Delete one Treatment
     * const Treatment = await prisma.treatment.delete({
     *   where: {
     *     // ... filter to delete one Treatment
     *   }
     * })
     * 
     */
    delete<T extends TreatmentDeleteArgs>(args: SelectSubset<T, TreatmentDeleteArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Treatment.
     * @param {TreatmentUpdateArgs} args - Arguments to update one Treatment.
     * @example
     * // Update one Treatment
     * const treatment = await prisma.treatment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentUpdateArgs>(args: SelectSubset<T, TreatmentUpdateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Treatments.
     * @param {TreatmentDeleteManyArgs} args - Arguments to filter Treatments to delete.
     * @example
     * // Delete a few Treatments
     * const { count } = await prisma.treatment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentDeleteManyArgs>(args?: SelectSubset<T, TreatmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treatments
     * const treatment = await prisma.treatment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentUpdateManyArgs>(args: SelectSubset<T, TreatmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Treatment.
     * @param {TreatmentUpsertArgs} args - Arguments to update or create a Treatment.
     * @example
     * // Update or create a Treatment
     * const treatment = await prisma.treatment.upsert({
     *   create: {
     *     // ... data to create a Treatment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treatment we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentUpsertArgs>(args: SelectSubset<T, TreatmentUpsertArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentCountArgs} args - Arguments to filter Treatments to count.
     * @example
     * // Count the number of Treatments
     * const count = await prisma.treatment.count({
     *   where: {
     *     // ... the filter for the Treatments we want to count
     *   }
     * })
    **/
    count<T extends TreatmentCountArgs>(
      args?: Subset<T, TreatmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentAggregateArgs>(args: Subset<T, TreatmentAggregateArgs>): Prisma.PrismaPromise<GetTreatmentAggregateType<T>>

    /**
     * Group by Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Treatment model
   */
  readonly fields: TreatmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Treatment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientTreatments<T extends Treatment$patientTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$patientTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientBill<T extends Treatment$patientBillArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$patientBillArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Treatment model
   */ 
  interface TreatmentFieldRefs {
    readonly id: FieldRef<"Treatment", 'Int'>
    readonly treatmentName: FieldRef<"Treatment", 'String'>
    readonly description: FieldRef<"Treatment", 'String'>
    readonly baseCost: FieldRef<"Treatment", 'Decimal'>
    readonly duration: FieldRef<"Treatment", 'Int'>
    readonly createdAt: FieldRef<"Treatment", 'DateTime'>
    readonly updatedAt: FieldRef<"Treatment", 'DateTime'>
    readonly deletedAt: FieldRef<"Treatment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Treatment findUnique
   */
  export type TreatmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findUniqueOrThrow
   */
  export type TreatmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findFirst
   */
  export type TreatmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findFirstOrThrow
   */
  export type TreatmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findMany
   */
  export type TreatmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatments to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment create
   */
  export type TreatmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Treatment.
     */
    data: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
  }

  /**
   * Treatment createMany
   */
  export type TreatmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Treatment update
   */
  export type TreatmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Treatment.
     */
    data: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
    /**
     * Choose, which Treatment to update.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment updateMany
   */
  export type TreatmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Treatments.
     */
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyInput>
    /**
     * Filter which Treatments to update
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to update.
     */
    limit?: number
  }

  /**
   * Treatment upsert
   */
  export type TreatmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Treatment to update in case it exists.
     */
    where: TreatmentWhereUniqueInput
    /**
     * In case the Treatment found by the `where` argument doesn't exist, create a new Treatment with this data.
     */
    create: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
    /**
     * In case the Treatment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
  }

  /**
   * Treatment delete
   */
  export type TreatmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter which Treatment to delete.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment deleteMany
   */
  export type TreatmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatments to delete
     */
    where?: TreatmentWhereInput
    /**
     * Limit how many Treatments to delete.
     */
    limit?: number
  }

  /**
   * Treatment.patientTreatments
   */
  export type Treatment$patientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Treatment.patientBill
   */
  export type Treatment$patientBillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    where?: PatientBillWhereInput
    orderBy?: PatientBillOrderByWithRelationInput | PatientBillOrderByWithRelationInput[]
    cursor?: PatientBillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientBillScalarFieldEnum | PatientBillScalarFieldEnum[]
  }

  /**
   * Treatment without action
   */
  export type TreatmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Treatment
     */
    omit?: TreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
  }


  /**
   * Model PatientTreatment
   */

  export type AggregatePatientTreatment = {
    _count: PatientTreatmentCountAggregateOutputType | null
    _avg: PatientTreatmentAvgAggregateOutputType | null
    _sum: PatientTreatmentSumAggregateOutputType | null
    _min: PatientTreatmentMinAggregateOutputType | null
    _max: PatientTreatmentMaxAggregateOutputType | null
  }

  export type PatientTreatmentAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    appointmentId: number | null
    sessionNumber: number | null
    actualCost: Decimal | null
    doctorId: number | null
  }

  export type PatientTreatmentSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    appointmentId: number | null
    sessionNumber: number | null
    actualCost: Decimal | null
    doctorId: number | null
  }

  export type PatientTreatmentMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    appointmentId: number | null
    sessionNumber: number | null
    treatmentDate: Date | null
    actualCost: Decimal | null
    doctorId: number | null
    status: $Enums.TreatmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PatientTreatmentMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    appointmentId: number | null
    sessionNumber: number | null
    treatmentDate: Date | null
    actualCost: Decimal | null
    doctorId: number | null
    status: $Enums.TreatmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type PatientTreatmentCountAggregateOutputType = {
    id: number
    patientId: number
    treatmentId: number
    appointmentId: number
    sessionNumber: number
    treatmentDate: number
    actualCost: number
    doctorId: number
    status: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PatientTreatmentAvgAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    appointmentId?: true
    sessionNumber?: true
    actualCost?: true
    doctorId?: true
  }

  export type PatientTreatmentSumAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    appointmentId?: true
    sessionNumber?: true
    actualCost?: true
    doctorId?: true
  }

  export type PatientTreatmentMinAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    appointmentId?: true
    sessionNumber?: true
    treatmentDate?: true
    actualCost?: true
    doctorId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientTreatmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    appointmentId?: true
    sessionNumber?: true
    treatmentDate?: true
    actualCost?: true
    doctorId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientTreatmentCountAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    appointmentId?: true
    sessionNumber?: true
    treatmentDate?: true
    actualCost?: true
    doctorId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PatientTreatmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientTreatment to aggregate.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientTreatments
    **/
    _count?: true | PatientTreatmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientTreatmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientTreatmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientTreatmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientTreatmentMaxAggregateInputType
  }

  export type GetPatientTreatmentAggregateType<T extends PatientTreatmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientTreatment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientTreatment[P]>
      : GetScalarType<T[P], AggregatePatientTreatment[P]>
  }




  export type PatientTreatmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithAggregationInput | PatientTreatmentOrderByWithAggregationInput[]
    by: PatientTreatmentScalarFieldEnum[] | PatientTreatmentScalarFieldEnum
    having?: PatientTreatmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientTreatmentCountAggregateInputType | true
    _avg?: PatientTreatmentAvgAggregateInputType
    _sum?: PatientTreatmentSumAggregateInputType
    _min?: PatientTreatmentMinAggregateInputType
    _max?: PatientTreatmentMaxAggregateInputType
  }

  export type PatientTreatmentGroupByOutputType = {
    id: number
    patientId: number
    treatmentId: number
    appointmentId: number
    sessionNumber: number
    treatmentDate: Date
    actualCost: Decimal
    doctorId: number
    status: $Enums.TreatmentStatus
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: PatientTreatmentCountAggregateOutputType | null
    _avg: PatientTreatmentAvgAggregateOutputType | null
    _sum: PatientTreatmentSumAggregateOutputType | null
    _min: PatientTreatmentMinAggregateOutputType | null
    _max: PatientTreatmentMaxAggregateOutputType | null
  }

  type GetPatientTreatmentGroupByPayload<T extends PatientTreatmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientTreatmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientTreatmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientTreatmentGroupByOutputType[P]>
            : GetScalarType<T[P], PatientTreatmentGroupByOutputType[P]>
        }
      >
    >


  export type PatientTreatmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentId?: boolean
    appointmentId?: boolean
    sessionNumber?: boolean
    treatmentDate?: boolean
    actualCost?: boolean
    doctorId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientTreatment"]>



  export type PatientTreatmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    treatmentId?: boolean
    appointmentId?: boolean
    sessionNumber?: boolean
    treatmentDate?: boolean
    actualCost?: boolean
    doctorId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PatientTreatmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "treatmentId" | "appointmentId" | "sessionNumber" | "treatmentDate" | "actualCost" | "doctorId" | "status" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["patientTreatment"]>
  export type PatientTreatmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientTreatmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientTreatment"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      treatment: Prisma.$TreatmentPayload<ExtArgs>
      appointment: Prisma.$AppointmentPayload<ExtArgs>
      doctor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      treatmentId: number
      appointmentId: number
      sessionNumber: number
      treatmentDate: Date
      actualCost: Prisma.Decimal
      doctorId: number
      status: $Enums.TreatmentStatus
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["patientTreatment"]>
    composites: {}
  }

  type PatientTreatmentGetPayload<S extends boolean | null | undefined | PatientTreatmentDefaultArgs> = $Result.GetResult<Prisma.$PatientTreatmentPayload, S>

  type PatientTreatmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientTreatmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientTreatmentCountAggregateInputType | true
    }

  export interface PatientTreatmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientTreatment'], meta: { name: 'PatientTreatment' } }
    /**
     * Find zero or one PatientTreatment that matches the filter.
     * @param {PatientTreatmentFindUniqueArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientTreatmentFindUniqueArgs>(args: SelectSubset<T, PatientTreatmentFindUniqueArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientTreatment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientTreatmentFindUniqueOrThrowArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientTreatmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientTreatmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientTreatment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentFindFirstArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientTreatmentFindFirstArgs>(args?: SelectSubset<T, PatientTreatmentFindFirstArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientTreatment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentFindFirstOrThrowArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientTreatmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientTreatmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientTreatments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientTreatments
     * const patientTreatments = await prisma.patientTreatment.findMany()
     * 
     * // Get first 10 PatientTreatments
     * const patientTreatments = await prisma.patientTreatment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientTreatmentWithIdOnly = await prisma.patientTreatment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientTreatmentFindManyArgs>(args?: SelectSubset<T, PatientTreatmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientTreatment.
     * @param {PatientTreatmentCreateArgs} args - Arguments to create a PatientTreatment.
     * @example
     * // Create one PatientTreatment
     * const PatientTreatment = await prisma.patientTreatment.create({
     *   data: {
     *     // ... data to create a PatientTreatment
     *   }
     * })
     * 
     */
    create<T extends PatientTreatmentCreateArgs>(args: SelectSubset<T, PatientTreatmentCreateArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientTreatments.
     * @param {PatientTreatmentCreateManyArgs} args - Arguments to create many PatientTreatments.
     * @example
     * // Create many PatientTreatments
     * const patientTreatment = await prisma.patientTreatment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientTreatmentCreateManyArgs>(args?: SelectSubset<T, PatientTreatmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PatientTreatment.
     * @param {PatientTreatmentDeleteArgs} args - Arguments to delete one PatientTreatment.
     * @example
     * // Delete one PatientTreatment
     * const PatientTreatment = await prisma.patientTreatment.delete({
     *   where: {
     *     // ... filter to delete one PatientTreatment
     *   }
     * })
     * 
     */
    delete<T extends PatientTreatmentDeleteArgs>(args: SelectSubset<T, PatientTreatmentDeleteArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientTreatment.
     * @param {PatientTreatmentUpdateArgs} args - Arguments to update one PatientTreatment.
     * @example
     * // Update one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientTreatmentUpdateArgs>(args: SelectSubset<T, PatientTreatmentUpdateArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientTreatments.
     * @param {PatientTreatmentDeleteManyArgs} args - Arguments to filter PatientTreatments to delete.
     * @example
     * // Delete a few PatientTreatments
     * const { count } = await prisma.patientTreatment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientTreatmentDeleteManyArgs>(args?: SelectSubset<T, PatientTreatmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientTreatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientTreatments
     * const patientTreatment = await prisma.patientTreatment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientTreatmentUpdateManyArgs>(args: SelectSubset<T, PatientTreatmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientTreatment.
     * @param {PatientTreatmentUpsertArgs} args - Arguments to update or create a PatientTreatment.
     * @example
     * // Update or create a PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.upsert({
     *   create: {
     *     // ... data to create a PatientTreatment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientTreatment we want to update
     *   }
     * })
     */
    upsert<T extends PatientTreatmentUpsertArgs>(args: SelectSubset<T, PatientTreatmentUpsertArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientTreatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentCountArgs} args - Arguments to filter PatientTreatments to count.
     * @example
     * // Count the number of PatientTreatments
     * const count = await prisma.patientTreatment.count({
     *   where: {
     *     // ... the filter for the PatientTreatments we want to count
     *   }
     * })
    **/
    count<T extends PatientTreatmentCountArgs>(
      args?: Subset<T, PatientTreatmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientTreatmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientTreatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientTreatmentAggregateArgs>(args: Subset<T, PatientTreatmentAggregateArgs>): Prisma.PrismaPromise<GetPatientTreatmentAggregateType<T>>

    /**
     * Group by PatientTreatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientTreatmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientTreatmentGroupByArgs['orderBy'] }
        : { orderBy?: PatientTreatmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientTreatmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientTreatmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientTreatment model
   */
  readonly fields: PatientTreatmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientTreatment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientTreatmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    treatment<T extends TreatmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentDefaultArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientTreatment model
   */ 
  interface PatientTreatmentFieldRefs {
    readonly id: FieldRef<"PatientTreatment", 'Int'>
    readonly patientId: FieldRef<"PatientTreatment", 'Int'>
    readonly treatmentId: FieldRef<"PatientTreatment", 'Int'>
    readonly appointmentId: FieldRef<"PatientTreatment", 'Int'>
    readonly sessionNumber: FieldRef<"PatientTreatment", 'Int'>
    readonly treatmentDate: FieldRef<"PatientTreatment", 'DateTime'>
    readonly actualCost: FieldRef<"PatientTreatment", 'Decimal'>
    readonly doctorId: FieldRef<"PatientTreatment", 'Int'>
    readonly status: FieldRef<"PatientTreatment", 'TreatmentStatus'>
    readonly createdAt: FieldRef<"PatientTreatment", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientTreatment", 'DateTime'>
    readonly deletedAt: FieldRef<"PatientTreatment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientTreatment findUnique
   */
  export type PatientTreatmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment findUniqueOrThrow
   */
  export type PatientTreatmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment findFirst
   */
  export type PatientTreatmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientTreatments.
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientTreatments.
     */
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientTreatment findFirstOrThrow
   */
  export type PatientTreatmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientTreatments.
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientTreatments.
     */
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientTreatment findMany
   */
  export type PatientTreatmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatments to fetch.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientTreatments.
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientTreatment create
   */
  export type PatientTreatmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientTreatment.
     */
    data: XOR<PatientTreatmentCreateInput, PatientTreatmentUncheckedCreateInput>
  }

  /**
   * PatientTreatment createMany
   */
  export type PatientTreatmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientTreatments.
     */
    data: PatientTreatmentCreateManyInput | PatientTreatmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientTreatment update
   */
  export type PatientTreatmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientTreatment.
     */
    data: XOR<PatientTreatmentUpdateInput, PatientTreatmentUncheckedUpdateInput>
    /**
     * Choose, which PatientTreatment to update.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment updateMany
   */
  export type PatientTreatmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientTreatments.
     */
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyInput>
    /**
     * Filter which PatientTreatments to update
     */
    where?: PatientTreatmentWhereInput
    /**
     * Limit how many PatientTreatments to update.
     */
    limit?: number
  }

  /**
   * PatientTreatment upsert
   */
  export type PatientTreatmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientTreatment to update in case it exists.
     */
    where: PatientTreatmentWhereUniqueInput
    /**
     * In case the PatientTreatment found by the `where` argument doesn't exist, create a new PatientTreatment with this data.
     */
    create: XOR<PatientTreatmentCreateInput, PatientTreatmentUncheckedCreateInput>
    /**
     * In case the PatientTreatment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientTreatmentUpdateInput, PatientTreatmentUncheckedUpdateInput>
  }

  /**
   * PatientTreatment delete
   */
  export type PatientTreatmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter which PatientTreatment to delete.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment deleteMany
   */
  export type PatientTreatmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientTreatments to delete
     */
    where?: PatientTreatmentWhereInput
    /**
     * Limit how many PatientTreatments to delete.
     */
    limit?: number
  }

  /**
   * PatientTreatment without action
   */
  export type PatientTreatmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientTreatment
     */
    omit?: PatientTreatmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
  }


  /**
   * Model PatientBill
   */

  export type AggregatePatientBill = {
    _count: PatientBillCountAggregateOutputType | null
    _avg: PatientBillAvgAggregateOutputType | null
    _sum: PatientBillSumAggregateOutputType | null
    _min: PatientBillMinAggregateOutputType | null
    _max: PatientBillMaxAggregateOutputType | null
  }

  export type PatientBillAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    totalAmount: Decimal | null
    paidAmount: Decimal | null
    remainingAmount: Decimal | null
  }

  export type PatientBillSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    totalAmount: Decimal | null
    paidAmount: Decimal | null
    remainingAmount: Decimal | null
  }

  export type PatientBillMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    totalAmount: Decimal | null
    paidAmount: Decimal | null
    remainingAmount: Decimal | null
    status: $Enums.BillStatus | null
  }

  export type PatientBillMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    treatmentId: number | null
    totalAmount: Decimal | null
    paidAmount: Decimal | null
    remainingAmount: Decimal | null
    status: $Enums.BillStatus | null
  }

  export type PatientBillCountAggregateOutputType = {
    id: number
    patientId: number
    treatmentId: number
    totalAmount: number
    paidAmount: number
    remainingAmount: number
    status: number
    _all: number
  }


  export type PatientBillAvgAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    totalAmount?: true
    paidAmount?: true
    remainingAmount?: true
  }

  export type PatientBillSumAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    totalAmount?: true
    paidAmount?: true
    remainingAmount?: true
  }

  export type PatientBillMinAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    totalAmount?: true
    paidAmount?: true
    remainingAmount?: true
    status?: true
  }

  export type PatientBillMaxAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    totalAmount?: true
    paidAmount?: true
    remainingAmount?: true
    status?: true
  }

  export type PatientBillCountAggregateInputType = {
    id?: true
    patientId?: true
    treatmentId?: true
    totalAmount?: true
    paidAmount?: true
    remainingAmount?: true
    status?: true
    _all?: true
  }

  export type PatientBillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientBill to aggregate.
     */
    where?: PatientBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: PatientBillOrderByWithRelationInput | PatientBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientBills
    **/
    _count?: true | PatientBillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientBillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientBillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientBillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientBillMaxAggregateInputType
  }

  export type GetPatientBillAggregateType<T extends PatientBillAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientBill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientBill[P]>
      : GetScalarType<T[P], AggregatePatientBill[P]>
  }




  export type PatientBillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientBillWhereInput
    orderBy?: PatientBillOrderByWithAggregationInput | PatientBillOrderByWithAggregationInput[]
    by: PatientBillScalarFieldEnum[] | PatientBillScalarFieldEnum
    having?: PatientBillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientBillCountAggregateInputType | true
    _avg?: PatientBillAvgAggregateInputType
    _sum?: PatientBillSumAggregateInputType
    _min?: PatientBillMinAggregateInputType
    _max?: PatientBillMaxAggregateInputType
  }

  export type PatientBillGroupByOutputType = {
    id: number
    patientId: number
    treatmentId: number
    totalAmount: Decimal
    paidAmount: Decimal
    remainingAmount: Decimal
    status: $Enums.BillStatus
    _count: PatientBillCountAggregateOutputType | null
    _avg: PatientBillAvgAggregateOutputType | null
    _sum: PatientBillSumAggregateOutputType | null
    _min: PatientBillMinAggregateOutputType | null
    _max: PatientBillMaxAggregateOutputType | null
  }

  type GetPatientBillGroupByPayload<T extends PatientBillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientBillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientBillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientBillGroupByOutputType[P]>
            : GetScalarType<T[P], PatientBillGroupByOutputType[P]>
        }
      >
    >


  export type PatientBillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentId?: boolean
    totalAmount?: boolean
    paidAmount?: boolean
    remainingAmount?: boolean
    status?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    payments?: boolean | PatientBill$paymentsArgs<ExtArgs>
    _count?: boolean | PatientBillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientBill"]>



  export type PatientBillSelectScalar = {
    id?: boolean
    patientId?: boolean
    treatmentId?: boolean
    totalAmount?: boolean
    paidAmount?: boolean
    remainingAmount?: boolean
    status?: boolean
  }

  export type PatientBillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "treatmentId" | "totalAmount" | "paidAmount" | "remainingAmount" | "status", ExtArgs["result"]["patientBill"]>
  export type PatientBillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    payments?: boolean | PatientBill$paymentsArgs<ExtArgs>
    _count?: boolean | PatientBillCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PatientBillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientBill"
    objects: {
      treatment: Prisma.$TreatmentPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      treatmentId: number
      totalAmount: Prisma.Decimal
      paidAmount: Prisma.Decimal
      remainingAmount: Prisma.Decimal
      status: $Enums.BillStatus
    }, ExtArgs["result"]["patientBill"]>
    composites: {}
  }

  type PatientBillGetPayload<S extends boolean | null | undefined | PatientBillDefaultArgs> = $Result.GetResult<Prisma.$PatientBillPayload, S>

  type PatientBillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientBillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientBillCountAggregateInputType | true
    }

  export interface PatientBillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientBill'], meta: { name: 'PatientBill' } }
    /**
     * Find zero or one PatientBill that matches the filter.
     * @param {PatientBillFindUniqueArgs} args - Arguments to find a PatientBill
     * @example
     * // Get one PatientBill
     * const patientBill = await prisma.patientBill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientBillFindUniqueArgs>(args: SelectSubset<T, PatientBillFindUniqueArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientBill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientBillFindUniqueOrThrowArgs} args - Arguments to find a PatientBill
     * @example
     * // Get one PatientBill
     * const patientBill = await prisma.patientBill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientBillFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientBillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientBill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillFindFirstArgs} args - Arguments to find a PatientBill
     * @example
     * // Get one PatientBill
     * const patientBill = await prisma.patientBill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientBillFindFirstArgs>(args?: SelectSubset<T, PatientBillFindFirstArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientBill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillFindFirstOrThrowArgs} args - Arguments to find a PatientBill
     * @example
     * // Get one PatientBill
     * const patientBill = await prisma.patientBill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientBillFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientBillFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientBills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientBills
     * const patientBills = await prisma.patientBill.findMany()
     * 
     * // Get first 10 PatientBills
     * const patientBills = await prisma.patientBill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientBillWithIdOnly = await prisma.patientBill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientBillFindManyArgs>(args?: SelectSubset<T, PatientBillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientBill.
     * @param {PatientBillCreateArgs} args - Arguments to create a PatientBill.
     * @example
     * // Create one PatientBill
     * const PatientBill = await prisma.patientBill.create({
     *   data: {
     *     // ... data to create a PatientBill
     *   }
     * })
     * 
     */
    create<T extends PatientBillCreateArgs>(args: SelectSubset<T, PatientBillCreateArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientBills.
     * @param {PatientBillCreateManyArgs} args - Arguments to create many PatientBills.
     * @example
     * // Create many PatientBills
     * const patientBill = await prisma.patientBill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientBillCreateManyArgs>(args?: SelectSubset<T, PatientBillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PatientBill.
     * @param {PatientBillDeleteArgs} args - Arguments to delete one PatientBill.
     * @example
     * // Delete one PatientBill
     * const PatientBill = await prisma.patientBill.delete({
     *   where: {
     *     // ... filter to delete one PatientBill
     *   }
     * })
     * 
     */
    delete<T extends PatientBillDeleteArgs>(args: SelectSubset<T, PatientBillDeleteArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientBill.
     * @param {PatientBillUpdateArgs} args - Arguments to update one PatientBill.
     * @example
     * // Update one PatientBill
     * const patientBill = await prisma.patientBill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientBillUpdateArgs>(args: SelectSubset<T, PatientBillUpdateArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientBills.
     * @param {PatientBillDeleteManyArgs} args - Arguments to filter PatientBills to delete.
     * @example
     * // Delete a few PatientBills
     * const { count } = await prisma.patientBill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientBillDeleteManyArgs>(args?: SelectSubset<T, PatientBillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientBills
     * const patientBill = await prisma.patientBill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientBillUpdateManyArgs>(args: SelectSubset<T, PatientBillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientBill.
     * @param {PatientBillUpsertArgs} args - Arguments to update or create a PatientBill.
     * @example
     * // Update or create a PatientBill
     * const patientBill = await prisma.patientBill.upsert({
     *   create: {
     *     // ... data to create a PatientBill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientBill we want to update
     *   }
     * })
     */
    upsert<T extends PatientBillUpsertArgs>(args: SelectSubset<T, PatientBillUpsertArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientBills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillCountArgs} args - Arguments to filter PatientBills to count.
     * @example
     * // Count the number of PatientBills
     * const count = await prisma.patientBill.count({
     *   where: {
     *     // ... the filter for the PatientBills we want to count
     *   }
     * })
    **/
    count<T extends PatientBillCountArgs>(
      args?: Subset<T, PatientBillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientBillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientBill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientBillAggregateArgs>(args: Subset<T, PatientBillAggregateArgs>): Prisma.PrismaPromise<GetPatientBillAggregateType<T>>

    /**
     * Group by PatientBill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientBillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientBillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientBillGroupByArgs['orderBy'] }
        : { orderBy?: PatientBillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientBillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientBillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientBill model
   */
  readonly fields: PatientBillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientBill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientBillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    treatment<T extends TreatmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentDefaultArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends PatientBill$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, PatientBill$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientBill model
   */ 
  interface PatientBillFieldRefs {
    readonly id: FieldRef<"PatientBill", 'Int'>
    readonly patientId: FieldRef<"PatientBill", 'Int'>
    readonly treatmentId: FieldRef<"PatientBill", 'Int'>
    readonly totalAmount: FieldRef<"PatientBill", 'Decimal'>
    readonly paidAmount: FieldRef<"PatientBill", 'Decimal'>
    readonly remainingAmount: FieldRef<"PatientBill", 'Decimal'>
    readonly status: FieldRef<"PatientBill", 'BillStatus'>
  }
    

  // Custom InputTypes
  /**
   * PatientBill findUnique
   */
  export type PatientBillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * Filter, which PatientBill to fetch.
     */
    where: PatientBillWhereUniqueInput
  }

  /**
   * PatientBill findUniqueOrThrow
   */
  export type PatientBillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * Filter, which PatientBill to fetch.
     */
    where: PatientBillWhereUniqueInput
  }

  /**
   * PatientBill findFirst
   */
  export type PatientBillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * Filter, which PatientBill to fetch.
     */
    where?: PatientBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: PatientBillOrderByWithRelationInput | PatientBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientBills.
     */
    cursor?: PatientBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientBills.
     */
    distinct?: PatientBillScalarFieldEnum | PatientBillScalarFieldEnum[]
  }

  /**
   * PatientBill findFirstOrThrow
   */
  export type PatientBillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * Filter, which PatientBill to fetch.
     */
    where?: PatientBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: PatientBillOrderByWithRelationInput | PatientBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientBills.
     */
    cursor?: PatientBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientBills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientBills.
     */
    distinct?: PatientBillScalarFieldEnum | PatientBillScalarFieldEnum[]
  }

  /**
   * PatientBill findMany
   */
  export type PatientBillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * Filter, which PatientBills to fetch.
     */
    where?: PatientBillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientBills to fetch.
     */
    orderBy?: PatientBillOrderByWithRelationInput | PatientBillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientBills.
     */
    cursor?: PatientBillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientBills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientBills.
     */
    skip?: number
    distinct?: PatientBillScalarFieldEnum | PatientBillScalarFieldEnum[]
  }

  /**
   * PatientBill create
   */
  export type PatientBillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientBill.
     */
    data: XOR<PatientBillCreateInput, PatientBillUncheckedCreateInput>
  }

  /**
   * PatientBill createMany
   */
  export type PatientBillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientBills.
     */
    data: PatientBillCreateManyInput | PatientBillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientBill update
   */
  export type PatientBillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientBill.
     */
    data: XOR<PatientBillUpdateInput, PatientBillUncheckedUpdateInput>
    /**
     * Choose, which PatientBill to update.
     */
    where: PatientBillWhereUniqueInput
  }

  /**
   * PatientBill updateMany
   */
  export type PatientBillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientBills.
     */
    data: XOR<PatientBillUpdateManyMutationInput, PatientBillUncheckedUpdateManyInput>
    /**
     * Filter which PatientBills to update
     */
    where?: PatientBillWhereInput
    /**
     * Limit how many PatientBills to update.
     */
    limit?: number
  }

  /**
   * PatientBill upsert
   */
  export type PatientBillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientBill to update in case it exists.
     */
    where: PatientBillWhereUniqueInput
    /**
     * In case the PatientBill found by the `where` argument doesn't exist, create a new PatientBill with this data.
     */
    create: XOR<PatientBillCreateInput, PatientBillUncheckedCreateInput>
    /**
     * In case the PatientBill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientBillUpdateInput, PatientBillUncheckedUpdateInput>
  }

  /**
   * PatientBill delete
   */
  export type PatientBillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
    /**
     * Filter which PatientBill to delete.
     */
    where: PatientBillWhereUniqueInput
  }

  /**
   * PatientBill deleteMany
   */
  export type PatientBillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientBills to delete
     */
    where?: PatientBillWhereInput
    /**
     * Limit how many PatientBills to delete.
     */
    limit?: number
  }

  /**
   * PatientBill.payments
   */
  export type PatientBill$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * PatientBill without action
   */
  export type PatientBillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientBill
     */
    select?: PatientBillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientBill
     */
    omit?: PatientBillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientBillInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    billId: number | null
    amount: Decimal | null
    receivedById: number | null
    patientId: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    billId: number | null
    amount: Decimal | null
    receivedById: number | null
    patientId: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    billId: number | null
    amount: Decimal | null
    paymentDate: Date | null
    paymentMethod: $Enums.PaymentMethod | null
    status: $Enums.PaymentStatus | null
    receivedById: number | null
    patientId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    billId: number | null
    amount: Decimal | null
    paymentDate: Date | null
    paymentMethod: $Enums.PaymentMethod | null
    status: $Enums.PaymentStatus | null
    receivedById: number | null
    patientId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    billId: number
    amount: number
    paymentDate: number
    paymentMethod: number
    status: number
    receivedById: number
    patientId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    billId?: true
    amount?: true
    receivedById?: true
    patientId?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    billId?: true
    amount?: true
    receivedById?: true
    patientId?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    billId?: true
    amount?: true
    paymentDate?: true
    paymentMethod?: true
    status?: true
    receivedById?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    billId?: true
    amount?: true
    paymentDate?: true
    paymentMethod?: true
    status?: true
    receivedById?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    billId?: true
    amount?: true
    paymentDate?: true
    paymentMethod?: true
    status?: true
    receivedById?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    billId: number
    amount: Decimal
    paymentDate: Date
    paymentMethod: $Enums.PaymentMethod
    status: $Enums.PaymentStatus
    receivedById: number
    patientId: number
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billId?: boolean
    amount?: boolean
    paymentDate?: boolean
    paymentMethod?: boolean
    status?: boolean
    receivedById?: boolean
    patientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bill?: boolean | PatientBillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>



  export type PaymentSelectScalar = {
    id?: boolean
    billId?: boolean
    amount?: boolean
    paymentDate?: boolean
    paymentMethod?: boolean
    status?: boolean
    receivedById?: boolean
    patientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "billId" | "amount" | "paymentDate" | "paymentMethod" | "status" | "receivedById" | "patientId" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    bill?: boolean | PatientBillDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      receivedBy: Prisma.$UserPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      bill: Prisma.$PatientBillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      billId: number
      amount: Prisma.Decimal
      paymentDate: Date
      paymentMethod: $Enums.PaymentMethod
      status: $Enums.PaymentStatus
      receivedById: number
      patientId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receivedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bill<T extends PatientBillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientBillDefaultArgs<ExtArgs>>): Prisma__PatientBillClient<$Result.GetResult<Prisma.$PatientBillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly billId: FieldRef<"Payment", 'Int'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly paymentDate: FieldRef<"Payment", 'DateTime'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
    readonly receivedById: FieldRef<"Payment", 'Int'>
    readonly patientId: FieldRef<"Payment", 'Int'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Expense
   */

  export type AggregateExpense = {
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  export type ExpenseAvgAggregateOutputType = {
    id: number | null
    branchId: number | null
    organizationId: number | null
    amount: Decimal | null
  }

  export type ExpenseSumAggregateOutputType = {
    id: number | null
    branchId: number | null
    organizationId: number | null
    amount: Decimal | null
  }

  export type ExpenseMinAggregateOutputType = {
    id: number | null
    branchId: number | null
    organizationId: number | null
    expenseName: string | null
    expenseType: $Enums.ExpenseType | null
    amount: Decimal | null
    date: Date | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ExpenseMaxAggregateOutputType = {
    id: number | null
    branchId: number | null
    organizationId: number | null
    expenseName: string | null
    expenseType: $Enums.ExpenseType | null
    amount: Decimal | null
    date: Date | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ExpenseCountAggregateOutputType = {
    id: number
    branchId: number
    organizationId: number
    expenseName: number
    expenseType: number
    amount: number
    date: number
    description: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ExpenseAvgAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
    amount?: true
  }

  export type ExpenseSumAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
    amount?: true
  }

  export type ExpenseMinAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
    expenseName?: true
    expenseType?: true
    amount?: true
    date?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ExpenseMaxAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
    expenseName?: true
    expenseType?: true
    amount?: true
    date?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ExpenseCountAggregateInputType = {
    id?: true
    branchId?: true
    organizationId?: true
    expenseName?: true
    expenseType?: true
    amount?: true
    date?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ExpenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expense to aggregate.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expenses
    **/
    _count?: true | ExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseMaxAggregateInputType
  }

  export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense[P]>
      : GetScalarType<T[P], AggregateExpense[P]>
  }




  export type ExpenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithAggregationInput | ExpenseOrderByWithAggregationInput[]
    by: ExpenseScalarFieldEnum[] | ExpenseScalarFieldEnum
    having?: ExpenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseCountAggregateInputType | true
    _avg?: ExpenseAvgAggregateInputType
    _sum?: ExpenseSumAggregateInputType
    _min?: ExpenseMinAggregateInputType
    _max?: ExpenseMaxAggregateInputType
  }

  export type ExpenseGroupByOutputType = {
    id: number
    branchId: number
    organizationId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal
    date: Date
    description: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  type GetExpenseGroupByPayload<T extends ExpenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    organizationId?: boolean
    expenseName?: boolean
    expenseType?: boolean
    amount?: boolean
    date?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>



  export type ExpenseSelectScalar = {
    id?: boolean
    branchId?: boolean
    organizationId?: boolean
    expenseName?: boolean
    expenseType?: boolean
    amount?: boolean
    date?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ExpenseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "branchId" | "organizationId" | "expenseName" | "expenseType" | "amount" | "date" | "description" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["expense"]>
  export type ExpenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ExpensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Expense"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      branchId: number
      organizationId: number
      expenseName: string
      expenseType: $Enums.ExpenseType
      amount: Prisma.Decimal
      date: Date
      description: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["expense"]>
    composites: {}
  }

  type ExpenseGetPayload<S extends boolean | null | undefined | ExpenseDefaultArgs> = $Result.GetResult<Prisma.$ExpensePayload, S>

  type ExpenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseCountAggregateInputType | true
    }

  export interface ExpenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expense'], meta: { name: 'Expense' } }
    /**
     * Find zero or one Expense that matches the filter.
     * @param {ExpenseFindUniqueArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpenseFindUniqueArgs>(args: SelectSubset<T, ExpenseFindUniqueArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expense that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpenseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpenseFindFirstArgs>(args?: SelectSubset<T, ExpenseFindFirstArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpenseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expense.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpenseFindManyArgs>(args?: SelectSubset<T, ExpenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expense.
     * @param {ExpenseCreateArgs} args - Arguments to create a Expense.
     * @example
     * // Create one Expense
     * const Expense = await prisma.expense.create({
     *   data: {
     *     // ... data to create a Expense
     *   }
     * })
     * 
     */
    create<T extends ExpenseCreateArgs>(args: SelectSubset<T, ExpenseCreateArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {ExpenseCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpenseCreateManyArgs>(args?: SelectSubset<T, ExpenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Expense.
     * @param {ExpenseDeleteArgs} args - Arguments to delete one Expense.
     * @example
     * // Delete one Expense
     * const Expense = await prisma.expense.delete({
     *   where: {
     *     // ... filter to delete one Expense
     *   }
     * })
     * 
     */
    delete<T extends ExpenseDeleteArgs>(args: SelectSubset<T, ExpenseDeleteArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expense.
     * @param {ExpenseUpdateArgs} args - Arguments to update one Expense.
     * @example
     * // Update one Expense
     * const expense = await prisma.expense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpenseUpdateArgs>(args: SelectSubset<T, ExpenseUpdateArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {ExpenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpenseDeleteManyArgs>(args?: SelectSubset<T, ExpenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpenseUpdateManyArgs>(args: SelectSubset<T, ExpenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Expense.
     * @param {ExpenseUpsertArgs} args - Arguments to update or create a Expense.
     * @example
     * // Update or create a Expense
     * const expense = await prisma.expense.upsert({
     *   create: {
     *     // ... data to create a Expense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense we want to update
     *   }
     * })
     */
    upsert<T extends ExpenseUpsertArgs>(args: SelectSubset<T, ExpenseUpsertArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expense.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends ExpenseCountArgs>(
      args?: Subset<T, ExpenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseAggregateArgs>(args: Subset<T, ExpenseAggregateArgs>): Prisma.PrismaPromise<GetExpenseAggregateType<T>>

    /**
     * Group by Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Expense model
   */
  readonly fields: ExpenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Expense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Expense model
   */ 
  interface ExpenseFieldRefs {
    readonly id: FieldRef<"Expense", 'Int'>
    readonly branchId: FieldRef<"Expense", 'Int'>
    readonly organizationId: FieldRef<"Expense", 'Int'>
    readonly expenseName: FieldRef<"Expense", 'String'>
    readonly expenseType: FieldRef<"Expense", 'ExpenseType'>
    readonly amount: FieldRef<"Expense", 'Decimal'>
    readonly date: FieldRef<"Expense", 'DateTime'>
    readonly description: FieldRef<"Expense", 'String'>
    readonly createdAt: FieldRef<"Expense", 'DateTime'>
    readonly updatedAt: FieldRef<"Expense", 'DateTime'>
    readonly deletedAt: FieldRef<"Expense", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Expense findUnique
   */
  export type ExpenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense findUniqueOrThrow
   */
  export type ExpenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense findFirst
   */
  export type ExpenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense findFirstOrThrow
   */
  export type ExpenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense findMany
   */
  export type ExpenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense create
   */
  export type ExpenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The data needed to create a Expense.
     */
    data: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
  }

  /**
   * Expense createMany
   */
  export type ExpenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Expenses.
     */
    data: ExpenseCreateManyInput | ExpenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Expense update
   */
  export type ExpenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The data needed to update a Expense.
     */
    data: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
    /**
     * Choose, which Expense to update.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense updateMany
   */
  export type ExpenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpenseWhereInput
    /**
     * Limit how many Expenses to update.
     */
    limit?: number
  }

  /**
   * Expense upsert
   */
  export type ExpenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The filter to search for the Expense to update in case it exists.
     */
    where: ExpenseWhereUniqueInput
    /**
     * In case the Expense found by the `where` argument doesn't exist, create a new Expense with this data.
     */
    create: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
    /**
     * In case the Expense was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
  }

  /**
   * Expense delete
   */
  export type ExpenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter which Expense to delete.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense deleteMany
   */
  export type ExpenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to delete
     */
    where?: ExpenseWhereInput
    /**
     * Limit how many Expenses to delete.
     */
    limit?: number
  }

  /**
   * Expense without action
   */
  export type ExpenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
  }


  /**
   * Model Salary
   */

  export type AggregateSalary = {
    _count: SalaryCountAggregateOutputType | null
    _avg: SalaryAvgAggregateOutputType | null
    _sum: SalarySumAggregateOutputType | null
    _min: SalaryMinAggregateOutputType | null
    _max: SalaryMaxAggregateOutputType | null
  }

  export type SalaryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    amount: Decimal | null
  }

  export type SalarySumAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    amount: Decimal | null
  }

  export type SalaryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    salaryMonth: Date | null
    amount: Decimal | null
    status: $Enums.SalaryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type SalaryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    salaryMonth: Date | null
    amount: Decimal | null
    status: $Enums.SalaryStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type SalaryCountAggregateOutputType = {
    id: number
    userId: number
    branchId: number
    salaryMonth: number
    amount: number
    status: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type SalaryAvgAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    amount?: true
  }

  export type SalarySumAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    amount?: true
  }

  export type SalaryMinAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    salaryMonth?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type SalaryMaxAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    salaryMonth?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type SalaryCountAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    salaryMonth?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type SalaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Salary to aggregate.
     */
    where?: SalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salaries to fetch.
     */
    orderBy?: SalaryOrderByWithRelationInput | SalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Salaries
    **/
    _count?: true | SalaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaryMaxAggregateInputType
  }

  export type GetSalaryAggregateType<T extends SalaryAggregateArgs> = {
        [P in keyof T & keyof AggregateSalary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalary[P]>
      : GetScalarType<T[P], AggregateSalary[P]>
  }




  export type SalaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryWhereInput
    orderBy?: SalaryOrderByWithAggregationInput | SalaryOrderByWithAggregationInput[]
    by: SalaryScalarFieldEnum[] | SalaryScalarFieldEnum
    having?: SalaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaryCountAggregateInputType | true
    _avg?: SalaryAvgAggregateInputType
    _sum?: SalarySumAggregateInputType
    _min?: SalaryMinAggregateInputType
    _max?: SalaryMaxAggregateInputType
  }

  export type SalaryGroupByOutputType = {
    id: number
    userId: number
    branchId: number
    salaryMonth: Date
    amount: Decimal
    status: $Enums.SalaryStatus
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: SalaryCountAggregateOutputType | null
    _avg: SalaryAvgAggregateOutputType | null
    _sum: SalarySumAggregateOutputType | null
    _min: SalaryMinAggregateOutputType | null
    _max: SalaryMaxAggregateOutputType | null
  }

  type GetSalaryGroupByPayload<T extends SalaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaryGroupByOutputType[P]>
            : GetScalarType<T[P], SalaryGroupByOutputType[P]>
        }
      >
    >


  export type SalarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    branchId?: boolean
    salaryMonth?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salary"]>



  export type SalarySelectScalar = {
    id?: boolean
    userId?: boolean
    branchId?: boolean
    salaryMonth?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type SalaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "branchId" | "salaryMonth" | "amount" | "status" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["salary"]>
  export type SalaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $SalaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Salary"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      branchId: number
      salaryMonth: Date
      amount: Prisma.Decimal
      status: $Enums.SalaryStatus
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["salary"]>
    composites: {}
  }

  type SalaryGetPayload<S extends boolean | null | undefined | SalaryDefaultArgs> = $Result.GetResult<Prisma.$SalaryPayload, S>

  type SalaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SalaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SalaryCountAggregateInputType | true
    }

  export interface SalaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Salary'], meta: { name: 'Salary' } }
    /**
     * Find zero or one Salary that matches the filter.
     * @param {SalaryFindUniqueArgs} args - Arguments to find a Salary
     * @example
     * // Get one Salary
     * const salary = await prisma.salary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaryFindUniqueArgs>(args: SelectSubset<T, SalaryFindUniqueArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Salary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SalaryFindUniqueOrThrowArgs} args - Arguments to find a Salary
     * @example
     * // Get one Salary
     * const salary = await prisma.salary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaryFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Salary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryFindFirstArgs} args - Arguments to find a Salary
     * @example
     * // Get one Salary
     * const salary = await prisma.salary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaryFindFirstArgs>(args?: SelectSubset<T, SalaryFindFirstArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Salary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryFindFirstOrThrowArgs} args - Arguments to find a Salary
     * @example
     * // Get one Salary
     * const salary = await prisma.salary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaryFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Salaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salaries
     * const salaries = await prisma.salary.findMany()
     * 
     * // Get first 10 Salaries
     * const salaries = await prisma.salary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaryWithIdOnly = await prisma.salary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaryFindManyArgs>(args?: SelectSubset<T, SalaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Salary.
     * @param {SalaryCreateArgs} args - Arguments to create a Salary.
     * @example
     * // Create one Salary
     * const Salary = await prisma.salary.create({
     *   data: {
     *     // ... data to create a Salary
     *   }
     * })
     * 
     */
    create<T extends SalaryCreateArgs>(args: SelectSubset<T, SalaryCreateArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Salaries.
     * @param {SalaryCreateManyArgs} args - Arguments to create many Salaries.
     * @example
     * // Create many Salaries
     * const salary = await prisma.salary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaryCreateManyArgs>(args?: SelectSubset<T, SalaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Salary.
     * @param {SalaryDeleteArgs} args - Arguments to delete one Salary.
     * @example
     * // Delete one Salary
     * const Salary = await prisma.salary.delete({
     *   where: {
     *     // ... filter to delete one Salary
     *   }
     * })
     * 
     */
    delete<T extends SalaryDeleteArgs>(args: SelectSubset<T, SalaryDeleteArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Salary.
     * @param {SalaryUpdateArgs} args - Arguments to update one Salary.
     * @example
     * // Update one Salary
     * const salary = await prisma.salary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaryUpdateArgs>(args: SelectSubset<T, SalaryUpdateArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Salaries.
     * @param {SalaryDeleteManyArgs} args - Arguments to filter Salaries to delete.
     * @example
     * // Delete a few Salaries
     * const { count } = await prisma.salary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaryDeleteManyArgs>(args?: SelectSubset<T, SalaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salaries
     * const salary = await prisma.salary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaryUpdateManyArgs>(args: SelectSubset<T, SalaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Salary.
     * @param {SalaryUpsertArgs} args - Arguments to update or create a Salary.
     * @example
     * // Update or create a Salary
     * const salary = await prisma.salary.upsert({
     *   create: {
     *     // ... data to create a Salary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Salary we want to update
     *   }
     * })
     */
    upsert<T extends SalaryUpsertArgs>(args: SelectSubset<T, SalaryUpsertArgs<ExtArgs>>): Prisma__SalaryClient<$Result.GetResult<Prisma.$SalaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Salaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryCountArgs} args - Arguments to filter Salaries to count.
     * @example
     * // Count the number of Salaries
     * const count = await prisma.salary.count({
     *   where: {
     *     // ... the filter for the Salaries we want to count
     *   }
     * })
    **/
    count<T extends SalaryCountArgs>(
      args?: Subset<T, SalaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Salary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaryAggregateArgs>(args: Subset<T, SalaryAggregateArgs>): Prisma.PrismaPromise<GetSalaryAggregateType<T>>

    /**
     * Group by Salary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaryGroupByArgs['orderBy'] }
        : { orderBy?: SalaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Salary model
   */
  readonly fields: SalaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Salary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Salary model
   */ 
  interface SalaryFieldRefs {
    readonly id: FieldRef<"Salary", 'Int'>
    readonly userId: FieldRef<"Salary", 'Int'>
    readonly branchId: FieldRef<"Salary", 'Int'>
    readonly salaryMonth: FieldRef<"Salary", 'DateTime'>
    readonly amount: FieldRef<"Salary", 'Decimal'>
    readonly status: FieldRef<"Salary", 'SalaryStatus'>
    readonly createdAt: FieldRef<"Salary", 'DateTime'>
    readonly updatedAt: FieldRef<"Salary", 'DateTime'>
    readonly deletedAt: FieldRef<"Salary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Salary findUnique
   */
  export type SalaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * Filter, which Salary to fetch.
     */
    where: SalaryWhereUniqueInput
  }

  /**
   * Salary findUniqueOrThrow
   */
  export type SalaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * Filter, which Salary to fetch.
     */
    where: SalaryWhereUniqueInput
  }

  /**
   * Salary findFirst
   */
  export type SalaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * Filter, which Salary to fetch.
     */
    where?: SalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salaries to fetch.
     */
    orderBy?: SalaryOrderByWithRelationInput | SalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Salaries.
     */
    cursor?: SalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Salaries.
     */
    distinct?: SalaryScalarFieldEnum | SalaryScalarFieldEnum[]
  }

  /**
   * Salary findFirstOrThrow
   */
  export type SalaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * Filter, which Salary to fetch.
     */
    where?: SalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salaries to fetch.
     */
    orderBy?: SalaryOrderByWithRelationInput | SalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Salaries.
     */
    cursor?: SalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Salaries.
     */
    distinct?: SalaryScalarFieldEnum | SalaryScalarFieldEnum[]
  }

  /**
   * Salary findMany
   */
  export type SalaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * Filter, which Salaries to fetch.
     */
    where?: SalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salaries to fetch.
     */
    orderBy?: SalaryOrderByWithRelationInput | SalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Salaries.
     */
    cursor?: SalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salaries.
     */
    skip?: number
    distinct?: SalaryScalarFieldEnum | SalaryScalarFieldEnum[]
  }

  /**
   * Salary create
   */
  export type SalaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * The data needed to create a Salary.
     */
    data: XOR<SalaryCreateInput, SalaryUncheckedCreateInput>
  }

  /**
   * Salary createMany
   */
  export type SalaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Salaries.
     */
    data: SalaryCreateManyInput | SalaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Salary update
   */
  export type SalaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * The data needed to update a Salary.
     */
    data: XOR<SalaryUpdateInput, SalaryUncheckedUpdateInput>
    /**
     * Choose, which Salary to update.
     */
    where: SalaryWhereUniqueInput
  }

  /**
   * Salary updateMany
   */
  export type SalaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Salaries.
     */
    data: XOR<SalaryUpdateManyMutationInput, SalaryUncheckedUpdateManyInput>
    /**
     * Filter which Salaries to update
     */
    where?: SalaryWhereInput
    /**
     * Limit how many Salaries to update.
     */
    limit?: number
  }

  /**
   * Salary upsert
   */
  export type SalaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * The filter to search for the Salary to update in case it exists.
     */
    where: SalaryWhereUniqueInput
    /**
     * In case the Salary found by the `where` argument doesn't exist, create a new Salary with this data.
     */
    create: XOR<SalaryCreateInput, SalaryUncheckedCreateInput>
    /**
     * In case the Salary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaryUpdateInput, SalaryUncheckedUpdateInput>
  }

  /**
   * Salary delete
   */
  export type SalaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
    /**
     * Filter which Salary to delete.
     */
    where: SalaryWhereUniqueInput
  }

  /**
   * Salary deleteMany
   */
  export type SalaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Salaries to delete
     */
    where?: SalaryWhereInput
    /**
     * Limit how many Salaries to delete.
     */
    limit?: number
  }

  /**
   * Salary without action
   */
  export type SalaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Salary
     */
    select?: SalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Salary
     */
    omit?: SalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryInclude<ExtArgs> | null
  }


  /**
   * Model BranchInventory
   */

  export type AggregateBranchInventory = {
    _count: BranchInventoryCountAggregateOutputType | null
    _avg: BranchInventoryAvgAggregateOutputType | null
    _sum: BranchInventorySumAggregateOutputType | null
    _min: BranchInventoryMinAggregateOutputType | null
    _max: BranchInventoryMaxAggregateOutputType | null
  }

  export type BranchInventoryAvgAggregateOutputType = {
    id: number | null
    branchId: number | null
    currentQuantity: number | null
    reorderLevel: number | null
    costPerUnit: Decimal | null
  }

  export type BranchInventorySumAggregateOutputType = {
    id: number | null
    branchId: number | null
    currentQuantity: number | null
    reorderLevel: number | null
    costPerUnit: Decimal | null
  }

  export type BranchInventoryMinAggregateOutputType = {
    id: number | null
    branchId: number | null
    itemName: string | null
    currentQuantity: number | null
    reorderLevel: number | null
    costPerUnit: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type BranchInventoryMaxAggregateOutputType = {
    id: number | null
    branchId: number | null
    itemName: string | null
    currentQuantity: number | null
    reorderLevel: number | null
    costPerUnit: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type BranchInventoryCountAggregateOutputType = {
    id: number
    branchId: number
    itemName: number
    currentQuantity: number
    reorderLevel: number
    costPerUnit: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type BranchInventoryAvgAggregateInputType = {
    id?: true
    branchId?: true
    currentQuantity?: true
    reorderLevel?: true
    costPerUnit?: true
  }

  export type BranchInventorySumAggregateInputType = {
    id?: true
    branchId?: true
    currentQuantity?: true
    reorderLevel?: true
    costPerUnit?: true
  }

  export type BranchInventoryMinAggregateInputType = {
    id?: true
    branchId?: true
    itemName?: true
    currentQuantity?: true
    reorderLevel?: true
    costPerUnit?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type BranchInventoryMaxAggregateInputType = {
    id?: true
    branchId?: true
    itemName?: true
    currentQuantity?: true
    reorderLevel?: true
    costPerUnit?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type BranchInventoryCountAggregateInputType = {
    id?: true
    branchId?: true
    itemName?: true
    currentQuantity?: true
    reorderLevel?: true
    costPerUnit?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type BranchInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BranchInventory to aggregate.
     */
    where?: BranchInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BranchInventories to fetch.
     */
    orderBy?: BranchInventoryOrderByWithRelationInput | BranchInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BranchInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BranchInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BranchInventories
    **/
    _count?: true | BranchInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BranchInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BranchInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchInventoryMaxAggregateInputType
  }

  export type GetBranchInventoryAggregateType<T extends BranchInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBranchInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranchInventory[P]>
      : GetScalarType<T[P], AggregateBranchInventory[P]>
  }




  export type BranchInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchInventoryWhereInput
    orderBy?: BranchInventoryOrderByWithAggregationInput | BranchInventoryOrderByWithAggregationInput[]
    by: BranchInventoryScalarFieldEnum[] | BranchInventoryScalarFieldEnum
    having?: BranchInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchInventoryCountAggregateInputType | true
    _avg?: BranchInventoryAvgAggregateInputType
    _sum?: BranchInventorySumAggregateInputType
    _min?: BranchInventoryMinAggregateInputType
    _max?: BranchInventoryMaxAggregateInputType
  }

  export type BranchInventoryGroupByOutputType = {
    id: number
    branchId: number
    itemName: string
    currentQuantity: number
    reorderLevel: number | null
    costPerUnit: Decimal | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: BranchInventoryCountAggregateOutputType | null
    _avg: BranchInventoryAvgAggregateOutputType | null
    _sum: BranchInventorySumAggregateOutputType | null
    _min: BranchInventoryMinAggregateOutputType | null
    _max: BranchInventoryMaxAggregateOutputType | null
  }

  type GetBranchInventoryGroupByPayload<T extends BranchInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], BranchInventoryGroupByOutputType[P]>
        }
      >
    >


  export type BranchInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    itemName?: boolean
    currentQuantity?: boolean
    reorderLevel?: boolean
    costPerUnit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branchInventory"]>



  export type BranchInventorySelectScalar = {
    id?: boolean
    branchId?: boolean
    itemName?: boolean
    currentQuantity?: boolean
    reorderLevel?: boolean
    costPerUnit?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type BranchInventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "branchId" | "itemName" | "currentQuantity" | "reorderLevel" | "costPerUnit" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["branchInventory"]>
  export type BranchInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
  }

  export type $BranchInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BranchInventory"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      branchId: number
      itemName: string
      currentQuantity: number
      reorderLevel: number | null
      costPerUnit: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["branchInventory"]>
    composites: {}
  }

  type BranchInventoryGetPayload<S extends boolean | null | undefined | BranchInventoryDefaultArgs> = $Result.GetResult<Prisma.$BranchInventoryPayload, S>

  type BranchInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BranchInventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BranchInventoryCountAggregateInputType | true
    }

  export interface BranchInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BranchInventory'], meta: { name: 'BranchInventory' } }
    /**
     * Find zero or one BranchInventory that matches the filter.
     * @param {BranchInventoryFindUniqueArgs} args - Arguments to find a BranchInventory
     * @example
     * // Get one BranchInventory
     * const branchInventory = await prisma.branchInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchInventoryFindUniqueArgs>(args: SelectSubset<T, BranchInventoryFindUniqueArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BranchInventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BranchInventoryFindUniqueOrThrowArgs} args - Arguments to find a BranchInventory
     * @example
     * // Get one BranchInventory
     * const branchInventory = await prisma.branchInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchInventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BranchInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryFindFirstArgs} args - Arguments to find a BranchInventory
     * @example
     * // Get one BranchInventory
     * const branchInventory = await prisma.branchInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchInventoryFindFirstArgs>(args?: SelectSubset<T, BranchInventoryFindFirstArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BranchInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryFindFirstOrThrowArgs} args - Arguments to find a BranchInventory
     * @example
     * // Get one BranchInventory
     * const branchInventory = await prisma.branchInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchInventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BranchInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BranchInventories
     * const branchInventories = await prisma.branchInventory.findMany()
     * 
     * // Get first 10 BranchInventories
     * const branchInventories = await prisma.branchInventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchInventoryWithIdOnly = await prisma.branchInventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BranchInventoryFindManyArgs>(args?: SelectSubset<T, BranchInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BranchInventory.
     * @param {BranchInventoryCreateArgs} args - Arguments to create a BranchInventory.
     * @example
     * // Create one BranchInventory
     * const BranchInventory = await prisma.branchInventory.create({
     *   data: {
     *     // ... data to create a BranchInventory
     *   }
     * })
     * 
     */
    create<T extends BranchInventoryCreateArgs>(args: SelectSubset<T, BranchInventoryCreateArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BranchInventories.
     * @param {BranchInventoryCreateManyArgs} args - Arguments to create many BranchInventories.
     * @example
     * // Create many BranchInventories
     * const branchInventory = await prisma.branchInventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchInventoryCreateManyArgs>(args?: SelectSubset<T, BranchInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BranchInventory.
     * @param {BranchInventoryDeleteArgs} args - Arguments to delete one BranchInventory.
     * @example
     * // Delete one BranchInventory
     * const BranchInventory = await prisma.branchInventory.delete({
     *   where: {
     *     // ... filter to delete one BranchInventory
     *   }
     * })
     * 
     */
    delete<T extends BranchInventoryDeleteArgs>(args: SelectSubset<T, BranchInventoryDeleteArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BranchInventory.
     * @param {BranchInventoryUpdateArgs} args - Arguments to update one BranchInventory.
     * @example
     * // Update one BranchInventory
     * const branchInventory = await prisma.branchInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchInventoryUpdateArgs>(args: SelectSubset<T, BranchInventoryUpdateArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BranchInventories.
     * @param {BranchInventoryDeleteManyArgs} args - Arguments to filter BranchInventories to delete.
     * @example
     * // Delete a few BranchInventories
     * const { count } = await prisma.branchInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchInventoryDeleteManyArgs>(args?: SelectSubset<T, BranchInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BranchInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BranchInventories
     * const branchInventory = await prisma.branchInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchInventoryUpdateManyArgs>(args: SelectSubset<T, BranchInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BranchInventory.
     * @param {BranchInventoryUpsertArgs} args - Arguments to update or create a BranchInventory.
     * @example
     * // Update or create a BranchInventory
     * const branchInventory = await prisma.branchInventory.upsert({
     *   create: {
     *     // ... data to create a BranchInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BranchInventory we want to update
     *   }
     * })
     */
    upsert<T extends BranchInventoryUpsertArgs>(args: SelectSubset<T, BranchInventoryUpsertArgs<ExtArgs>>): Prisma__BranchInventoryClient<$Result.GetResult<Prisma.$BranchInventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BranchInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryCountArgs} args - Arguments to filter BranchInventories to count.
     * @example
     * // Count the number of BranchInventories
     * const count = await prisma.branchInventory.count({
     *   where: {
     *     // ... the filter for the BranchInventories we want to count
     *   }
     * })
    **/
    count<T extends BranchInventoryCountArgs>(
      args?: Subset<T, BranchInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BranchInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchInventoryAggregateArgs>(args: Subset<T, BranchInventoryAggregateArgs>): Prisma.PrismaPromise<GetBranchInventoryAggregateType<T>>

    /**
     * Group by BranchInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchInventoryGroupByArgs['orderBy'] }
        : { orderBy?: BranchInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BranchInventory model
   */
  readonly fields: BranchInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BranchInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BranchInventory model
   */ 
  interface BranchInventoryFieldRefs {
    readonly id: FieldRef<"BranchInventory", 'Int'>
    readonly branchId: FieldRef<"BranchInventory", 'Int'>
    readonly itemName: FieldRef<"BranchInventory", 'String'>
    readonly currentQuantity: FieldRef<"BranchInventory", 'Int'>
    readonly reorderLevel: FieldRef<"BranchInventory", 'Int'>
    readonly costPerUnit: FieldRef<"BranchInventory", 'Decimal'>
    readonly createdAt: FieldRef<"BranchInventory", 'DateTime'>
    readonly updatedAt: FieldRef<"BranchInventory", 'DateTime'>
    readonly deletedAt: FieldRef<"BranchInventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BranchInventory findUnique
   */
  export type BranchInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * Filter, which BranchInventory to fetch.
     */
    where: BranchInventoryWhereUniqueInput
  }

  /**
   * BranchInventory findUniqueOrThrow
   */
  export type BranchInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * Filter, which BranchInventory to fetch.
     */
    where: BranchInventoryWhereUniqueInput
  }

  /**
   * BranchInventory findFirst
   */
  export type BranchInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * Filter, which BranchInventory to fetch.
     */
    where?: BranchInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BranchInventories to fetch.
     */
    orderBy?: BranchInventoryOrderByWithRelationInput | BranchInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BranchInventories.
     */
    cursor?: BranchInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BranchInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BranchInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BranchInventories.
     */
    distinct?: BranchInventoryScalarFieldEnum | BranchInventoryScalarFieldEnum[]
  }

  /**
   * BranchInventory findFirstOrThrow
   */
  export type BranchInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * Filter, which BranchInventory to fetch.
     */
    where?: BranchInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BranchInventories to fetch.
     */
    orderBy?: BranchInventoryOrderByWithRelationInput | BranchInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BranchInventories.
     */
    cursor?: BranchInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BranchInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BranchInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BranchInventories.
     */
    distinct?: BranchInventoryScalarFieldEnum | BranchInventoryScalarFieldEnum[]
  }

  /**
   * BranchInventory findMany
   */
  export type BranchInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * Filter, which BranchInventories to fetch.
     */
    where?: BranchInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BranchInventories to fetch.
     */
    orderBy?: BranchInventoryOrderByWithRelationInput | BranchInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BranchInventories.
     */
    cursor?: BranchInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BranchInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BranchInventories.
     */
    skip?: number
    distinct?: BranchInventoryScalarFieldEnum | BranchInventoryScalarFieldEnum[]
  }

  /**
   * BranchInventory create
   */
  export type BranchInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BranchInventory.
     */
    data: XOR<BranchInventoryCreateInput, BranchInventoryUncheckedCreateInput>
  }

  /**
   * BranchInventory createMany
   */
  export type BranchInventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BranchInventories.
     */
    data: BranchInventoryCreateManyInput | BranchInventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BranchInventory update
   */
  export type BranchInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BranchInventory.
     */
    data: XOR<BranchInventoryUpdateInput, BranchInventoryUncheckedUpdateInput>
    /**
     * Choose, which BranchInventory to update.
     */
    where: BranchInventoryWhereUniqueInput
  }

  /**
   * BranchInventory updateMany
   */
  export type BranchInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BranchInventories.
     */
    data: XOR<BranchInventoryUpdateManyMutationInput, BranchInventoryUncheckedUpdateManyInput>
    /**
     * Filter which BranchInventories to update
     */
    where?: BranchInventoryWhereInput
    /**
     * Limit how many BranchInventories to update.
     */
    limit?: number
  }

  /**
   * BranchInventory upsert
   */
  export type BranchInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BranchInventory to update in case it exists.
     */
    where: BranchInventoryWhereUniqueInput
    /**
     * In case the BranchInventory found by the `where` argument doesn't exist, create a new BranchInventory with this data.
     */
    create: XOR<BranchInventoryCreateInput, BranchInventoryUncheckedCreateInput>
    /**
     * In case the BranchInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchInventoryUpdateInput, BranchInventoryUncheckedUpdateInput>
  }

  /**
   * BranchInventory delete
   */
  export type BranchInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
    /**
     * Filter which BranchInventory to delete.
     */
    where: BranchInventoryWhereUniqueInput
  }

  /**
   * BranchInventory deleteMany
   */
  export type BranchInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BranchInventories to delete
     */
    where?: BranchInventoryWhereInput
    /**
     * Limit how many BranchInventories to delete.
     */
    limit?: number
  }

  /**
   * BranchInventory without action
   */
  export type BranchInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchInventory
     */
    select?: BranchInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BranchInventory
     */
    omit?: BranchInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInventoryInclude<ExtArgs> | null
  }


  /**
   * Model InventoryOrder
   */

  export type AggregateInventoryOrder = {
    _count: InventoryOrderCountAggregateOutputType | null
    _avg: InventoryOrderAvgAggregateOutputType | null
    _sum: InventoryOrderSumAggregateOutputType | null
    _min: InventoryOrderMinAggregateOutputType | null
    _max: InventoryOrderMaxAggregateOutputType | null
  }

  export type InventoryOrderAvgAggregateOutputType = {
    id: number | null
    branchId: number | null
    quantityOrdered: number | null
    costPerUnit: Decimal | null
    totalCost: Decimal | null
    receivedById: number | null
  }

  export type InventoryOrderSumAggregateOutputType = {
    id: number | null
    branchId: number | null
    quantityOrdered: number | null
    costPerUnit: Decimal | null
    totalCost: Decimal | null
    receivedById: number | null
  }

  export type InventoryOrderMinAggregateOutputType = {
    id: number | null
    branchId: number | null
    itemName: string | null
    quantityOrdered: number | null
    costPerUnit: Decimal | null
    totalCost: Decimal | null
    supplier: string | null
    receiptFilePath: string | null
    orderedAt: Date | null
    receivedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type InventoryOrderMaxAggregateOutputType = {
    id: number | null
    branchId: number | null
    itemName: string | null
    quantityOrdered: number | null
    costPerUnit: Decimal | null
    totalCost: Decimal | null
    supplier: string | null
    receiptFilePath: string | null
    orderedAt: Date | null
    receivedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type InventoryOrderCountAggregateOutputType = {
    id: number
    branchId: number
    itemName: number
    quantityOrdered: number
    costPerUnit: number
    totalCost: number
    supplier: number
    receiptFilePath: number
    orderedAt: number
    receivedById: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type InventoryOrderAvgAggregateInputType = {
    id?: true
    branchId?: true
    quantityOrdered?: true
    costPerUnit?: true
    totalCost?: true
    receivedById?: true
  }

  export type InventoryOrderSumAggregateInputType = {
    id?: true
    branchId?: true
    quantityOrdered?: true
    costPerUnit?: true
    totalCost?: true
    receivedById?: true
  }

  export type InventoryOrderMinAggregateInputType = {
    id?: true
    branchId?: true
    itemName?: true
    quantityOrdered?: true
    costPerUnit?: true
    totalCost?: true
    supplier?: true
    receiptFilePath?: true
    orderedAt?: true
    receivedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type InventoryOrderMaxAggregateInputType = {
    id?: true
    branchId?: true
    itemName?: true
    quantityOrdered?: true
    costPerUnit?: true
    totalCost?: true
    supplier?: true
    receiptFilePath?: true
    orderedAt?: true
    receivedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type InventoryOrderCountAggregateInputType = {
    id?: true
    branchId?: true
    itemName?: true
    quantityOrdered?: true
    costPerUnit?: true
    totalCost?: true
    supplier?: true
    receiptFilePath?: true
    orderedAt?: true
    receivedById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type InventoryOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryOrder to aggregate.
     */
    where?: InventoryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryOrders to fetch.
     */
    orderBy?: InventoryOrderOrderByWithRelationInput | InventoryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryOrders
    **/
    _count?: true | InventoryOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryOrderMaxAggregateInputType
  }

  export type GetInventoryOrderAggregateType<T extends InventoryOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryOrder[P]>
      : GetScalarType<T[P], AggregateInventoryOrder[P]>
  }




  export type InventoryOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryOrderWhereInput
    orderBy?: InventoryOrderOrderByWithAggregationInput | InventoryOrderOrderByWithAggregationInput[]
    by: InventoryOrderScalarFieldEnum[] | InventoryOrderScalarFieldEnum
    having?: InventoryOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryOrderCountAggregateInputType | true
    _avg?: InventoryOrderAvgAggregateInputType
    _sum?: InventoryOrderSumAggregateInputType
    _min?: InventoryOrderMinAggregateInputType
    _max?: InventoryOrderMaxAggregateInputType
  }

  export type InventoryOrderGroupByOutputType = {
    id: number
    branchId: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal
    totalCost: Decimal
    supplier: string | null
    receiptFilePath: string | null
    orderedAt: Date
    receivedById: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: InventoryOrderCountAggregateOutputType | null
    _avg: InventoryOrderAvgAggregateOutputType | null
    _sum: InventoryOrderSumAggregateOutputType | null
    _min: InventoryOrderMinAggregateOutputType | null
    _max: InventoryOrderMaxAggregateOutputType | null
  }

  type GetInventoryOrderGroupByPayload<T extends InventoryOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryOrderGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryOrderGroupByOutputType[P]>
        }
      >
    >


  export type InventoryOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    itemName?: boolean
    quantityOrdered?: boolean
    costPerUnit?: boolean
    totalCost?: boolean
    supplier?: boolean
    receiptFilePath?: boolean
    orderedAt?: boolean
    receivedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryOrder"]>



  export type InventoryOrderSelectScalar = {
    id?: boolean
    branchId?: boolean
    itemName?: boolean
    quantityOrdered?: boolean
    costPerUnit?: boolean
    totalCost?: boolean
    supplier?: boolean
    receiptFilePath?: boolean
    orderedAt?: boolean
    receivedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type InventoryOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "branchId" | "itemName" | "quantityOrdered" | "costPerUnit" | "totalCost" | "supplier" | "receiptFilePath" | "orderedAt" | "receivedById" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["inventoryOrder"]>
  export type InventoryOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    receivedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InventoryOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryOrder"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs>
      receivedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      branchId: number
      itemName: string
      quantityOrdered: number
      costPerUnit: Prisma.Decimal
      totalCost: Prisma.Decimal
      supplier: string | null
      receiptFilePath: string | null
      orderedAt: Date
      receivedById: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["inventoryOrder"]>
    composites: {}
  }

  type InventoryOrderGetPayload<S extends boolean | null | undefined | InventoryOrderDefaultArgs> = $Result.GetResult<Prisma.$InventoryOrderPayload, S>

  type InventoryOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryOrderCountAggregateInputType | true
    }

  export interface InventoryOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryOrder'], meta: { name: 'InventoryOrder' } }
    /**
     * Find zero or one InventoryOrder that matches the filter.
     * @param {InventoryOrderFindUniqueArgs} args - Arguments to find a InventoryOrder
     * @example
     * // Get one InventoryOrder
     * const inventoryOrder = await prisma.inventoryOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryOrderFindUniqueArgs>(args: SelectSubset<T, InventoryOrderFindUniqueArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryOrderFindUniqueOrThrowArgs} args - Arguments to find a InventoryOrder
     * @example
     * // Get one InventoryOrder
     * const inventoryOrder = await prisma.inventoryOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderFindFirstArgs} args - Arguments to find a InventoryOrder
     * @example
     * // Get one InventoryOrder
     * const inventoryOrder = await prisma.inventoryOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryOrderFindFirstArgs>(args?: SelectSubset<T, InventoryOrderFindFirstArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderFindFirstOrThrowArgs} args - Arguments to find a InventoryOrder
     * @example
     * // Get one InventoryOrder
     * const inventoryOrder = await prisma.inventoryOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryOrders
     * const inventoryOrders = await prisma.inventoryOrder.findMany()
     * 
     * // Get first 10 InventoryOrders
     * const inventoryOrders = await prisma.inventoryOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryOrderWithIdOnly = await prisma.inventoryOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryOrderFindManyArgs>(args?: SelectSubset<T, InventoryOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryOrder.
     * @param {InventoryOrderCreateArgs} args - Arguments to create a InventoryOrder.
     * @example
     * // Create one InventoryOrder
     * const InventoryOrder = await prisma.inventoryOrder.create({
     *   data: {
     *     // ... data to create a InventoryOrder
     *   }
     * })
     * 
     */
    create<T extends InventoryOrderCreateArgs>(args: SelectSubset<T, InventoryOrderCreateArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryOrders.
     * @param {InventoryOrderCreateManyArgs} args - Arguments to create many InventoryOrders.
     * @example
     * // Create many InventoryOrders
     * const inventoryOrder = await prisma.inventoryOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryOrderCreateManyArgs>(args?: SelectSubset<T, InventoryOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryOrder.
     * @param {InventoryOrderDeleteArgs} args - Arguments to delete one InventoryOrder.
     * @example
     * // Delete one InventoryOrder
     * const InventoryOrder = await prisma.inventoryOrder.delete({
     *   where: {
     *     // ... filter to delete one InventoryOrder
     *   }
     * })
     * 
     */
    delete<T extends InventoryOrderDeleteArgs>(args: SelectSubset<T, InventoryOrderDeleteArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryOrder.
     * @param {InventoryOrderUpdateArgs} args - Arguments to update one InventoryOrder.
     * @example
     * // Update one InventoryOrder
     * const inventoryOrder = await prisma.inventoryOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryOrderUpdateArgs>(args: SelectSubset<T, InventoryOrderUpdateArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryOrders.
     * @param {InventoryOrderDeleteManyArgs} args - Arguments to filter InventoryOrders to delete.
     * @example
     * // Delete a few InventoryOrders
     * const { count } = await prisma.inventoryOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryOrderDeleteManyArgs>(args?: SelectSubset<T, InventoryOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryOrders
     * const inventoryOrder = await prisma.inventoryOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryOrderUpdateManyArgs>(args: SelectSubset<T, InventoryOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryOrder.
     * @param {InventoryOrderUpsertArgs} args - Arguments to update or create a InventoryOrder.
     * @example
     * // Update or create a InventoryOrder
     * const inventoryOrder = await prisma.inventoryOrder.upsert({
     *   create: {
     *     // ... data to create a InventoryOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryOrder we want to update
     *   }
     * })
     */
    upsert<T extends InventoryOrderUpsertArgs>(args: SelectSubset<T, InventoryOrderUpsertArgs<ExtArgs>>): Prisma__InventoryOrderClient<$Result.GetResult<Prisma.$InventoryOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderCountArgs} args - Arguments to filter InventoryOrders to count.
     * @example
     * // Count the number of InventoryOrders
     * const count = await prisma.inventoryOrder.count({
     *   where: {
     *     // ... the filter for the InventoryOrders we want to count
     *   }
     * })
    **/
    count<T extends InventoryOrderCountArgs>(
      args?: Subset<T, InventoryOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryOrderAggregateArgs>(args: Subset<T, InventoryOrderAggregateArgs>): Prisma.PrismaPromise<GetInventoryOrderAggregateType<T>>

    /**
     * Group by InventoryOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryOrderGroupByArgs['orderBy'] }
        : { orderBy?: InventoryOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryOrder model
   */
  readonly fields: InventoryOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receivedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryOrder model
   */ 
  interface InventoryOrderFieldRefs {
    readonly id: FieldRef<"InventoryOrder", 'Int'>
    readonly branchId: FieldRef<"InventoryOrder", 'Int'>
    readonly itemName: FieldRef<"InventoryOrder", 'String'>
    readonly quantityOrdered: FieldRef<"InventoryOrder", 'Int'>
    readonly costPerUnit: FieldRef<"InventoryOrder", 'Decimal'>
    readonly totalCost: FieldRef<"InventoryOrder", 'Decimal'>
    readonly supplier: FieldRef<"InventoryOrder", 'String'>
    readonly receiptFilePath: FieldRef<"InventoryOrder", 'String'>
    readonly orderedAt: FieldRef<"InventoryOrder", 'DateTime'>
    readonly receivedById: FieldRef<"InventoryOrder", 'Int'>
    readonly createdAt: FieldRef<"InventoryOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryOrder", 'DateTime'>
    readonly deletedAt: FieldRef<"InventoryOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryOrder findUnique
   */
  export type InventoryOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * Filter, which InventoryOrder to fetch.
     */
    where: InventoryOrderWhereUniqueInput
  }

  /**
   * InventoryOrder findUniqueOrThrow
   */
  export type InventoryOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * Filter, which InventoryOrder to fetch.
     */
    where: InventoryOrderWhereUniqueInput
  }

  /**
   * InventoryOrder findFirst
   */
  export type InventoryOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * Filter, which InventoryOrder to fetch.
     */
    where?: InventoryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryOrders to fetch.
     */
    orderBy?: InventoryOrderOrderByWithRelationInput | InventoryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryOrders.
     */
    cursor?: InventoryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryOrders.
     */
    distinct?: InventoryOrderScalarFieldEnum | InventoryOrderScalarFieldEnum[]
  }

  /**
   * InventoryOrder findFirstOrThrow
   */
  export type InventoryOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * Filter, which InventoryOrder to fetch.
     */
    where?: InventoryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryOrders to fetch.
     */
    orderBy?: InventoryOrderOrderByWithRelationInput | InventoryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryOrders.
     */
    cursor?: InventoryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryOrders.
     */
    distinct?: InventoryOrderScalarFieldEnum | InventoryOrderScalarFieldEnum[]
  }

  /**
   * InventoryOrder findMany
   */
  export type InventoryOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * Filter, which InventoryOrders to fetch.
     */
    where?: InventoryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryOrders to fetch.
     */
    orderBy?: InventoryOrderOrderByWithRelationInput | InventoryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryOrders.
     */
    cursor?: InventoryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryOrders.
     */
    skip?: number
    distinct?: InventoryOrderScalarFieldEnum | InventoryOrderScalarFieldEnum[]
  }

  /**
   * InventoryOrder create
   */
  export type InventoryOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryOrder.
     */
    data: XOR<InventoryOrderCreateInput, InventoryOrderUncheckedCreateInput>
  }

  /**
   * InventoryOrder createMany
   */
  export type InventoryOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryOrders.
     */
    data: InventoryOrderCreateManyInput | InventoryOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryOrder update
   */
  export type InventoryOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryOrder.
     */
    data: XOR<InventoryOrderUpdateInput, InventoryOrderUncheckedUpdateInput>
    /**
     * Choose, which InventoryOrder to update.
     */
    where: InventoryOrderWhereUniqueInput
  }

  /**
   * InventoryOrder updateMany
   */
  export type InventoryOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryOrders.
     */
    data: XOR<InventoryOrderUpdateManyMutationInput, InventoryOrderUncheckedUpdateManyInput>
    /**
     * Filter which InventoryOrders to update
     */
    where?: InventoryOrderWhereInput
    /**
     * Limit how many InventoryOrders to update.
     */
    limit?: number
  }

  /**
   * InventoryOrder upsert
   */
  export type InventoryOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryOrder to update in case it exists.
     */
    where: InventoryOrderWhereUniqueInput
    /**
     * In case the InventoryOrder found by the `where` argument doesn't exist, create a new InventoryOrder with this data.
     */
    create: XOR<InventoryOrderCreateInput, InventoryOrderUncheckedCreateInput>
    /**
     * In case the InventoryOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryOrderUpdateInput, InventoryOrderUncheckedUpdateInput>
  }

  /**
   * InventoryOrder delete
   */
  export type InventoryOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
    /**
     * Filter which InventoryOrder to delete.
     */
    where: InventoryOrderWhereUniqueInput
  }

  /**
   * InventoryOrder deleteMany
   */
  export type InventoryOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryOrders to delete
     */
    where?: InventoryOrderWhereInput
    /**
     * Limit how many InventoryOrders to delete.
     */
    limit?: number
  }

  /**
   * InventoryOrder without action
   */
  export type InventoryOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryOrder
     */
    select?: InventoryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryOrder
     */
    omit?: InventoryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryOrderInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    organizationId: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    organizationId: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    organizationId: number | null
    activity: string | null
    createdAt: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    organizationId: number | null
    activity: string | null
    createdAt: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    userId: number
    branchId: number
    organizationId: number
    activity: number
    createdAt: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    organizationId?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    organizationId?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    organizationId?: true
    activity?: true
    createdAt?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    organizationId?: true
    activity?: true
    createdAt?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    organizationId?: true
    activity?: true
    createdAt?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    userId: number | null
    branchId: number
    organizationId: number
    activity: string
    createdAt: Date
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    branchId?: boolean
    organizationId?: boolean
    activity?: boolean
    createdAt?: boolean
    user?: boolean | Log$userArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>



  export type LogSelectScalar = {
    id?: boolean
    userId?: boolean
    branchId?: boolean
    organizationId?: boolean
    activity?: boolean
    createdAt?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "branchId" | "organizationId" | "activity" | "createdAt", ExtArgs["result"]["log"]>
  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Log$userArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      branch: Prisma.$BranchPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      branchId: number
      organizationId: number
      activity: string
      createdAt: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Log$userArgs<ExtArgs> = {}>(args?: Subset<T, Log$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */ 
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly userId: FieldRef<"Log", 'Int'>
    readonly branchId: FieldRef<"Log", 'Int'>
    readonly organizationId: FieldRef<"Log", 'Int'>
    readonly activity: FieldRef<"Log", 'String'>
    readonly createdAt: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to delete.
     */
    limit?: number
  }

  /**
   * Log.user
   */
  export type Log$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    expiresAt: 'expiresAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    contact: 'contact',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const BranchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    organizationId: 'organizationId',
    address: 'address',
    contact: 'contact',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactNo: 'contactNo',
    identityNo: 'identityNo',
    avatar: 'avatar',
    password: 'password',
    email: 'email',
    role: 'role',
    branchId: 'branchId',
    organizationId: 'organizationId',
    identityImage: 'identityImage',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactNumber: 'contactNumber',
    idCardNo: 'idCardNo',
    email: 'email',
    dateOfBirth: 'dateOfBirth',
    address: 'address',
    medicalHistory: 'medicalHistory',
    allergies: 'allergies',
    branchId: 'branchId',
    patientType: 'patientType',
    createdById: 'createdById',
    updatedById: 'updatedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    receptionistId: 'receptionistId',
    appointmentDate: 'appointmentDate',
    appointmentTime: 'appointmentTime',
    type: 'type',
    status: 'status',
    isFinalAppointment: 'isFinalAppointment',
    treatmentPlan: 'treatmentPlan',
    createdById: 'createdById',
    updatedById: 'updatedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const TreatmentScalarFieldEnum: {
    id: 'id',
    treatmentName: 'treatmentName',
    description: 'description',
    baseCost: 'baseCost',
    duration: 'duration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type TreatmentScalarFieldEnum = (typeof TreatmentScalarFieldEnum)[keyof typeof TreatmentScalarFieldEnum]


  export const PatientTreatmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    treatmentId: 'treatmentId',
    appointmentId: 'appointmentId',
    sessionNumber: 'sessionNumber',
    treatmentDate: 'treatmentDate',
    actualCost: 'actualCost',
    doctorId: 'doctorId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PatientTreatmentScalarFieldEnum = (typeof PatientTreatmentScalarFieldEnum)[keyof typeof PatientTreatmentScalarFieldEnum]


  export const PatientBillScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    treatmentId: 'treatmentId',
    totalAmount: 'totalAmount',
    paidAmount: 'paidAmount',
    remainingAmount: 'remainingAmount',
    status: 'status'
  };

  export type PatientBillScalarFieldEnum = (typeof PatientBillScalarFieldEnum)[keyof typeof PatientBillScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    billId: 'billId',
    amount: 'amount',
    paymentDate: 'paymentDate',
    paymentMethod: 'paymentMethod',
    status: 'status',
    receivedById: 'receivedById',
    patientId: 'patientId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const ExpenseScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    organizationId: 'organizationId',
    expenseName: 'expenseName',
    expenseType: 'expenseType',
    amount: 'amount',
    date: 'date',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ExpenseScalarFieldEnum = (typeof ExpenseScalarFieldEnum)[keyof typeof ExpenseScalarFieldEnum]


  export const SalaryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    branchId: 'branchId',
    salaryMonth: 'salaryMonth',
    amount: 'amount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type SalaryScalarFieldEnum = (typeof SalaryScalarFieldEnum)[keyof typeof SalaryScalarFieldEnum]


  export const BranchInventoryScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    itemName: 'itemName',
    currentQuantity: 'currentQuantity',
    reorderLevel: 'reorderLevel',
    costPerUnit: 'costPerUnit',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type BranchInventoryScalarFieldEnum = (typeof BranchInventoryScalarFieldEnum)[keyof typeof BranchInventoryScalarFieldEnum]


  export const InventoryOrderScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    itemName: 'itemName',
    quantityOrdered: 'quantityOrdered',
    costPerUnit: 'costPerUnit',
    totalCost: 'totalCost',
    supplier: 'supplier',
    receiptFilePath: 'receiptFilePath',
    orderedAt: 'orderedAt',
    receivedById: 'receivedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type InventoryOrderScalarFieldEnum = (typeof InventoryOrderScalarFieldEnum)[keyof typeof InventoryOrderScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    branchId: 'branchId',
    organizationId: 'organizationId',
    activity: 'activity',
    createdAt: 'createdAt'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TokenOrderByRelevanceFieldEnum: {
    id: 'id',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken'
  };

  export type TokenOrderByRelevanceFieldEnum = (typeof TokenOrderByRelevanceFieldEnum)[keyof typeof TokenOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const OrganizationOrderByRelevanceFieldEnum: {
    name: 'name',
    address: 'address',
    contact: 'contact'
  };

  export type OrganizationOrderByRelevanceFieldEnum = (typeof OrganizationOrderByRelevanceFieldEnum)[keyof typeof OrganizationOrderByRelevanceFieldEnum]


  export const BranchOrderByRelevanceFieldEnum: {
    name: 'name',
    address: 'address',
    contact: 'contact'
  };

  export type BranchOrderByRelevanceFieldEnum = (typeof BranchOrderByRelevanceFieldEnum)[keyof typeof BranchOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    name: 'name',
    contactNo: 'contactNo',
    identityNo: 'identityNo',
    avatar: 'avatar',
    password: 'password',
    email: 'email',
    identityImage: 'identityImage'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const PatientOrderByRelevanceFieldEnum: {
    name: 'name',
    contactNumber: 'contactNumber',
    idCardNo: 'idCardNo',
    email: 'email',
    address: 'address',
    medicalHistory: 'medicalHistory',
    allergies: 'allergies'
  };

  export type PatientOrderByRelevanceFieldEnum = (typeof PatientOrderByRelevanceFieldEnum)[keyof typeof PatientOrderByRelevanceFieldEnum]


  export const AppointmentOrderByRelevanceFieldEnum: {
    treatmentPlan: 'treatmentPlan'
  };

  export type AppointmentOrderByRelevanceFieldEnum = (typeof AppointmentOrderByRelevanceFieldEnum)[keyof typeof AppointmentOrderByRelevanceFieldEnum]


  export const TreatmentOrderByRelevanceFieldEnum: {
    treatmentName: 'treatmentName',
    description: 'description'
  };

  export type TreatmentOrderByRelevanceFieldEnum = (typeof TreatmentOrderByRelevanceFieldEnum)[keyof typeof TreatmentOrderByRelevanceFieldEnum]


  export const ExpenseOrderByRelevanceFieldEnum: {
    expenseName: 'expenseName',
    description: 'description'
  };

  export type ExpenseOrderByRelevanceFieldEnum = (typeof ExpenseOrderByRelevanceFieldEnum)[keyof typeof ExpenseOrderByRelevanceFieldEnum]


  export const BranchInventoryOrderByRelevanceFieldEnum: {
    itemName: 'itemName'
  };

  export type BranchInventoryOrderByRelevanceFieldEnum = (typeof BranchInventoryOrderByRelevanceFieldEnum)[keyof typeof BranchInventoryOrderByRelevanceFieldEnum]


  export const InventoryOrderOrderByRelevanceFieldEnum: {
    itemName: 'itemName',
    supplier: 'supplier',
    receiptFilePath: 'receiptFilePath'
  };

  export type InventoryOrderOrderByRelevanceFieldEnum = (typeof InventoryOrderOrderByRelevanceFieldEnum)[keyof typeof InventoryOrderOrderByRelevanceFieldEnum]


  export const LogOrderByRelevanceFieldEnum: {
    activity: 'activity'
  };

  export type LogOrderByRelevanceFieldEnum = (typeof LogOrderByRelevanceFieldEnum)[keyof typeof LogOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'BranchStatus'
   */
  export type EnumBranchStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BranchStatus'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'PatientType'
   */
  export type EnumPatientTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PatientType'>
    


  /**
   * Reference to a field of type 'AppointmentType'
   */
  export type EnumAppointmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentType'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'TreatmentStatus'
   */
  export type EnumTreatmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TreatmentStatus'>
    


  /**
   * Reference to a field of type 'BillStatus'
   */
  export type EnumBillStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillStatus'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'ExpenseType'
   */
  export type EnumExpenseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExpenseType'>
    


  /**
   * Reference to a field of type 'SalaryStatus'
   */
  export type EnumSalaryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SalaryStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: StringFilter<"Token"> | string
    userId?: IntFilter<"Token"> | number
    refreshToken?: StringFilter<"Token"> | string
    accessToken?: StringFilter<"Token"> | string
    expiresAt?: DateTimeFilter<"Token"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: TokenOrderByRelevanceInput
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: number
    refreshToken?: string
    accessToken?: string
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    expiresAt?: DateTimeFilter<"Token"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId" | "refreshToken" | "accessToken">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Token"> | string
    userId?: IntWithAggregatesFilter<"Token"> | number
    refreshToken?: StringWithAggregatesFilter<"Token"> | string
    accessToken?: StringWithAggregatesFilter<"Token"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: IntFilter<"Organization"> | number
    name?: StringFilter<"Organization"> | string
    address?: StringFilter<"Organization"> | string
    contact?: StringFilter<"Organization"> | string
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    branches?: BranchListRelationFilter
    users?: UserListRelationFilter
    expenses?: ExpenseListRelationFilter
    logs?: LogListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branches?: BranchOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    expenses?: ExpenseOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    _relevance?: OrganizationOrderByRelevanceInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    address?: StringFilter<"Organization"> | string
    contact?: StringFilter<"Organization"> | string
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    branches?: BranchListRelationFilter
    users?: UserListRelationFilter
    expenses?: ExpenseListRelationFilter
    logs?: LogListRelationFilter
  }, "id">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Organization"> | number
    name?: StringWithAggregatesFilter<"Organization"> | string
    address?: StringWithAggregatesFilter<"Organization"> | string
    contact?: StringWithAggregatesFilter<"Organization"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Organization"> | Date | string | null
  }

  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    id?: IntFilter<"Branch"> | number
    name?: StringFilter<"Branch"> | string
    organizationId?: IntFilter<"Branch"> | number
    address?: StringFilter<"Branch"> | string
    contact?: StringFilter<"Branch"> | string
    status?: EnumBranchStatusFilter<"Branch"> | $Enums.BranchStatus
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Branch"> | Date | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    users?: UserListRelationFilter
    patients?: PatientListRelationFilter
    expenses?: ExpenseListRelationFilter
    salaries?: SalaryListRelationFilter
    inventories?: BranchInventoryListRelationFilter
    orders?: InventoryOrderListRelationFilter
    logs?: LogListRelationFilter
  }

  export type BranchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    patients?: PatientOrderByRelationAggregateInput
    expenses?: ExpenseOrderByRelationAggregateInput
    salaries?: SalaryOrderByRelationAggregateInput
    inventories?: BranchInventoryOrderByRelationAggregateInput
    orders?: InventoryOrderOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    _relevance?: BranchOrderByRelevanceInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    name?: StringFilter<"Branch"> | string
    organizationId?: IntFilter<"Branch"> | number
    address?: StringFilter<"Branch"> | string
    contact?: StringFilter<"Branch"> | string
    status?: EnumBranchStatusFilter<"Branch"> | $Enums.BranchStatus
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Branch"> | Date | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    users?: UserListRelationFilter
    patients?: PatientListRelationFilter
    expenses?: ExpenseListRelationFilter
    salaries?: SalaryListRelationFilter
    inventories?: BranchInventoryListRelationFilter
    orders?: InventoryOrderListRelationFilter
    logs?: LogListRelationFilter
  }, "id">

  export type BranchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: BranchCountOrderByAggregateInput
    _avg?: BranchAvgOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
    _sum?: BranchSumOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Branch"> | number
    name?: StringWithAggregatesFilter<"Branch"> | string
    organizationId?: IntWithAggregatesFilter<"Branch"> | number
    address?: StringWithAggregatesFilter<"Branch"> | string
    contact?: StringWithAggregatesFilter<"Branch"> | string
    status?: EnumBranchStatusWithAggregatesFilter<"Branch"> | $Enums.BranchStatus
    createdAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Branch"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    contactNo?: StringFilter<"User"> | string
    identityNo?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    branchId?: IntNullableFilter<"User"> | number | null
    organizationId?: IntFilter<"User"> | number
    identityImage?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    createdPatients?: PatientListRelationFilter
    updatedPatients?: PatientListRelationFilter
    doctorAppointments?: AppointmentListRelationFilter
    receptionistAppointments?: AppointmentListRelationFilter
    createdAppointments?: AppointmentListRelationFilter
    updatedAppointments?: AppointmentListRelationFilter
    treatments?: PatientTreatmentListRelationFilter
    payments?: PaymentListRelationFilter
    salaries?: SalaryListRelationFilter
    orders?: InventoryOrderListRelationFilter
    logs?: LogListRelationFilter
    Token?: XOR<TokenNullableScalarRelationFilter, TokenWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    identityNo?: SortOrder
    avatar?: SortOrderInput | SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    branchId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    identityImage?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    createdPatients?: PatientOrderByRelationAggregateInput
    updatedPatients?: PatientOrderByRelationAggregateInput
    doctorAppointments?: AppointmentOrderByRelationAggregateInput
    receptionistAppointments?: AppointmentOrderByRelationAggregateInput
    createdAppointments?: AppointmentOrderByRelationAggregateInput
    updatedAppointments?: AppointmentOrderByRelationAggregateInput
    treatments?: PatientTreatmentOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    salaries?: SalaryOrderByRelationAggregateInput
    orders?: InventoryOrderOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    Token?: TokenOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    contactNo?: string
    identityNo?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    branchId?: IntNullableFilter<"User"> | number | null
    organizationId?: IntFilter<"User"> | number
    identityImage?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    createdPatients?: PatientListRelationFilter
    updatedPatients?: PatientListRelationFilter
    doctorAppointments?: AppointmentListRelationFilter
    receptionistAppointments?: AppointmentListRelationFilter
    createdAppointments?: AppointmentListRelationFilter
    updatedAppointments?: AppointmentListRelationFilter
    treatments?: PatientTreatmentListRelationFilter
    payments?: PaymentListRelationFilter
    salaries?: SalaryListRelationFilter
    orders?: InventoryOrderListRelationFilter
    logs?: LogListRelationFilter
    Token?: XOR<TokenNullableScalarRelationFilter, TokenWhereInput> | null
  }, "id" | "contactNo" | "identityNo" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    identityNo?: SortOrder
    avatar?: SortOrderInput | SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    branchId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    identityImage?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    contactNo?: StringWithAggregatesFilter<"User"> | string
    identityNo?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    branchId?: IntNullableWithAggregatesFilter<"User"> | number | null
    organizationId?: IntWithAggregatesFilter<"User"> | number
    identityImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: IntFilter<"Patient"> | number
    name?: StringFilter<"Patient"> | string
    contactNumber?: StringNullableFilter<"Patient"> | string | null
    idCardNo?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    address?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    allergies?: StringNullableFilter<"Patient"> | string | null
    branchId?: IntFilter<"Patient"> | number
    patientType?: EnumPatientTypeFilter<"Patient"> | $Enums.PatientType
    createdById?: IntFilter<"Patient"> | number
    updatedById?: IntFilter<"Patient"> | number
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Patient"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    appointments?: AppointmentListRelationFilter
    treatments?: PatientTreatmentListRelationFilter
    bills?: PatientBillListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactNumber?: SortOrderInput | SortOrder
    idCardNo?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    branchId?: SortOrder
    patientType?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    appointments?: AppointmentOrderByRelationAggregateInput
    treatments?: PatientTreatmentOrderByRelationAggregateInput
    bills?: PatientBillOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    _relevance?: PatientOrderByRelevanceInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    idCardNo?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    contactNumber?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    address?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    allergies?: StringNullableFilter<"Patient"> | string | null
    branchId?: IntFilter<"Patient"> | number
    patientType?: EnumPatientTypeFilter<"Patient"> | $Enums.PatientType
    createdById?: IntFilter<"Patient"> | number
    updatedById?: IntFilter<"Patient"> | number
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Patient"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    appointments?: AppointmentListRelationFilter
    treatments?: PatientTreatmentListRelationFilter
    bills?: PatientBillListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "idCardNo">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactNumber?: SortOrderInput | SortOrder
    idCardNo?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    branchId?: SortOrder
    patientType?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Patient"> | number
    name?: StringWithAggregatesFilter<"Patient"> | string
    contactNumber?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    idCardNo?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    email?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    address?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    medicalHistory?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    branchId?: IntWithAggregatesFilter<"Patient"> | number
    patientType?: EnumPatientTypeWithAggregatesFilter<"Patient"> | $Enums.PatientType
    createdById?: IntWithAggregatesFilter<"Patient"> | number
    updatedById?: IntWithAggregatesFilter<"Patient"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: IntFilter<"Appointment"> | number
    patientId?: IntFilter<"Appointment"> | number
    doctorId?: IntNullableFilter<"Appointment"> | number | null
    receptionistId?: IntNullableFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    appointmentTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    type?: EnumAppointmentTypeFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFilter<"Appointment"> | boolean
    treatmentPlan?: StringNullableFilter<"Appointment"> | string | null
    createdById?: IntFilter<"Appointment"> | number
    updatedById?: IntFilter<"Appointment"> | number
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    doctor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    receptionist?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    treatments?: PatientTreatmentListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    receptionistId?: SortOrderInput | SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    isFinalAppointment?: SortOrder
    treatmentPlan?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: UserOrderByWithRelationInput
    receptionist?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    treatments?: PatientTreatmentOrderByRelationAggregateInput
    _relevance?: AppointmentOrderByRelevanceInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    patientId?: IntFilter<"Appointment"> | number
    doctorId?: IntNullableFilter<"Appointment"> | number | null
    receptionistId?: IntNullableFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    appointmentTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    type?: EnumAppointmentTypeFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFilter<"Appointment"> | boolean
    treatmentPlan?: StringNullableFilter<"Appointment"> | string | null
    createdById?: IntFilter<"Appointment"> | number
    updatedById?: IntFilter<"Appointment"> | number
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    doctor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    receptionist?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    treatments?: PatientTreatmentListRelationFilter
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    receptionistId?: SortOrderInput | SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    isFinalAppointment?: SortOrder
    treatmentPlan?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appointment"> | number
    patientId?: IntWithAggregatesFilter<"Appointment"> | number
    doctorId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    receptionistId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    appointmentTime?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
    type?: EnumAppointmentTypeWithAggregatesFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    isFinalAppointment?: BoolWithAggregatesFilter<"Appointment"> | boolean
    treatmentPlan?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    createdById?: IntWithAggregatesFilter<"Appointment"> | number
    updatedById?: IntWithAggregatesFilter<"Appointment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
  }

  export type TreatmentWhereInput = {
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    id?: IntFilter<"Treatment"> | number
    treatmentName?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    baseCost?: DecimalFilter<"Treatment"> | Decimal | DecimalJsLike | number | string
    duration?: IntFilter<"Treatment"> | number
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Treatment"> | Date | string | null
    patientTreatments?: PatientTreatmentListRelationFilter
    patientBill?: PatientBillListRelationFilter
  }

  export type TreatmentOrderByWithRelationInput = {
    id?: SortOrder
    treatmentName?: SortOrder
    description?: SortOrderInput | SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    patientTreatments?: PatientTreatmentOrderByRelationAggregateInput
    patientBill?: PatientBillOrderByRelationAggregateInput
    _relevance?: TreatmentOrderByRelevanceInput
  }

  export type TreatmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    treatmentName?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    baseCost?: DecimalFilter<"Treatment"> | Decimal | DecimalJsLike | number | string
    duration?: IntFilter<"Treatment"> | number
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Treatment"> | Date | string | null
    patientTreatments?: PatientTreatmentListRelationFilter
    patientBill?: PatientBillListRelationFilter
  }, "id">

  export type TreatmentOrderByWithAggregationInput = {
    id?: SortOrder
    treatmentName?: SortOrder
    description?: SortOrderInput | SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: TreatmentCountOrderByAggregateInput
    _avg?: TreatmentAvgOrderByAggregateInput
    _max?: TreatmentMaxOrderByAggregateInput
    _min?: TreatmentMinOrderByAggregateInput
    _sum?: TreatmentSumOrderByAggregateInput
  }

  export type TreatmentScalarWhereWithAggregatesInput = {
    AND?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    OR?: TreatmentScalarWhereWithAggregatesInput[]
    NOT?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Treatment"> | number
    treatmentName?: StringWithAggregatesFilter<"Treatment"> | string
    description?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    baseCost?: DecimalWithAggregatesFilter<"Treatment"> | Decimal | DecimalJsLike | number | string
    duration?: IntWithAggregatesFilter<"Treatment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Treatment"> | Date | string | null
  }

  export type PatientTreatmentWhereInput = {
    AND?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    OR?: PatientTreatmentWhereInput[]
    NOT?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    id?: IntFilter<"PatientTreatment"> | number
    patientId?: IntFilter<"PatientTreatment"> | number
    treatmentId?: IntFilter<"PatientTreatment"> | number
    appointmentId?: IntFilter<"PatientTreatment"> | number
    sessionNumber?: IntFilter<"PatientTreatment"> | number
    treatmentDate?: DateTimeFilter<"PatientTreatment"> | Date | string
    actualCost?: DecimalFilter<"PatientTreatment"> | Decimal | DecimalJsLike | number | string
    doctorId?: IntFilter<"PatientTreatment"> | number
    status?: EnumTreatmentStatusFilter<"PatientTreatment"> | $Enums.TreatmentStatus
    createdAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"PatientTreatment"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
    doctor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PatientTreatmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    treatmentDate?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    treatment?: TreatmentOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
    doctor?: UserOrderByWithRelationInput
  }

  export type PatientTreatmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    OR?: PatientTreatmentWhereInput[]
    NOT?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    patientId?: IntFilter<"PatientTreatment"> | number
    treatmentId?: IntFilter<"PatientTreatment"> | number
    appointmentId?: IntFilter<"PatientTreatment"> | number
    sessionNumber?: IntFilter<"PatientTreatment"> | number
    treatmentDate?: DateTimeFilter<"PatientTreatment"> | Date | string
    actualCost?: DecimalFilter<"PatientTreatment"> | Decimal | DecimalJsLike | number | string
    doctorId?: IntFilter<"PatientTreatment"> | number
    status?: EnumTreatmentStatusFilter<"PatientTreatment"> | $Enums.TreatmentStatus
    createdAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"PatientTreatment"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
    doctor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PatientTreatmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    treatmentDate?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: PatientTreatmentCountOrderByAggregateInput
    _avg?: PatientTreatmentAvgOrderByAggregateInput
    _max?: PatientTreatmentMaxOrderByAggregateInput
    _min?: PatientTreatmentMinOrderByAggregateInput
    _sum?: PatientTreatmentSumOrderByAggregateInput
  }

  export type PatientTreatmentScalarWhereWithAggregatesInput = {
    AND?: PatientTreatmentScalarWhereWithAggregatesInput | PatientTreatmentScalarWhereWithAggregatesInput[]
    OR?: PatientTreatmentScalarWhereWithAggregatesInput[]
    NOT?: PatientTreatmentScalarWhereWithAggregatesInput | PatientTreatmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientTreatment"> | number
    patientId?: IntWithAggregatesFilter<"PatientTreatment"> | number
    treatmentId?: IntWithAggregatesFilter<"PatientTreatment"> | number
    appointmentId?: IntWithAggregatesFilter<"PatientTreatment"> | number
    sessionNumber?: IntWithAggregatesFilter<"PatientTreatment"> | number
    treatmentDate?: DateTimeWithAggregatesFilter<"PatientTreatment"> | Date | string
    actualCost?: DecimalWithAggregatesFilter<"PatientTreatment"> | Decimal | DecimalJsLike | number | string
    doctorId?: IntWithAggregatesFilter<"PatientTreatment"> | number
    status?: EnumTreatmentStatusWithAggregatesFilter<"PatientTreatment"> | $Enums.TreatmentStatus
    createdAt?: DateTimeWithAggregatesFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientTreatment"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"PatientTreatment"> | Date | string | null
  }

  export type PatientBillWhereInput = {
    AND?: PatientBillWhereInput | PatientBillWhereInput[]
    OR?: PatientBillWhereInput[]
    NOT?: PatientBillWhereInput | PatientBillWhereInput[]
    id?: IntFilter<"PatientBill"> | number
    patientId?: IntFilter<"PatientBill"> | number
    treatmentId?: IntFilter<"PatientBill"> | number
    totalAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFilter<"PatientBill"> | $Enums.BillStatus
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    payments?: PaymentListRelationFilter
  }

  export type PatientBillOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
    status?: SortOrder
    treatment?: TreatmentOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type PatientBillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientBillWhereInput | PatientBillWhereInput[]
    OR?: PatientBillWhereInput[]
    NOT?: PatientBillWhereInput | PatientBillWhereInput[]
    patientId?: IntFilter<"PatientBill"> | number
    treatmentId?: IntFilter<"PatientBill"> | number
    totalAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFilter<"PatientBill"> | $Enums.BillStatus
    treatment?: XOR<TreatmentScalarRelationFilter, TreatmentWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    payments?: PaymentListRelationFilter
  }, "id">

  export type PatientBillOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
    status?: SortOrder
    _count?: PatientBillCountOrderByAggregateInput
    _avg?: PatientBillAvgOrderByAggregateInput
    _max?: PatientBillMaxOrderByAggregateInput
    _min?: PatientBillMinOrderByAggregateInput
    _sum?: PatientBillSumOrderByAggregateInput
  }

  export type PatientBillScalarWhereWithAggregatesInput = {
    AND?: PatientBillScalarWhereWithAggregatesInput | PatientBillScalarWhereWithAggregatesInput[]
    OR?: PatientBillScalarWhereWithAggregatesInput[]
    NOT?: PatientBillScalarWhereWithAggregatesInput | PatientBillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientBill"> | number
    patientId?: IntWithAggregatesFilter<"PatientBill"> | number
    treatmentId?: IntWithAggregatesFilter<"PatientBill"> | number
    totalAmount?: DecimalWithAggregatesFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalWithAggregatesFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalWithAggregatesFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusWithAggregatesFilter<"PatientBill"> | $Enums.BillStatus
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    billId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    receivedById?: IntFilter<"Payment"> | number
    patientId?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    receivedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    bill?: XOR<PatientBillScalarRelationFilter, PatientBillWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    receivedBy?: UserOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    bill?: PatientBillOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    billId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    receivedById?: IntFilter<"Payment"> | number
    patientId?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    receivedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    bill?: XOR<PatientBillScalarRelationFilter, PatientBillWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    billId?: IntWithAggregatesFilter<"Payment"> | number
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    receivedById?: IntWithAggregatesFilter<"Payment"> | number
    patientId?: IntWithAggregatesFilter<"Payment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type ExpenseWhereInput = {
    AND?: ExpenseWhereInput | ExpenseWhereInput[]
    OR?: ExpenseWhereInput[]
    NOT?: ExpenseWhereInput | ExpenseWhereInput[]
    id?: IntFilter<"Expense"> | number
    branchId?: IntFilter<"Expense"> | number
    organizationId?: IntFilter<"Expense"> | number
    expenseName?: StringFilter<"Expense"> | string
    expenseType?: EnumExpenseTypeFilter<"Expense"> | $Enums.ExpenseType
    amount?: DecimalFilter<"Expense"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"Expense"> | Date | string
    description?: StringNullableFilter<"Expense"> | string | null
    createdAt?: DateTimeFilter<"Expense"> | Date | string
    updatedAt?: DateTimeFilter<"Expense"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Expense"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type ExpenseOrderByWithRelationInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    expenseName?: SortOrder
    expenseType?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    _relevance?: ExpenseOrderByRelevanceInput
  }

  export type ExpenseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExpenseWhereInput | ExpenseWhereInput[]
    OR?: ExpenseWhereInput[]
    NOT?: ExpenseWhereInput | ExpenseWhereInput[]
    branchId?: IntFilter<"Expense"> | number
    organizationId?: IntFilter<"Expense"> | number
    expenseName?: StringFilter<"Expense"> | string
    expenseType?: EnumExpenseTypeFilter<"Expense"> | $Enums.ExpenseType
    amount?: DecimalFilter<"Expense"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"Expense"> | Date | string
    description?: StringNullableFilter<"Expense"> | string | null
    createdAt?: DateTimeFilter<"Expense"> | Date | string
    updatedAt?: DateTimeFilter<"Expense"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Expense"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type ExpenseOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    expenseName?: SortOrder
    expenseType?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ExpenseCountOrderByAggregateInput
    _avg?: ExpenseAvgOrderByAggregateInput
    _max?: ExpenseMaxOrderByAggregateInput
    _min?: ExpenseMinOrderByAggregateInput
    _sum?: ExpenseSumOrderByAggregateInput
  }

  export type ExpenseScalarWhereWithAggregatesInput = {
    AND?: ExpenseScalarWhereWithAggregatesInput | ExpenseScalarWhereWithAggregatesInput[]
    OR?: ExpenseScalarWhereWithAggregatesInput[]
    NOT?: ExpenseScalarWhereWithAggregatesInput | ExpenseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Expense"> | number
    branchId?: IntWithAggregatesFilter<"Expense"> | number
    organizationId?: IntWithAggregatesFilter<"Expense"> | number
    expenseName?: StringWithAggregatesFilter<"Expense"> | string
    expenseType?: EnumExpenseTypeWithAggregatesFilter<"Expense"> | $Enums.ExpenseType
    amount?: DecimalWithAggregatesFilter<"Expense"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeWithAggregatesFilter<"Expense"> | Date | string
    description?: StringNullableWithAggregatesFilter<"Expense"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Expense"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Expense"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Expense"> | Date | string | null
  }

  export type SalaryWhereInput = {
    AND?: SalaryWhereInput | SalaryWhereInput[]
    OR?: SalaryWhereInput[]
    NOT?: SalaryWhereInput | SalaryWhereInput[]
    id?: IntFilter<"Salary"> | number
    userId?: IntFilter<"Salary"> | number
    branchId?: IntFilter<"Salary"> | number
    salaryMonth?: DateTimeFilter<"Salary"> | Date | string
    amount?: DecimalFilter<"Salary"> | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFilter<"Salary"> | $Enums.SalaryStatus
    createdAt?: DateTimeFilter<"Salary"> | Date | string
    updatedAt?: DateTimeFilter<"Salary"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Salary"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }

  export type SalaryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    salaryMonth?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
  }

  export type SalaryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SalaryWhereInput | SalaryWhereInput[]
    OR?: SalaryWhereInput[]
    NOT?: SalaryWhereInput | SalaryWhereInput[]
    userId?: IntFilter<"Salary"> | number
    branchId?: IntFilter<"Salary"> | number
    salaryMonth?: DateTimeFilter<"Salary"> | Date | string
    amount?: DecimalFilter<"Salary"> | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFilter<"Salary"> | $Enums.SalaryStatus
    createdAt?: DateTimeFilter<"Salary"> | Date | string
    updatedAt?: DateTimeFilter<"Salary"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Salary"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }, "id">

  export type SalaryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    salaryMonth?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: SalaryCountOrderByAggregateInput
    _avg?: SalaryAvgOrderByAggregateInput
    _max?: SalaryMaxOrderByAggregateInput
    _min?: SalaryMinOrderByAggregateInput
    _sum?: SalarySumOrderByAggregateInput
  }

  export type SalaryScalarWhereWithAggregatesInput = {
    AND?: SalaryScalarWhereWithAggregatesInput | SalaryScalarWhereWithAggregatesInput[]
    OR?: SalaryScalarWhereWithAggregatesInput[]
    NOT?: SalaryScalarWhereWithAggregatesInput | SalaryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Salary"> | number
    userId?: IntWithAggregatesFilter<"Salary"> | number
    branchId?: IntWithAggregatesFilter<"Salary"> | number
    salaryMonth?: DateTimeWithAggregatesFilter<"Salary"> | Date | string
    amount?: DecimalWithAggregatesFilter<"Salary"> | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusWithAggregatesFilter<"Salary"> | $Enums.SalaryStatus
    createdAt?: DateTimeWithAggregatesFilter<"Salary"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Salary"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Salary"> | Date | string | null
  }

  export type BranchInventoryWhereInput = {
    AND?: BranchInventoryWhereInput | BranchInventoryWhereInput[]
    OR?: BranchInventoryWhereInput[]
    NOT?: BranchInventoryWhereInput | BranchInventoryWhereInput[]
    id?: IntFilter<"BranchInventory"> | number
    branchId?: IntFilter<"BranchInventory"> | number
    itemName?: StringFilter<"BranchInventory"> | string
    currentQuantity?: IntFilter<"BranchInventory"> | number
    reorderLevel?: IntNullableFilter<"BranchInventory"> | number | null
    costPerUnit?: DecimalNullableFilter<"BranchInventory"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"BranchInventory"> | Date | string
    updatedAt?: DateTimeFilter<"BranchInventory"> | Date | string
    deletedAt?: DateTimeNullableFilter<"BranchInventory"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }

  export type BranchInventoryOrderByWithRelationInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrderInput | SortOrder
    costPerUnit?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    _relevance?: BranchInventoryOrderByRelevanceInput
  }

  export type BranchInventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BranchInventoryWhereInput | BranchInventoryWhereInput[]
    OR?: BranchInventoryWhereInput[]
    NOT?: BranchInventoryWhereInput | BranchInventoryWhereInput[]
    branchId?: IntFilter<"BranchInventory"> | number
    itemName?: StringFilter<"BranchInventory"> | string
    currentQuantity?: IntFilter<"BranchInventory"> | number
    reorderLevel?: IntNullableFilter<"BranchInventory"> | number | null
    costPerUnit?: DecimalNullableFilter<"BranchInventory"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"BranchInventory"> | Date | string
    updatedAt?: DateTimeFilter<"BranchInventory"> | Date | string
    deletedAt?: DateTimeNullableFilter<"BranchInventory"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
  }, "id">

  export type BranchInventoryOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrderInput | SortOrder
    costPerUnit?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: BranchInventoryCountOrderByAggregateInput
    _avg?: BranchInventoryAvgOrderByAggregateInput
    _max?: BranchInventoryMaxOrderByAggregateInput
    _min?: BranchInventoryMinOrderByAggregateInput
    _sum?: BranchInventorySumOrderByAggregateInput
  }

  export type BranchInventoryScalarWhereWithAggregatesInput = {
    AND?: BranchInventoryScalarWhereWithAggregatesInput | BranchInventoryScalarWhereWithAggregatesInput[]
    OR?: BranchInventoryScalarWhereWithAggregatesInput[]
    NOT?: BranchInventoryScalarWhereWithAggregatesInput | BranchInventoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BranchInventory"> | number
    branchId?: IntWithAggregatesFilter<"BranchInventory"> | number
    itemName?: StringWithAggregatesFilter<"BranchInventory"> | string
    currentQuantity?: IntWithAggregatesFilter<"BranchInventory"> | number
    reorderLevel?: IntNullableWithAggregatesFilter<"BranchInventory"> | number | null
    costPerUnit?: DecimalNullableWithAggregatesFilter<"BranchInventory"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BranchInventory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BranchInventory"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"BranchInventory"> | Date | string | null
  }

  export type InventoryOrderWhereInput = {
    AND?: InventoryOrderWhereInput | InventoryOrderWhereInput[]
    OR?: InventoryOrderWhereInput[]
    NOT?: InventoryOrderWhereInput | InventoryOrderWhereInput[]
    id?: IntFilter<"InventoryOrder"> | number
    branchId?: IntFilter<"InventoryOrder"> | number
    itemName?: StringFilter<"InventoryOrder"> | string
    quantityOrdered?: IntFilter<"InventoryOrder"> | number
    costPerUnit?: DecimalFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    supplier?: StringNullableFilter<"InventoryOrder"> | string | null
    receiptFilePath?: StringNullableFilter<"InventoryOrder"> | string | null
    orderedAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    receivedById?: IntFilter<"InventoryOrder"> | number
    createdAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    deletedAt?: DateTimeNullableFilter<"InventoryOrder"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    receivedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InventoryOrderOrderByWithRelationInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    supplier?: SortOrderInput | SortOrder
    receiptFilePath?: SortOrderInput | SortOrder
    orderedAt?: SortOrder
    receivedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    branch?: BranchOrderByWithRelationInput
    receivedBy?: UserOrderByWithRelationInput
    _relevance?: InventoryOrderOrderByRelevanceInput
  }

  export type InventoryOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InventoryOrderWhereInput | InventoryOrderWhereInput[]
    OR?: InventoryOrderWhereInput[]
    NOT?: InventoryOrderWhereInput | InventoryOrderWhereInput[]
    branchId?: IntFilter<"InventoryOrder"> | number
    itemName?: StringFilter<"InventoryOrder"> | string
    quantityOrdered?: IntFilter<"InventoryOrder"> | number
    costPerUnit?: DecimalFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    supplier?: StringNullableFilter<"InventoryOrder"> | string | null
    receiptFilePath?: StringNullableFilter<"InventoryOrder"> | string | null
    orderedAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    receivedById?: IntFilter<"InventoryOrder"> | number
    createdAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    deletedAt?: DateTimeNullableFilter<"InventoryOrder"> | Date | string | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    receivedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InventoryOrderOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    supplier?: SortOrderInput | SortOrder
    receiptFilePath?: SortOrderInput | SortOrder
    orderedAt?: SortOrder
    receivedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: InventoryOrderCountOrderByAggregateInput
    _avg?: InventoryOrderAvgOrderByAggregateInput
    _max?: InventoryOrderMaxOrderByAggregateInput
    _min?: InventoryOrderMinOrderByAggregateInput
    _sum?: InventoryOrderSumOrderByAggregateInput
  }

  export type InventoryOrderScalarWhereWithAggregatesInput = {
    AND?: InventoryOrderScalarWhereWithAggregatesInput | InventoryOrderScalarWhereWithAggregatesInput[]
    OR?: InventoryOrderScalarWhereWithAggregatesInput[]
    NOT?: InventoryOrderScalarWhereWithAggregatesInput | InventoryOrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InventoryOrder"> | number
    branchId?: IntWithAggregatesFilter<"InventoryOrder"> | number
    itemName?: StringWithAggregatesFilter<"InventoryOrder"> | string
    quantityOrdered?: IntWithAggregatesFilter<"InventoryOrder"> | number
    costPerUnit?: DecimalWithAggregatesFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalWithAggregatesFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    supplier?: StringNullableWithAggregatesFilter<"InventoryOrder"> | string | null
    receiptFilePath?: StringNullableWithAggregatesFilter<"InventoryOrder"> | string | null
    orderedAt?: DateTimeWithAggregatesFilter<"InventoryOrder"> | Date | string
    receivedById?: IntWithAggregatesFilter<"InventoryOrder"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InventoryOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryOrder"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"InventoryOrder"> | Date | string | null
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    userId?: IntNullableFilter<"Log"> | number | null
    branchId?: IntFilter<"Log"> | number
    organizationId?: IntFilter<"Log"> | number
    activity?: StringFilter<"Log"> | string
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    activity?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    _relevance?: LogOrderByRelevanceInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    userId?: IntNullableFilter<"Log"> | number | null
    branchId?: IntFilter<"Log"> | number
    organizationId?: IntFilter<"Log"> | number
    activity?: StringFilter<"Log"> | string
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    activity?: SortOrder
    createdAt?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    userId?: IntNullableWithAggregatesFilter<"Log"> | number | null
    branchId?: IntWithAggregatesFilter<"Log"> | number
    organizationId?: IntWithAggregatesFilter<"Log"> | number
    activity?: StringWithAggregatesFilter<"Log"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type TokenCreateInput = {
    id?: string
    refreshToken: string
    accessToken: string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutTokenInput
  }

  export type TokenUncheckedCreateInput = {
    id?: string
    userId: number
    refreshToken: string
    accessToken: string
    expiresAt: Date | string
  }

  export type TokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTokenNestedInput
  }

  export type TokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: string
    userId: number
    refreshToken: string
    accessToken: string
    expiresAt: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateInput = {
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseCreateNestedManyWithoutOrganizationInput
    logs?: LogCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutOrganizationInput
    logs?: LogUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUpdateManyWithoutOrganizationNestedInput
    logs?: LogUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput
    logs?: LogUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchCreateInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateManyInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCreateInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentCreateInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    doctor?: UserCreateNestedOneWithoutDoctorAppointmentsInput
    receptionist?: UserCreateNestedOneWithoutReceptionistAppointmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAppointmentsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    doctor?: UserUpdateOneWithoutDoctorAppointmentsNestedInput
    receptionist?: UserUpdateOneWithoutReceptionistAppointmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AppointmentUpdateManyMutationInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TreatmentCreateInput = {
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutTreatmentInput
    patientBill?: PatientBillCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateInput = {
    id?: number
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput
    patientBill?: PatientBillUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUpdateInput = {
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientTreatments?: PatientTreatmentUpdateManyWithoutTreatmentNestedInput
    patientBill?: PatientBillUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput
    patientBill?: PatientBillUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentCreateManyInput = {
    id?: number
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type TreatmentUpdateManyMutationInput = {
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TreatmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentCreateInput = {
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    appointment: AppointmentCreateNestedOneWithoutTreatmentsInput
    doctor: UserCreateNestedOneWithoutTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateInput = {
    id?: number
    patientId: number
    treatmentId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentUpdateInput = {
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutTreatmentsNestedInput
    doctor?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentCreateManyInput = {
    id?: number
    patientId: number
    treatmentId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentUpdateManyMutationInput = {
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientBillCreateInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    treatment: TreatmentCreateNestedOneWithoutPatientBillInput
    patient: PatientCreateNestedOneWithoutBillsInput
    payments?: PaymentCreateNestedManyWithoutBillInput
  }

  export type PatientBillUncheckedCreateInput = {
    id?: number
    patientId: number
    treatmentId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    payments?: PaymentUncheckedCreateNestedManyWithoutBillInput
  }

  export type PatientBillUpdateInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    treatment?: TreatmentUpdateOneRequiredWithoutPatientBillNestedInput
    patient?: PatientUpdateOneRequiredWithoutBillsNestedInput
    payments?: PaymentUpdateManyWithoutBillNestedInput
  }

  export type PatientBillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    payments?: PaymentUncheckedUpdateManyWithoutBillNestedInput
  }

  export type PatientBillCreateManyInput = {
    id?: number
    patientId: number
    treatmentId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
  }

  export type PatientBillUpdateManyMutationInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
  }

  export type PatientBillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
  }

  export type PaymentCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receivedBy: UserCreateNestedOneWithoutPaymentsInput
    patient: PatientCreateNestedOneWithoutPaymentsInput
    bill: PatientBillCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    billId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    receivedById: number
    patientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedBy?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    bill?: PatientBillUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    receivedById?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    billId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    receivedById: number
    patientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    receivedById?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpenseCreateInput = {
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutExpensesInput
    organization: OrganizationCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateInput = {
    id?: number
    branchId: number
    organizationId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ExpenseUpdateInput = {
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutExpensesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpenseCreateManyInput = {
    id?: number
    branchId: number
    organizationId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ExpenseUpdateManyMutationInput = {
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpenseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SalaryCreateInput = {
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSalariesInput
    branch: BranchCreateNestedOneWithoutSalariesInput
  }

  export type SalaryUncheckedCreateInput = {
    id?: number
    userId: number
    branchId: number
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SalaryUpdateInput = {
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSalariesNestedInput
    branch?: BranchUpdateOneRequiredWithoutSalariesNestedInput
  }

  export type SalaryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SalaryCreateManyInput = {
    id?: number
    userId: number
    branchId: number
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SalaryUpdateManyMutationInput = {
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SalaryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchInventoryCreateInput = {
    itemName: string
    currentQuantity?: number
    reorderLevel?: number | null
    costPerUnit?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutInventoriesInput
  }

  export type BranchInventoryUncheckedCreateInput = {
    id?: number
    branchId: number
    itemName: string
    currentQuantity?: number
    reorderLevel?: number | null
    costPerUnit?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchInventoryUpdateInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutInventoriesNestedInput
  }

  export type BranchInventoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchInventoryCreateManyInput = {
    id?: number
    branchId: number
    itemName: string
    currentQuantity?: number
    reorderLevel?: number | null
    costPerUnit?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchInventoryUpdateManyMutationInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchInventoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderCreateInput = {
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutOrdersInput
    receivedBy: UserCreateNestedOneWithoutOrdersInput
  }

  export type InventoryOrderUncheckedCreateInput = {
    id?: number
    branchId: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    receivedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InventoryOrderUpdateInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutOrdersNestedInput
    receivedBy?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type InventoryOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderCreateManyInput = {
    id?: number
    branchId: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    receivedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InventoryOrderUpdateManyMutationInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LogCreateInput = {
    activity: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLogsInput
    branch: BranchCreateNestedOneWithoutLogsInput
    organization: OrganizationCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    branchId: number
    organizationId: number
    activity: string
    createdAt?: Date | string
  }

  export type LogUpdateInput = {
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogsNestedInput
    branch?: BranchUpdateOneRequiredWithoutLogsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    branchId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: number
    userId?: number | null
    branchId: number
    organizationId: number
    activity: string
    createdAt?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    branchId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TokenOrderByRelevanceInput = {
    fields: TokenOrderByRelevanceFieldEnum | TokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BranchListRelationFilter = {
    every?: BranchWhereInput
    some?: BranchWhereInput
    none?: BranchWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ExpenseListRelationFilter = {
    every?: ExpenseWhereInput
    some?: ExpenseWhereInput
    none?: ExpenseWhereInput
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BranchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExpenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationOrderByRelevanceInput = {
    fields: OrganizationOrderByRelevanceFieldEnum | OrganizationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumBranchStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BranchStatus | EnumBranchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BranchStatus[]
    notIn?: $Enums.BranchStatus[]
    not?: NestedEnumBranchStatusFilter<$PrismaModel> | $Enums.BranchStatus
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type SalaryListRelationFilter = {
    every?: SalaryWhereInput
    some?: SalaryWhereInput
    none?: SalaryWhereInput
  }

  export type BranchInventoryListRelationFilter = {
    every?: BranchInventoryWhereInput
    some?: BranchInventoryWhereInput
    none?: BranchInventoryWhereInput
  }

  export type InventoryOrderListRelationFilter = {
    every?: InventoryOrderWhereInput
    some?: InventoryOrderWhereInput
    none?: InventoryOrderWhereInput
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalaryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BranchInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BranchOrderByRelevanceInput = {
    fields: BranchOrderByRelevanceFieldEnum | BranchOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BranchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumBranchStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BranchStatus | EnumBranchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BranchStatus[]
    notIn?: $Enums.BranchStatus[]
    not?: NestedEnumBranchStatusWithAggregatesFilter<$PrismaModel> | $Enums.BranchStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBranchStatusFilter<$PrismaModel>
    _max?: NestedEnumBranchStatusFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BranchNullableScalarRelationFilter = {
    is?: BranchWhereInput | null
    isNot?: BranchWhereInput | null
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type PatientTreatmentListRelationFilter = {
    every?: PatientTreatmentWhereInput
    some?: PatientTreatmentWhereInput
    none?: PatientTreatmentWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type TokenNullableScalarRelationFilter = {
    is?: TokenWhereInput | null
    isNot?: TokenWhereInput | null
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientTreatmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    identityNo?: SortOrder
    avatar?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    identityImage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    identityNo?: SortOrder
    avatar?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    identityImage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNo?: SortOrder
    identityNo?: SortOrder
    avatar?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    identityImage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumPatientTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PatientType | EnumPatientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PatientType[]
    notIn?: $Enums.PatientType[]
    not?: NestedEnumPatientTypeFilter<$PrismaModel> | $Enums.PatientType
  }

  export type BranchScalarRelationFilter = {
    is?: BranchWhereInput
    isNot?: BranchWhereInput
  }

  export type PatientBillListRelationFilter = {
    every?: PatientBillWhereInput
    some?: PatientBillWhereInput
    none?: PatientBillWhereInput
  }

  export type PatientBillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientOrderByRelevanceInput = {
    fields: PatientOrderByRelevanceFieldEnum | PatientOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNumber?: SortOrder
    idCardNo?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    medicalHistory?: SortOrder
    allergies?: SortOrder
    branchId?: SortOrder
    patientType?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNumber?: SortOrder
    idCardNo?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    medicalHistory?: SortOrder
    allergies?: SortOrder
    branchId?: SortOrder
    patientType?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactNumber?: SortOrder
    idCardNo?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    address?: SortOrder
    medicalHistory?: SortOrder
    allergies?: SortOrder
    branchId?: SortOrder
    patientType?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EnumPatientTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PatientType | EnumPatientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PatientType[]
    notIn?: $Enums.PatientType[]
    not?: NestedEnumPatientTypeWithAggregatesFilter<$PrismaModel> | $Enums.PatientType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPatientTypeFilter<$PrismaModel>
    _max?: NestedEnumPatientTypeFilter<$PrismaModel>
  }

  export type EnumAppointmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[]
    notIn?: $Enums.AppointmentType[]
    not?: NestedEnumAppointmentTypeFilter<$PrismaModel> | $Enums.AppointmentType
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AppointmentOrderByRelevanceInput = {
    fields: AppointmentOrderByRelevanceFieldEnum | AppointmentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    receptionistId?: SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    type?: SortOrder
    status?: SortOrder
    isFinalAppointment?: SortOrder
    treatmentPlan?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    receptionistId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    receptionistId?: SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    type?: SortOrder
    status?: SortOrder
    isFinalAppointment?: SortOrder
    treatmentPlan?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    receptionistId?: SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    type?: SortOrder
    status?: SortOrder
    isFinalAppointment?: SortOrder
    treatmentPlan?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    receptionistId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EnumAppointmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[]
    notIn?: $Enums.AppointmentType[]
    not?: NestedEnumAppointmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAppointmentTypeFilter<$PrismaModel>
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type TreatmentOrderByRelevanceInput = {
    fields: TreatmentOrderByRelevanceFieldEnum | TreatmentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TreatmentCountOrderByAggregateInput = {
    id?: SortOrder
    treatmentName?: SortOrder
    description?: SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type TreatmentAvgOrderByAggregateInput = {
    id?: SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
  }

  export type TreatmentMaxOrderByAggregateInput = {
    id?: SortOrder
    treatmentName?: SortOrder
    description?: SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type TreatmentMinOrderByAggregateInput = {
    id?: SortOrder
    treatmentName?: SortOrder
    description?: SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type TreatmentSumOrderByAggregateInput = {
    id?: SortOrder
    baseCost?: SortOrder
    duration?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumTreatmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[]
    notIn?: $Enums.TreatmentStatus[]
    not?: NestedEnumTreatmentStatusFilter<$PrismaModel> | $Enums.TreatmentStatus
  }

  export type TreatmentScalarRelationFilter = {
    is?: TreatmentWhereInput
    isNot?: TreatmentWhereInput
  }

  export type AppointmentScalarRelationFilter = {
    is?: AppointmentWhereInput
    isNot?: AppointmentWhereInput
  }

  export type PatientTreatmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    treatmentDate?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientTreatmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
  }

  export type PatientTreatmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    treatmentDate?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientTreatmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    treatmentDate?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientTreatmentSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    appointmentId?: SortOrder
    sessionNumber?: SortOrder
    actualCost?: SortOrder
    doctorId?: SortOrder
  }

  export type EnumTreatmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[]
    notIn?: $Enums.TreatmentStatus[]
    not?: NestedEnumTreatmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.TreatmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTreatmentStatusFilter<$PrismaModel>
    _max?: NestedEnumTreatmentStatusFilter<$PrismaModel>
  }

  export type EnumBillStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BillStatus | EnumBillStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillStatus[]
    notIn?: $Enums.BillStatus[]
    not?: NestedEnumBillStatusFilter<$PrismaModel> | $Enums.BillStatus
  }

  export type PatientBillCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
    status?: SortOrder
  }

  export type PatientBillAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
  }

  export type PatientBillMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
    status?: SortOrder
  }

  export type PatientBillMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
    status?: SortOrder
  }

  export type PatientBillSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentId?: SortOrder
    totalAmount?: SortOrder
    paidAmount?: SortOrder
    remainingAmount?: SortOrder
  }

  export type EnumBillStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillStatus | EnumBillStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillStatus[]
    notIn?: $Enums.BillStatus[]
    not?: NestedEnumBillStatusWithAggregatesFilter<$PrismaModel> | $Enums.BillStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillStatusFilter<$PrismaModel>
    _max?: NestedEnumBillStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PatientBillScalarRelationFilter = {
    is?: PatientBillWhereInput
    isNot?: PatientBillWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMethod?: SortOrder
    status?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    billId?: SortOrder
    amount?: SortOrder
    receivedById?: SortOrder
    patientId?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumExpenseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseType | EnumExpenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseType[]
    notIn?: $Enums.ExpenseType[]
    not?: NestedEnumExpenseTypeFilter<$PrismaModel> | $Enums.ExpenseType
  }

  export type ExpenseOrderByRelevanceInput = {
    fields: ExpenseOrderByRelevanceFieldEnum | ExpenseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ExpenseCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    expenseName?: SortOrder
    expenseType?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ExpenseAvgOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    amount?: SortOrder
  }

  export type ExpenseMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    expenseName?: SortOrder
    expenseType?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ExpenseMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    expenseName?: SortOrder
    expenseType?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ExpenseSumOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    amount?: SortOrder
  }

  export type EnumExpenseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseType | EnumExpenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseType[]
    notIn?: $Enums.ExpenseType[]
    not?: NestedEnumExpenseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExpenseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExpenseTypeFilter<$PrismaModel>
    _max?: NestedEnumExpenseTypeFilter<$PrismaModel>
  }

  export type EnumSalaryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[]
    notIn?: $Enums.SalaryStatus[]
    not?: NestedEnumSalaryStatusFilter<$PrismaModel> | $Enums.SalaryStatus
  }

  export type SalaryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    salaryMonth?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SalaryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    amount?: SortOrder
  }

  export type SalaryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    salaryMonth?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SalaryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    salaryMonth?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SalarySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    amount?: SortOrder
  }

  export type EnumSalaryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[]
    notIn?: $Enums.SalaryStatus[]
    not?: NestedEnumSalaryStatusWithAggregatesFilter<$PrismaModel> | $Enums.SalaryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSalaryStatusFilter<$PrismaModel>
    _max?: NestedEnumSalaryStatusFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type BranchInventoryOrderByRelevanceInput = {
    fields: BranchInventoryOrderByRelevanceFieldEnum | BranchInventoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BranchInventoryCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrder
    costPerUnit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchInventoryAvgOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrder
    costPerUnit?: SortOrder
  }

  export type BranchInventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrder
    costPerUnit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchInventoryMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrder
    costPerUnit?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BranchInventorySumOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    currentQuantity?: SortOrder
    reorderLevel?: SortOrder
    costPerUnit?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type InventoryOrderOrderByRelevanceInput = {
    fields: InventoryOrderOrderByRelevanceFieldEnum | InventoryOrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InventoryOrderCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    supplier?: SortOrder
    receiptFilePath?: SortOrder
    orderedAt?: SortOrder
    receivedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InventoryOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    receivedById?: SortOrder
  }

  export type InventoryOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    supplier?: SortOrder
    receiptFilePath?: SortOrder
    orderedAt?: SortOrder
    receivedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InventoryOrderMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    itemName?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    supplier?: SortOrder
    receiptFilePath?: SortOrder
    orderedAt?: SortOrder
    receivedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InventoryOrderSumOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    quantityOrdered?: SortOrder
    costPerUnit?: SortOrder
    totalCost?: SortOrder
    receivedById?: SortOrder
  }

  export type LogOrderByRelevanceInput = {
    fields: LogOrderByRelevanceFieldEnum | LogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    activity?: SortOrder
    createdAt?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    activity?: SortOrder
    createdAt?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
    activity?: SortOrder
    createdAt?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    organizationId?: SortOrder
  }

  export type UserCreateNestedOneWithoutTokenInput = {
    create?: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokenInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutTokenNestedInput = {
    create?: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokenInput
    upsert?: UserUpsertWithoutTokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokenInput, UserUpdateWithoutTokenInput>, UserUncheckedUpdateWithoutTokenInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BranchCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<BranchCreateWithoutOrganizationInput, BranchUncheckedCreateWithoutOrganizationInput> | BranchCreateWithoutOrganizationInput[] | BranchUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutOrganizationInput | BranchCreateOrConnectWithoutOrganizationInput[]
    createMany?: BranchCreateManyOrganizationInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ExpenseCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ExpenseCreateWithoutOrganizationInput, ExpenseUncheckedCreateWithoutOrganizationInput> | ExpenseCreateWithoutOrganizationInput[] | ExpenseUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutOrganizationInput | ExpenseCreateOrConnectWithoutOrganizationInput[]
    createMany?: ExpenseCreateManyOrganizationInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LogCreateWithoutOrganizationInput, LogUncheckedCreateWithoutOrganizationInput> | LogCreateWithoutOrganizationInput[] | LogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LogCreateOrConnectWithoutOrganizationInput | LogCreateOrConnectWithoutOrganizationInput[]
    createMany?: LogCreateManyOrganizationInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type BranchUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<BranchCreateWithoutOrganizationInput, BranchUncheckedCreateWithoutOrganizationInput> | BranchCreateWithoutOrganizationInput[] | BranchUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutOrganizationInput | BranchCreateOrConnectWithoutOrganizationInput[]
    createMany?: BranchCreateManyOrganizationInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ExpenseUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ExpenseCreateWithoutOrganizationInput, ExpenseUncheckedCreateWithoutOrganizationInput> | ExpenseCreateWithoutOrganizationInput[] | ExpenseUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutOrganizationInput | ExpenseCreateOrConnectWithoutOrganizationInput[]
    createMany?: ExpenseCreateManyOrganizationInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LogCreateWithoutOrganizationInput, LogUncheckedCreateWithoutOrganizationInput> | LogCreateWithoutOrganizationInput[] | LogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LogCreateOrConnectWithoutOrganizationInput | LogCreateOrConnectWithoutOrganizationInput[]
    createMany?: LogCreateManyOrganizationInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BranchUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<BranchCreateWithoutOrganizationInput, BranchUncheckedCreateWithoutOrganizationInput> | BranchCreateWithoutOrganizationInput[] | BranchUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutOrganizationInput | BranchCreateOrConnectWithoutOrganizationInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutOrganizationInput | BranchUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: BranchCreateManyOrganizationInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutOrganizationInput | BranchUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutOrganizationInput | BranchUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ExpenseUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ExpenseCreateWithoutOrganizationInput, ExpenseUncheckedCreateWithoutOrganizationInput> | ExpenseCreateWithoutOrganizationInput[] | ExpenseUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutOrganizationInput | ExpenseCreateOrConnectWithoutOrganizationInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutOrganizationInput | ExpenseUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ExpenseCreateManyOrganizationInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutOrganizationInput | ExpenseUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutOrganizationInput | ExpenseUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type LogUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LogCreateWithoutOrganizationInput, LogUncheckedCreateWithoutOrganizationInput> | LogCreateWithoutOrganizationInput[] | LogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LogCreateOrConnectWithoutOrganizationInput | LogCreateOrConnectWithoutOrganizationInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutOrganizationInput | LogUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LogCreateManyOrganizationInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutOrganizationInput | LogUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LogUpdateManyWithWhereWithoutOrganizationInput | LogUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type BranchUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<BranchCreateWithoutOrganizationInput, BranchUncheckedCreateWithoutOrganizationInput> | BranchCreateWithoutOrganizationInput[] | BranchUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutOrganizationInput | BranchCreateOrConnectWithoutOrganizationInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutOrganizationInput | BranchUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: BranchCreateManyOrganizationInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutOrganizationInput | BranchUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutOrganizationInput | BranchUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ExpenseCreateWithoutOrganizationInput, ExpenseUncheckedCreateWithoutOrganizationInput> | ExpenseCreateWithoutOrganizationInput[] | ExpenseUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutOrganizationInput | ExpenseCreateOrConnectWithoutOrganizationInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutOrganizationInput | ExpenseUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ExpenseCreateManyOrganizationInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutOrganizationInput | ExpenseUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutOrganizationInput | ExpenseUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LogCreateWithoutOrganizationInput, LogUncheckedCreateWithoutOrganizationInput> | LogCreateWithoutOrganizationInput[] | LogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LogCreateOrConnectWithoutOrganizationInput | LogCreateOrConnectWithoutOrganizationInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutOrganizationInput | LogUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LogCreateManyOrganizationInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutOrganizationInput | LogUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LogUpdateManyWithWhereWithoutOrganizationInput | LogUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutBranchesInput = {
    create?: XOR<OrganizationCreateWithoutBranchesInput, OrganizationUncheckedCreateWithoutBranchesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutBranchesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutBranchInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutBranchInput = {
    create?: XOR<PatientCreateWithoutBranchInput, PatientUncheckedCreateWithoutBranchInput> | PatientCreateWithoutBranchInput[] | PatientUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBranchInput | PatientCreateOrConnectWithoutBranchInput[]
    createMany?: PatientCreateManyBranchInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type ExpenseCreateNestedManyWithoutBranchInput = {
    create?: XOR<ExpenseCreateWithoutBranchInput, ExpenseUncheckedCreateWithoutBranchInput> | ExpenseCreateWithoutBranchInput[] | ExpenseUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutBranchInput | ExpenseCreateOrConnectWithoutBranchInput[]
    createMany?: ExpenseCreateManyBranchInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type SalaryCreateNestedManyWithoutBranchInput = {
    create?: XOR<SalaryCreateWithoutBranchInput, SalaryUncheckedCreateWithoutBranchInput> | SalaryCreateWithoutBranchInput[] | SalaryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutBranchInput | SalaryCreateOrConnectWithoutBranchInput[]
    createMany?: SalaryCreateManyBranchInputEnvelope
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
  }

  export type BranchInventoryCreateNestedManyWithoutBranchInput = {
    create?: XOR<BranchInventoryCreateWithoutBranchInput, BranchInventoryUncheckedCreateWithoutBranchInput> | BranchInventoryCreateWithoutBranchInput[] | BranchInventoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: BranchInventoryCreateOrConnectWithoutBranchInput | BranchInventoryCreateOrConnectWithoutBranchInput[]
    createMany?: BranchInventoryCreateManyBranchInputEnvelope
    connect?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
  }

  export type InventoryOrderCreateNestedManyWithoutBranchInput = {
    create?: XOR<InventoryOrderCreateWithoutBranchInput, InventoryOrderUncheckedCreateWithoutBranchInput> | InventoryOrderCreateWithoutBranchInput[] | InventoryOrderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutBranchInput | InventoryOrderCreateOrConnectWithoutBranchInput[]
    createMany?: InventoryOrderCreateManyBranchInputEnvelope
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutBranchInput = {
    create?: XOR<LogCreateWithoutBranchInput, LogUncheckedCreateWithoutBranchInput> | LogCreateWithoutBranchInput[] | LogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LogCreateOrConnectWithoutBranchInput | LogCreateOrConnectWithoutBranchInput[]
    createMany?: LogCreateManyBranchInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<PatientCreateWithoutBranchInput, PatientUncheckedCreateWithoutBranchInput> | PatientCreateWithoutBranchInput[] | PatientUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBranchInput | PatientCreateOrConnectWithoutBranchInput[]
    createMany?: PatientCreateManyBranchInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type ExpenseUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<ExpenseCreateWithoutBranchInput, ExpenseUncheckedCreateWithoutBranchInput> | ExpenseCreateWithoutBranchInput[] | ExpenseUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutBranchInput | ExpenseCreateOrConnectWithoutBranchInput[]
    createMany?: ExpenseCreateManyBranchInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type SalaryUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<SalaryCreateWithoutBranchInput, SalaryUncheckedCreateWithoutBranchInput> | SalaryCreateWithoutBranchInput[] | SalaryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutBranchInput | SalaryCreateOrConnectWithoutBranchInput[]
    createMany?: SalaryCreateManyBranchInputEnvelope
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
  }

  export type BranchInventoryUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<BranchInventoryCreateWithoutBranchInput, BranchInventoryUncheckedCreateWithoutBranchInput> | BranchInventoryCreateWithoutBranchInput[] | BranchInventoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: BranchInventoryCreateOrConnectWithoutBranchInput | BranchInventoryCreateOrConnectWithoutBranchInput[]
    createMany?: BranchInventoryCreateManyBranchInputEnvelope
    connect?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
  }

  export type InventoryOrderUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<InventoryOrderCreateWithoutBranchInput, InventoryOrderUncheckedCreateWithoutBranchInput> | InventoryOrderCreateWithoutBranchInput[] | InventoryOrderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutBranchInput | InventoryOrderCreateOrConnectWithoutBranchInput[]
    createMany?: InventoryOrderCreateManyBranchInputEnvelope
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<LogCreateWithoutBranchInput, LogUncheckedCreateWithoutBranchInput> | LogCreateWithoutBranchInput[] | LogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LogCreateOrConnectWithoutBranchInput | LogCreateOrConnectWithoutBranchInput[]
    createMany?: LogCreateManyBranchInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type EnumBranchStatusFieldUpdateOperationsInput = {
    set?: $Enums.BranchStatus
  }

  export type OrganizationUpdateOneRequiredWithoutBranchesNestedInput = {
    create?: XOR<OrganizationCreateWithoutBranchesInput, OrganizationUncheckedCreateWithoutBranchesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutBranchesInput
    upsert?: OrganizationUpsertWithoutBranchesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutBranchesInput, OrganizationUpdateWithoutBranchesInput>, OrganizationUncheckedUpdateWithoutBranchesInput>
  }

  export type UserUpdateManyWithoutBranchNestedInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBranchInput | UserUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBranchInput | UserUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBranchInput | UserUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutBranchNestedInput = {
    create?: XOR<PatientCreateWithoutBranchInput, PatientUncheckedCreateWithoutBranchInput> | PatientCreateWithoutBranchInput[] | PatientUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBranchInput | PatientCreateOrConnectWithoutBranchInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutBranchInput | PatientUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: PatientCreateManyBranchInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutBranchInput | PatientUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutBranchInput | PatientUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type ExpenseUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ExpenseCreateWithoutBranchInput, ExpenseUncheckedCreateWithoutBranchInput> | ExpenseCreateWithoutBranchInput[] | ExpenseUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutBranchInput | ExpenseCreateOrConnectWithoutBranchInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutBranchInput | ExpenseUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ExpenseCreateManyBranchInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutBranchInput | ExpenseUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutBranchInput | ExpenseUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type SalaryUpdateManyWithoutBranchNestedInput = {
    create?: XOR<SalaryCreateWithoutBranchInput, SalaryUncheckedCreateWithoutBranchInput> | SalaryCreateWithoutBranchInput[] | SalaryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutBranchInput | SalaryCreateOrConnectWithoutBranchInput[]
    upsert?: SalaryUpsertWithWhereUniqueWithoutBranchInput | SalaryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: SalaryCreateManyBranchInputEnvelope
    set?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    disconnect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    delete?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    update?: SalaryUpdateWithWhereUniqueWithoutBranchInput | SalaryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: SalaryUpdateManyWithWhereWithoutBranchInput | SalaryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: SalaryScalarWhereInput | SalaryScalarWhereInput[]
  }

  export type BranchInventoryUpdateManyWithoutBranchNestedInput = {
    create?: XOR<BranchInventoryCreateWithoutBranchInput, BranchInventoryUncheckedCreateWithoutBranchInput> | BranchInventoryCreateWithoutBranchInput[] | BranchInventoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: BranchInventoryCreateOrConnectWithoutBranchInput | BranchInventoryCreateOrConnectWithoutBranchInput[]
    upsert?: BranchInventoryUpsertWithWhereUniqueWithoutBranchInput | BranchInventoryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: BranchInventoryCreateManyBranchInputEnvelope
    set?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    disconnect?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    delete?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    connect?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    update?: BranchInventoryUpdateWithWhereUniqueWithoutBranchInput | BranchInventoryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: BranchInventoryUpdateManyWithWhereWithoutBranchInput | BranchInventoryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: BranchInventoryScalarWhereInput | BranchInventoryScalarWhereInput[]
  }

  export type InventoryOrderUpdateManyWithoutBranchNestedInput = {
    create?: XOR<InventoryOrderCreateWithoutBranchInput, InventoryOrderUncheckedCreateWithoutBranchInput> | InventoryOrderCreateWithoutBranchInput[] | InventoryOrderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutBranchInput | InventoryOrderCreateOrConnectWithoutBranchInput[]
    upsert?: InventoryOrderUpsertWithWhereUniqueWithoutBranchInput | InventoryOrderUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: InventoryOrderCreateManyBranchInputEnvelope
    set?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    disconnect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    delete?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    update?: InventoryOrderUpdateWithWhereUniqueWithoutBranchInput | InventoryOrderUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: InventoryOrderUpdateManyWithWhereWithoutBranchInput | InventoryOrderUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: InventoryOrderScalarWhereInput | InventoryOrderScalarWhereInput[]
  }

  export type LogUpdateManyWithoutBranchNestedInput = {
    create?: XOR<LogCreateWithoutBranchInput, LogUncheckedCreateWithoutBranchInput> | LogCreateWithoutBranchInput[] | LogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LogCreateOrConnectWithoutBranchInput | LogCreateOrConnectWithoutBranchInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutBranchInput | LogUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: LogCreateManyBranchInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutBranchInput | LogUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: LogUpdateManyWithWhereWithoutBranchInput | LogUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput> | UserCreateWithoutBranchInput[] | UserUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBranchInput | UserCreateOrConnectWithoutBranchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBranchInput | UserUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: UserCreateManyBranchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBranchInput | UserUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBranchInput | UserUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<PatientCreateWithoutBranchInput, PatientUncheckedCreateWithoutBranchInput> | PatientCreateWithoutBranchInput[] | PatientUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBranchInput | PatientCreateOrConnectWithoutBranchInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutBranchInput | PatientUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: PatientCreateManyBranchInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutBranchInput | PatientUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutBranchInput | PatientUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type ExpenseUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ExpenseCreateWithoutBranchInput, ExpenseUncheckedCreateWithoutBranchInput> | ExpenseCreateWithoutBranchInput[] | ExpenseUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutBranchInput | ExpenseCreateOrConnectWithoutBranchInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutBranchInput | ExpenseUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ExpenseCreateManyBranchInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutBranchInput | ExpenseUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutBranchInput | ExpenseUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type SalaryUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<SalaryCreateWithoutBranchInput, SalaryUncheckedCreateWithoutBranchInput> | SalaryCreateWithoutBranchInput[] | SalaryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutBranchInput | SalaryCreateOrConnectWithoutBranchInput[]
    upsert?: SalaryUpsertWithWhereUniqueWithoutBranchInput | SalaryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: SalaryCreateManyBranchInputEnvelope
    set?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    disconnect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    delete?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    update?: SalaryUpdateWithWhereUniqueWithoutBranchInput | SalaryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: SalaryUpdateManyWithWhereWithoutBranchInput | SalaryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: SalaryScalarWhereInput | SalaryScalarWhereInput[]
  }

  export type BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<BranchInventoryCreateWithoutBranchInput, BranchInventoryUncheckedCreateWithoutBranchInput> | BranchInventoryCreateWithoutBranchInput[] | BranchInventoryUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: BranchInventoryCreateOrConnectWithoutBranchInput | BranchInventoryCreateOrConnectWithoutBranchInput[]
    upsert?: BranchInventoryUpsertWithWhereUniqueWithoutBranchInput | BranchInventoryUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: BranchInventoryCreateManyBranchInputEnvelope
    set?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    disconnect?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    delete?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    connect?: BranchInventoryWhereUniqueInput | BranchInventoryWhereUniqueInput[]
    update?: BranchInventoryUpdateWithWhereUniqueWithoutBranchInput | BranchInventoryUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: BranchInventoryUpdateManyWithWhereWithoutBranchInput | BranchInventoryUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: BranchInventoryScalarWhereInput | BranchInventoryScalarWhereInput[]
  }

  export type InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<InventoryOrderCreateWithoutBranchInput, InventoryOrderUncheckedCreateWithoutBranchInput> | InventoryOrderCreateWithoutBranchInput[] | InventoryOrderUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutBranchInput | InventoryOrderCreateOrConnectWithoutBranchInput[]
    upsert?: InventoryOrderUpsertWithWhereUniqueWithoutBranchInput | InventoryOrderUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: InventoryOrderCreateManyBranchInputEnvelope
    set?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    disconnect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    delete?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    update?: InventoryOrderUpdateWithWhereUniqueWithoutBranchInput | InventoryOrderUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: InventoryOrderUpdateManyWithWhereWithoutBranchInput | InventoryOrderUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: InventoryOrderScalarWhereInput | InventoryOrderScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<LogCreateWithoutBranchInput, LogUncheckedCreateWithoutBranchInput> | LogCreateWithoutBranchInput[] | LogUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LogCreateOrConnectWithoutBranchInput | LogCreateOrConnectWithoutBranchInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutBranchInput | LogUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: LogCreateManyBranchInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutBranchInput | LogUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: LogUpdateManyWithWhereWithoutBranchInput | LogUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type BranchCreateNestedOneWithoutUsersInput = {
    create?: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutUsersInput
    connect?: BranchWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type PatientCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientCreateWithoutUpdatedByInput, PatientUncheckedCreateWithoutUpdatedByInput> | PatientCreateWithoutUpdatedByInput[] | PatientUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByInput | PatientCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientCreateManyUpdatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutReceptionistInput = {
    create?: XOR<AppointmentCreateWithoutReceptionistInput, AppointmentUncheckedCreateWithoutReceptionistInput> | AppointmentCreateWithoutReceptionistInput[] | AppointmentUncheckedCreateWithoutReceptionistInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReceptionistInput | AppointmentCreateOrConnectWithoutReceptionistInput[]
    createMany?: AppointmentCreateManyReceptionistInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<AppointmentCreateWithoutUpdatedByInput, AppointmentUncheckedCreateWithoutUpdatedByInput> | AppointmentCreateWithoutUpdatedByInput[] | AppointmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByInput | AppointmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: AppointmentCreateManyUpdatedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientTreatmentCreateNestedManyWithoutDoctorInput = {
    create?: XOR<PatientTreatmentCreateWithoutDoctorInput, PatientTreatmentUncheckedCreateWithoutDoctorInput> | PatientTreatmentCreateWithoutDoctorInput[] | PatientTreatmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutDoctorInput | PatientTreatmentCreateOrConnectWithoutDoctorInput[]
    createMany?: PatientTreatmentCreateManyDoctorInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<PaymentCreateWithoutReceivedByInput, PaymentUncheckedCreateWithoutReceivedByInput> | PaymentCreateWithoutReceivedByInput[] | PaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceivedByInput | PaymentCreateOrConnectWithoutReceivedByInput[]
    createMany?: PaymentCreateManyReceivedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SalaryCreateNestedManyWithoutUserInput = {
    create?: XOR<SalaryCreateWithoutUserInput, SalaryUncheckedCreateWithoutUserInput> | SalaryCreateWithoutUserInput[] | SalaryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutUserInput | SalaryCreateOrConnectWithoutUserInput[]
    createMany?: SalaryCreateManyUserInputEnvelope
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
  }

  export type InventoryOrderCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<InventoryOrderCreateWithoutReceivedByInput, InventoryOrderUncheckedCreateWithoutReceivedByInput> | InventoryOrderCreateWithoutReceivedByInput[] | InventoryOrderUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutReceivedByInput | InventoryOrderCreateOrConnectWithoutReceivedByInput[]
    createMany?: InventoryOrderCreateManyReceivedByInputEnvelope
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type TokenCreateNestedOneWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput
    connect?: TokenWhereUniqueInput
  }

  export type PatientUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientCreateWithoutUpdatedByInput, PatientUncheckedCreateWithoutUpdatedByInput> | PatientCreateWithoutUpdatedByInput[] | PatientUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByInput | PatientCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientCreateManyUpdatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutReceptionistInput = {
    create?: XOR<AppointmentCreateWithoutReceptionistInput, AppointmentUncheckedCreateWithoutReceptionistInput> | AppointmentCreateWithoutReceptionistInput[] | AppointmentUncheckedCreateWithoutReceptionistInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReceptionistInput | AppointmentCreateOrConnectWithoutReceptionistInput[]
    createMany?: AppointmentCreateManyReceptionistInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<AppointmentCreateWithoutUpdatedByInput, AppointmentUncheckedCreateWithoutUpdatedByInput> | AppointmentCreateWithoutUpdatedByInput[] | AppointmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByInput | AppointmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: AppointmentCreateManyUpdatedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<PatientTreatmentCreateWithoutDoctorInput, PatientTreatmentUncheckedCreateWithoutDoctorInput> | PatientTreatmentCreateWithoutDoctorInput[] | PatientTreatmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutDoctorInput | PatientTreatmentCreateOrConnectWithoutDoctorInput[]
    createMany?: PatientTreatmentCreateManyDoctorInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<PaymentCreateWithoutReceivedByInput, PaymentUncheckedCreateWithoutReceivedByInput> | PaymentCreateWithoutReceivedByInput[] | PaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceivedByInput | PaymentCreateOrConnectWithoutReceivedByInput[]
    createMany?: PaymentCreateManyReceivedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SalaryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SalaryCreateWithoutUserInput, SalaryUncheckedCreateWithoutUserInput> | SalaryCreateWithoutUserInput[] | SalaryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutUserInput | SalaryCreateOrConnectWithoutUserInput[]
    createMany?: SalaryCreateManyUserInputEnvelope
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
  }

  export type InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput = {
    create?: XOR<InventoryOrderCreateWithoutReceivedByInput, InventoryOrderUncheckedCreateWithoutReceivedByInput> | InventoryOrderCreateWithoutReceivedByInput[] | InventoryOrderUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutReceivedByInput | InventoryOrderCreateOrConnectWithoutReceivedByInput[]
    createMany?: InventoryOrderCreateManyReceivedByInputEnvelope
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput
    connect?: TokenWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BranchUpdateOneWithoutUsersNestedInput = {
    create?: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutUsersInput
    upsert?: BranchUpsertWithoutUsersInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutUsersInput, BranchUpdateWithoutUsersInput>, BranchUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type PatientUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByInput | PatientUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatedByInput | PatientUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatedByInput | PatientUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientCreateWithoutUpdatedByInput, PatientUncheckedCreateWithoutUpdatedByInput> | PatientCreateWithoutUpdatedByInput[] | PatientUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByInput | PatientCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUpdatedByInput | PatientUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientCreateManyUpdatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUpdatedByInput | PatientUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUpdatedByInput | PatientUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutDoctorInput | AppointmentUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutDoctorInput | AppointmentUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutDoctorInput | AppointmentUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutReceptionistNestedInput = {
    create?: XOR<AppointmentCreateWithoutReceptionistInput, AppointmentUncheckedCreateWithoutReceptionistInput> | AppointmentCreateWithoutReceptionistInput[] | AppointmentUncheckedCreateWithoutReceptionistInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReceptionistInput | AppointmentCreateOrConnectWithoutReceptionistInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutReceptionistInput | AppointmentUpsertWithWhereUniqueWithoutReceptionistInput[]
    createMany?: AppointmentCreateManyReceptionistInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutReceptionistInput | AppointmentUpdateWithWhereUniqueWithoutReceptionistInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutReceptionistInput | AppointmentUpdateManyWithWhereWithoutReceptionistInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatedByInput | AppointmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatedByInput | AppointmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatedByInput | AppointmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutUpdatedByInput, AppointmentUncheckedCreateWithoutUpdatedByInput> | AppointmentCreateWithoutUpdatedByInput[] | AppointmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByInput | AppointmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutUpdatedByInput | AppointmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: AppointmentCreateManyUpdatedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutUpdatedByInput | AppointmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutUpdatedByInput | AppointmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientTreatmentUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutDoctorInput, PatientTreatmentUncheckedCreateWithoutDoctorInput> | PatientTreatmentCreateWithoutDoctorInput[] | PatientTreatmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutDoctorInput | PatientTreatmentCreateOrConnectWithoutDoctorInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutDoctorInput | PatientTreatmentUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: PatientTreatmentCreateManyDoctorInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutDoctorInput | PatientTreatmentUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutDoctorInput | PatientTreatmentUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<PaymentCreateWithoutReceivedByInput, PaymentUncheckedCreateWithoutReceivedByInput> | PaymentCreateWithoutReceivedByInput[] | PaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceivedByInput | PaymentCreateOrConnectWithoutReceivedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReceivedByInput | PaymentUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: PaymentCreateManyReceivedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReceivedByInput | PaymentUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReceivedByInput | PaymentUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SalaryUpdateManyWithoutUserNestedInput = {
    create?: XOR<SalaryCreateWithoutUserInput, SalaryUncheckedCreateWithoutUserInput> | SalaryCreateWithoutUserInput[] | SalaryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutUserInput | SalaryCreateOrConnectWithoutUserInput[]
    upsert?: SalaryUpsertWithWhereUniqueWithoutUserInput | SalaryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SalaryCreateManyUserInputEnvelope
    set?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    disconnect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    delete?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    update?: SalaryUpdateWithWhereUniqueWithoutUserInput | SalaryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SalaryUpdateManyWithWhereWithoutUserInput | SalaryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SalaryScalarWhereInput | SalaryScalarWhereInput[]
  }

  export type InventoryOrderUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<InventoryOrderCreateWithoutReceivedByInput, InventoryOrderUncheckedCreateWithoutReceivedByInput> | InventoryOrderCreateWithoutReceivedByInput[] | InventoryOrderUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutReceivedByInput | InventoryOrderCreateOrConnectWithoutReceivedByInput[]
    upsert?: InventoryOrderUpsertWithWhereUniqueWithoutReceivedByInput | InventoryOrderUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: InventoryOrderCreateManyReceivedByInputEnvelope
    set?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    disconnect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    delete?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    update?: InventoryOrderUpdateWithWhereUniqueWithoutReceivedByInput | InventoryOrderUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: InventoryOrderUpdateManyWithWhereWithoutReceivedByInput | InventoryOrderUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: InventoryOrderScalarWhereInput | InventoryOrderScalarWhereInput[]
  }

  export type LogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type TokenUpdateOneWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput
    upsert?: TokenUpsertWithoutUserInput
    disconnect?: TokenWhereInput | boolean
    delete?: TokenWhereInput | boolean
    connect?: TokenWhereUniqueInput
    update?: XOR<XOR<TokenUpdateToOneWithWhereWithoutUserInput, TokenUpdateWithoutUserInput>, TokenUncheckedUpdateWithoutUserInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByInput | PatientUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatedByInput | PatientUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatedByInput | PatientUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientCreateWithoutUpdatedByInput, PatientUncheckedCreateWithoutUpdatedByInput> | PatientCreateWithoutUpdatedByInput[] | PatientUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUpdatedByInput | PatientCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUpdatedByInput | PatientUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientCreateManyUpdatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUpdatedByInput | PatientUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUpdatedByInput | PatientUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutDoctorInput | AppointmentUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutDoctorInput | AppointmentUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutDoctorInput | AppointmentUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput = {
    create?: XOR<AppointmentCreateWithoutReceptionistInput, AppointmentUncheckedCreateWithoutReceptionistInput> | AppointmentCreateWithoutReceptionistInput[] | AppointmentUncheckedCreateWithoutReceptionistInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReceptionistInput | AppointmentCreateOrConnectWithoutReceptionistInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutReceptionistInput | AppointmentUpsertWithWhereUniqueWithoutReceptionistInput[]
    createMany?: AppointmentCreateManyReceptionistInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutReceptionistInput | AppointmentUpdateWithWhereUniqueWithoutReceptionistInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutReceptionistInput | AppointmentUpdateManyWithWhereWithoutReceptionistInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatedByInput | AppointmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatedByInput | AppointmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatedByInput | AppointmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutUpdatedByInput, AppointmentUncheckedCreateWithoutUpdatedByInput> | AppointmentCreateWithoutUpdatedByInput[] | AppointmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUpdatedByInput | AppointmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutUpdatedByInput | AppointmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: AppointmentCreateManyUpdatedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutUpdatedByInput | AppointmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutUpdatedByInput | AppointmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutDoctorInput, PatientTreatmentUncheckedCreateWithoutDoctorInput> | PatientTreatmentCreateWithoutDoctorInput[] | PatientTreatmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutDoctorInput | PatientTreatmentCreateOrConnectWithoutDoctorInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutDoctorInput | PatientTreatmentUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: PatientTreatmentCreateManyDoctorInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutDoctorInput | PatientTreatmentUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutDoctorInput | PatientTreatmentUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<PaymentCreateWithoutReceivedByInput, PaymentUncheckedCreateWithoutReceivedByInput> | PaymentCreateWithoutReceivedByInput[] | PaymentUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceivedByInput | PaymentCreateOrConnectWithoutReceivedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReceivedByInput | PaymentUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: PaymentCreateManyReceivedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReceivedByInput | PaymentUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReceivedByInput | PaymentUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SalaryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SalaryCreateWithoutUserInput, SalaryUncheckedCreateWithoutUserInput> | SalaryCreateWithoutUserInput[] | SalaryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SalaryCreateOrConnectWithoutUserInput | SalaryCreateOrConnectWithoutUserInput[]
    upsert?: SalaryUpsertWithWhereUniqueWithoutUserInput | SalaryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SalaryCreateManyUserInputEnvelope
    set?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    disconnect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    delete?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    connect?: SalaryWhereUniqueInput | SalaryWhereUniqueInput[]
    update?: SalaryUpdateWithWhereUniqueWithoutUserInput | SalaryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SalaryUpdateManyWithWhereWithoutUserInput | SalaryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SalaryScalarWhereInput | SalaryScalarWhereInput[]
  }

  export type InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput = {
    create?: XOR<InventoryOrderCreateWithoutReceivedByInput, InventoryOrderUncheckedCreateWithoutReceivedByInput> | InventoryOrderCreateWithoutReceivedByInput[] | InventoryOrderUncheckedCreateWithoutReceivedByInput[]
    connectOrCreate?: InventoryOrderCreateOrConnectWithoutReceivedByInput | InventoryOrderCreateOrConnectWithoutReceivedByInput[]
    upsert?: InventoryOrderUpsertWithWhereUniqueWithoutReceivedByInput | InventoryOrderUpsertWithWhereUniqueWithoutReceivedByInput[]
    createMany?: InventoryOrderCreateManyReceivedByInputEnvelope
    set?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    disconnect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    delete?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    connect?: InventoryOrderWhereUniqueInput | InventoryOrderWhereUniqueInput[]
    update?: InventoryOrderUpdateWithWhereUniqueWithoutReceivedByInput | InventoryOrderUpdateWithWhereUniqueWithoutReceivedByInput[]
    updateMany?: InventoryOrderUpdateManyWithWhereWithoutReceivedByInput | InventoryOrderUpdateManyWithWhereWithoutReceivedByInput[]
    deleteMany?: InventoryOrderScalarWhereInput | InventoryOrderScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type TokenUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput
    upsert?: TokenUpsertWithoutUserInput
    disconnect?: TokenWhereInput | boolean
    delete?: TokenWhereInput | boolean
    connect?: TokenWhereUniqueInput
    update?: XOR<XOR<TokenUpdateToOneWithWhereWithoutUserInput, TokenUpdateWithoutUserInput>, TokenUncheckedUpdateWithoutUserInput>
  }

  export type BranchCreateNestedOneWithoutPatientsInput = {
    create?: XOR<BranchCreateWithoutPatientsInput, BranchUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutPatientsInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedPatientsInput = {
    create?: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPatientsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedPatientsInput = {
    create?: XOR<UserCreateWithoutUpdatedPatientsInput, UserUncheckedCreateWithoutUpdatedPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedPatientsInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientTreatmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientInput, PatientTreatmentUncheckedCreateWithoutPatientInput> | PatientTreatmentCreateWithoutPatientInput[] | PatientTreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientInput | PatientTreatmentCreateOrConnectWithoutPatientInput[]
    createMany?: PatientTreatmentCreateManyPatientInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientBillCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientBillCreateWithoutPatientInput, PatientBillUncheckedCreateWithoutPatientInput> | PatientBillCreateWithoutPatientInput[] | PatientBillUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutPatientInput | PatientBillCreateOrConnectWithoutPatientInput[]
    createMany?: PatientBillCreateManyPatientInputEnvelope
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientInput, PatientTreatmentUncheckedCreateWithoutPatientInput> | PatientTreatmentCreateWithoutPatientInput[] | PatientTreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientInput | PatientTreatmentCreateOrConnectWithoutPatientInput[]
    createMany?: PatientTreatmentCreateManyPatientInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientBillUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientBillCreateWithoutPatientInput, PatientBillUncheckedCreateWithoutPatientInput> | PatientBillCreateWithoutPatientInput[] | PatientBillUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutPatientInput | PatientBillCreateOrConnectWithoutPatientInput[]
    createMany?: PatientBillCreateManyPatientInputEnvelope
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumPatientTypeFieldUpdateOperationsInput = {
    set?: $Enums.PatientType
  }

  export type BranchUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<BranchCreateWithoutPatientsInput, BranchUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutPatientsInput
    upsert?: BranchUpsertWithoutPatientsInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutPatientsInput, BranchUpdateWithoutPatientsInput>, BranchUncheckedUpdateWithoutPatientsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedPatientsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPatientsInput
    upsert?: UserUpsertWithoutCreatedPatientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPatientsInput, UserUpdateWithoutCreatedPatientsInput>, UserUncheckedUpdateWithoutCreatedPatientsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedPatientsInput, UserUncheckedCreateWithoutUpdatedPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedPatientsInput
    upsert?: UserUpsertWithoutUpdatedPatientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedPatientsInput, UserUpdateWithoutUpdatedPatientsInput>, UserUncheckedUpdateWithoutUpdatedPatientsInput>
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientTreatmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientInput, PatientTreatmentUncheckedCreateWithoutPatientInput> | PatientTreatmentCreateWithoutPatientInput[] | PatientTreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientInput | PatientTreatmentCreateOrConnectWithoutPatientInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutPatientInput | PatientTreatmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientTreatmentCreateManyPatientInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutPatientInput | PatientTreatmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutPatientInput | PatientTreatmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientBillUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientBillCreateWithoutPatientInput, PatientBillUncheckedCreateWithoutPatientInput> | PatientBillCreateWithoutPatientInput[] | PatientBillUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutPatientInput | PatientBillCreateOrConnectWithoutPatientInput[]
    upsert?: PatientBillUpsertWithWhereUniqueWithoutPatientInput | PatientBillUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientBillCreateManyPatientInputEnvelope
    set?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    disconnect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    delete?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    update?: PatientBillUpdateWithWhereUniqueWithoutPatientInput | PatientBillUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientBillUpdateManyWithWhereWithoutPatientInput | PatientBillUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientBillScalarWhereInput | PatientBillScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPatientInput | PaymentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPatientInput | PaymentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPatientInput | PaymentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientInput, PatientTreatmentUncheckedCreateWithoutPatientInput> | PatientTreatmentCreateWithoutPatientInput[] | PatientTreatmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientInput | PatientTreatmentCreateOrConnectWithoutPatientInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutPatientInput | PatientTreatmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientTreatmentCreateManyPatientInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutPatientInput | PatientTreatmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutPatientInput | PatientTreatmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientBillUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientBillCreateWithoutPatientInput, PatientBillUncheckedCreateWithoutPatientInput> | PatientBillCreateWithoutPatientInput[] | PatientBillUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutPatientInput | PatientBillCreateOrConnectWithoutPatientInput[]
    upsert?: PatientBillUpsertWithWhereUniqueWithoutPatientInput | PatientBillUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientBillCreateManyPatientInputEnvelope
    set?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    disconnect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    delete?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    update?: PatientBillUpdateWithWhereUniqueWithoutPatientInput | PatientBillUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientBillUpdateManyWithWhereWithoutPatientInput | PatientBillUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientBillScalarWhereInput | PatientBillScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPatientInput | PaymentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPatientInput | PaymentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPatientInput | PaymentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDoctorAppointmentsInput = {
    create?: XOR<UserCreateWithoutDoctorAppointmentsInput, UserUncheckedCreateWithoutDoctorAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceptionistAppointmentsInput = {
    create?: XOR<UserCreateWithoutReceptionistAppointmentsInput, UserUncheckedCreateWithoutReceptionistAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceptionistAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAppointmentsInput = {
    create?: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedAppointmentsInput = {
    create?: XOR<UserCreateWithoutUpdatedAppointmentsInput, UserUncheckedCreateWithoutUpdatedAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type PatientTreatmentCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutAppointmentInput, PatientTreatmentUncheckedCreateWithoutAppointmentInput> | PatientTreatmentCreateWithoutAppointmentInput[] | PatientTreatmentUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutAppointmentInput | PatientTreatmentCreateOrConnectWithoutAppointmentInput[]
    createMany?: PatientTreatmentCreateManyAppointmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutAppointmentInput, PatientTreatmentUncheckedCreateWithoutAppointmentInput> | PatientTreatmentCreateWithoutAppointmentInput[] | PatientTreatmentUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutAppointmentInput | PatientTreatmentCreateOrConnectWithoutAppointmentInput[]
    createMany?: PatientTreatmentCreateManyAppointmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type EnumAppointmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentType
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientUpsertWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAppointmentsInput, PatientUpdateWithoutAppointmentsInput>, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneWithoutDoctorAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutDoctorAppointmentsInput, UserUncheckedCreateWithoutDoctorAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorAppointmentsInput
    upsert?: UserUpsertWithoutDoctorAppointmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctorAppointmentsInput, UserUpdateWithoutDoctorAppointmentsInput>, UserUncheckedUpdateWithoutDoctorAppointmentsInput>
  }

  export type UserUpdateOneWithoutReceptionistAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutReceptionistAppointmentsInput, UserUncheckedCreateWithoutReceptionistAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceptionistAppointmentsInput
    upsert?: UserUpsertWithoutReceptionistAppointmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceptionistAppointmentsInput, UserUpdateWithoutReceptionistAppointmentsInput>, UserUncheckedUpdateWithoutReceptionistAppointmentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAppointmentsInput
    upsert?: UserUpsertWithoutCreatedAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAppointmentsInput, UserUpdateWithoutCreatedAppointmentsInput>, UserUncheckedUpdateWithoutCreatedAppointmentsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedAppointmentsInput, UserUncheckedCreateWithoutUpdatedAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedAppointmentsInput
    upsert?: UserUpsertWithoutUpdatedAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedAppointmentsInput, UserUpdateWithoutUpdatedAppointmentsInput>, UserUncheckedUpdateWithoutUpdatedAppointmentsInput>
  }

  export type PatientTreatmentUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutAppointmentInput, PatientTreatmentUncheckedCreateWithoutAppointmentInput> | PatientTreatmentCreateWithoutAppointmentInput[] | PatientTreatmentUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutAppointmentInput | PatientTreatmentCreateOrConnectWithoutAppointmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutAppointmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: PatientTreatmentCreateManyAppointmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutAppointmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutAppointmentInput | PatientTreatmentUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutAppointmentInput, PatientTreatmentUncheckedCreateWithoutAppointmentInput> | PatientTreatmentCreateWithoutAppointmentInput[] | PatientTreatmentUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutAppointmentInput | PatientTreatmentCreateOrConnectWithoutAppointmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutAppointmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: PatientTreatmentCreateManyAppointmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutAppointmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutAppointmentInput | PatientTreatmentUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientTreatmentCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientBillCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<PatientBillCreateWithoutTreatmentInput, PatientBillUncheckedCreateWithoutTreatmentInput> | PatientBillCreateWithoutTreatmentInput[] | PatientBillUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutTreatmentInput | PatientBillCreateOrConnectWithoutTreatmentInput[]
    createMany?: PatientBillCreateManyTreatmentInputEnvelope
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientBillUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<PatientBillCreateWithoutTreatmentInput, PatientBillUncheckedCreateWithoutTreatmentInput> | PatientBillCreateWithoutTreatmentInput[] | PatientBillUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutTreatmentInput | PatientBillCreateOrConnectWithoutTreatmentInput[]
    createMany?: PatientBillCreateManyTreatmentInputEnvelope
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PatientTreatmentUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput | PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientBillUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<PatientBillCreateWithoutTreatmentInput, PatientBillUncheckedCreateWithoutTreatmentInput> | PatientBillCreateWithoutTreatmentInput[] | PatientBillUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutTreatmentInput | PatientBillCreateOrConnectWithoutTreatmentInput[]
    upsert?: PatientBillUpsertWithWhereUniqueWithoutTreatmentInput | PatientBillUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: PatientBillCreateManyTreatmentInputEnvelope
    set?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    disconnect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    delete?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    update?: PatientBillUpdateWithWhereUniqueWithoutTreatmentInput | PatientBillUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: PatientBillUpdateManyWithWhereWithoutTreatmentInput | PatientBillUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: PatientBillScalarWhereInput | PatientBillScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput | PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientBillUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<PatientBillCreateWithoutTreatmentInput, PatientBillUncheckedCreateWithoutTreatmentInput> | PatientBillCreateWithoutTreatmentInput[] | PatientBillUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientBillCreateOrConnectWithoutTreatmentInput | PatientBillCreateOrConnectWithoutTreatmentInput[]
    upsert?: PatientBillUpsertWithWhereUniqueWithoutTreatmentInput | PatientBillUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: PatientBillCreateManyTreatmentInputEnvelope
    set?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    disconnect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    delete?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    connect?: PatientBillWhereUniqueInput | PatientBillWhereUniqueInput[]
    update?: PatientBillUpdateWithWhereUniqueWithoutTreatmentInput | PatientBillUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: PatientBillUpdateManyWithWhereWithoutTreatmentInput | PatientBillUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: PatientBillScalarWhereInput | PatientBillScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type TreatmentCreateNestedOneWithoutPatientTreatmentsInput = {
    create?: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientTreatmentsInput
    connect?: TreatmentWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentsInput, AppointmentUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTreatmentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTreatmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.TreatmentStatus
  }

  export type PatientUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentsInput
    upsert?: PatientUpsertWithoutTreatmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutTreatmentsInput, PatientUpdateWithoutTreatmentsInput>, PatientUncheckedUpdateWithoutTreatmentsInput>
  }

  export type TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput = {
    create?: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientTreatmentsInput
    upsert?: TreatmentUpsertWithoutPatientTreatmentsInput
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutPatientTreatmentsInput, TreatmentUpdateWithoutPatientTreatmentsInput>, TreatmentUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type AppointmentUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentsInput, AppointmentUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentsInput
    upsert?: AppointmentUpsertWithoutTreatmentsInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutTreatmentsInput, AppointmentUpdateWithoutTreatmentsInput>, AppointmentUncheckedUpdateWithoutTreatmentsInput>
  }

  export type UserUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTreatmentsInput
    upsert?: UserUpsertWithoutTreatmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTreatmentsInput, UserUpdateWithoutTreatmentsInput>, UserUncheckedUpdateWithoutTreatmentsInput>
  }

  export type TreatmentCreateNestedOneWithoutPatientBillInput = {
    create?: XOR<TreatmentCreateWithoutPatientBillInput, TreatmentUncheckedCreateWithoutPatientBillInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientBillInput
    connect?: TreatmentWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutBillsInput = {
    create?: XOR<PatientCreateWithoutBillsInput, PatientUncheckedCreateWithoutBillsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBillsInput
    connect?: PatientWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutBillInput = {
    create?: XOR<PaymentCreateWithoutBillInput, PaymentUncheckedCreateWithoutBillInput> | PaymentCreateWithoutBillInput[] | PaymentUncheckedCreateWithoutBillInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillInput | PaymentCreateOrConnectWithoutBillInput[]
    createMany?: PaymentCreateManyBillInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutBillInput = {
    create?: XOR<PaymentCreateWithoutBillInput, PaymentUncheckedCreateWithoutBillInput> | PaymentCreateWithoutBillInput[] | PaymentUncheckedCreateWithoutBillInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillInput | PaymentCreateOrConnectWithoutBillInput[]
    createMany?: PaymentCreateManyBillInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumBillStatusFieldUpdateOperationsInput = {
    set?: $Enums.BillStatus
  }

  export type TreatmentUpdateOneRequiredWithoutPatientBillNestedInput = {
    create?: XOR<TreatmentCreateWithoutPatientBillInput, TreatmentUncheckedCreateWithoutPatientBillInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientBillInput
    upsert?: TreatmentUpsertWithoutPatientBillInput
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutPatientBillInput, TreatmentUpdateWithoutPatientBillInput>, TreatmentUncheckedUpdateWithoutPatientBillInput>
  }

  export type PatientUpdateOneRequiredWithoutBillsNestedInput = {
    create?: XOR<PatientCreateWithoutBillsInput, PatientUncheckedCreateWithoutBillsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBillsInput
    upsert?: PatientUpsertWithoutBillsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutBillsInput, PatientUpdateWithoutBillsInput>, PatientUncheckedUpdateWithoutBillsInput>
  }

  export type PaymentUpdateManyWithoutBillNestedInput = {
    create?: XOR<PaymentCreateWithoutBillInput, PaymentUncheckedCreateWithoutBillInput> | PaymentCreateWithoutBillInput[] | PaymentUncheckedCreateWithoutBillInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillInput | PaymentCreateOrConnectWithoutBillInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBillInput | PaymentUpsertWithWhereUniqueWithoutBillInput[]
    createMany?: PaymentCreateManyBillInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBillInput | PaymentUpdateWithWhereUniqueWithoutBillInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBillInput | PaymentUpdateManyWithWhereWithoutBillInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutBillNestedInput = {
    create?: XOR<PaymentCreateWithoutBillInput, PaymentUncheckedCreateWithoutBillInput> | PaymentCreateWithoutBillInput[] | PaymentUncheckedCreateWithoutBillInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillInput | PaymentCreateOrConnectWithoutBillInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBillInput | PaymentUpsertWithWhereUniqueWithoutBillInput[]
    createMany?: PaymentCreateManyBillInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBillInput | PaymentUpdateWithWhereUniqueWithoutBillInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBillInput | PaymentUpdateManyWithWhereWithoutBillInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPaymentsInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientBillCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PatientBillCreateWithoutPaymentsInput, PatientBillUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientBillCreateOrConnectWithoutPaymentsInput
    connect?: PatientBillWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type UserUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    upsert?: UserUpsertWithoutPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentsInput, UserUpdateWithoutPaymentsInput>, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type PatientUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPaymentsInput
    upsert?: PatientUpsertWithoutPaymentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPaymentsInput, PatientUpdateWithoutPaymentsInput>, PatientUncheckedUpdateWithoutPaymentsInput>
  }

  export type PatientBillUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<PatientBillCreateWithoutPaymentsInput, PatientBillUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientBillCreateOrConnectWithoutPaymentsInput
    upsert?: PatientBillUpsertWithoutPaymentsInput
    connect?: PatientBillWhereUniqueInput
    update?: XOR<XOR<PatientBillUpdateToOneWithWhereWithoutPaymentsInput, PatientBillUpdateWithoutPaymentsInput>, PatientBillUncheckedUpdateWithoutPaymentsInput>
  }

  export type BranchCreateNestedOneWithoutExpensesInput = {
    create?: XOR<BranchCreateWithoutExpensesInput, BranchUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutExpensesInput
    connect?: BranchWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutExpensesInput = {
    create?: XOR<OrganizationCreateWithoutExpensesInput, OrganizationUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutExpensesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumExpenseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ExpenseType
  }

  export type BranchUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<BranchCreateWithoutExpensesInput, BranchUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutExpensesInput
    upsert?: BranchUpsertWithoutExpensesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutExpensesInput, BranchUpdateWithoutExpensesInput>, BranchUncheckedUpdateWithoutExpensesInput>
  }

  export type OrganizationUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<OrganizationCreateWithoutExpensesInput, OrganizationUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutExpensesInput
    upsert?: OrganizationUpsertWithoutExpensesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutExpensesInput, OrganizationUpdateWithoutExpensesInput>, OrganizationUncheckedUpdateWithoutExpensesInput>
  }

  export type UserCreateNestedOneWithoutSalariesInput = {
    create?: XOR<UserCreateWithoutSalariesInput, UserUncheckedCreateWithoutSalariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSalariesInput
    connect?: UserWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutSalariesInput = {
    create?: XOR<BranchCreateWithoutSalariesInput, BranchUncheckedCreateWithoutSalariesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutSalariesInput
    connect?: BranchWhereUniqueInput
  }

  export type EnumSalaryStatusFieldUpdateOperationsInput = {
    set?: $Enums.SalaryStatus
  }

  export type UserUpdateOneRequiredWithoutSalariesNestedInput = {
    create?: XOR<UserCreateWithoutSalariesInput, UserUncheckedCreateWithoutSalariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSalariesInput
    upsert?: UserUpsertWithoutSalariesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSalariesInput, UserUpdateWithoutSalariesInput>, UserUncheckedUpdateWithoutSalariesInput>
  }

  export type BranchUpdateOneRequiredWithoutSalariesNestedInput = {
    create?: XOR<BranchCreateWithoutSalariesInput, BranchUncheckedCreateWithoutSalariesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutSalariesInput
    upsert?: BranchUpsertWithoutSalariesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutSalariesInput, BranchUpdateWithoutSalariesInput>, BranchUncheckedUpdateWithoutSalariesInput>
  }

  export type BranchCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<BranchCreateWithoutInventoriesInput, BranchUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutInventoriesInput
    connect?: BranchWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BranchUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<BranchCreateWithoutInventoriesInput, BranchUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutInventoriesInput
    upsert?: BranchUpsertWithoutInventoriesInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutInventoriesInput, BranchUpdateWithoutInventoriesInput>, BranchUncheckedUpdateWithoutInventoriesInput>
  }

  export type BranchCreateNestedOneWithoutOrdersInput = {
    create?: XOR<BranchCreateWithoutOrdersInput, BranchUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOrdersInput
    connect?: BranchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type BranchUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<BranchCreateWithoutOrdersInput, BranchUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOrdersInput
    upsert?: BranchUpsertWithoutOrdersInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutOrdersInput, BranchUpdateWithoutOrdersInput>, BranchUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserCreateNestedOneWithoutLogsInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    connect?: UserWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutLogsInput = {
    create?: XOR<BranchCreateWithoutLogsInput, BranchUncheckedCreateWithoutLogsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutLogsInput
    connect?: BranchWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutLogsInput = {
    create?: XOR<OrganizationCreateWithoutLogsInput, OrganizationUncheckedCreateWithoutLogsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLogsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserUpdateOneWithoutLogsNestedInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    upsert?: UserUpsertWithoutLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogsInput, UserUpdateWithoutLogsInput>, UserUncheckedUpdateWithoutLogsInput>
  }

  export type BranchUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<BranchCreateWithoutLogsInput, BranchUncheckedCreateWithoutLogsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutLogsInput
    upsert?: BranchUpsertWithoutLogsInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutLogsInput, BranchUpdateWithoutLogsInput>, BranchUncheckedUpdateWithoutLogsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<OrganizationCreateWithoutLogsInput, OrganizationUncheckedCreateWithoutLogsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLogsInput
    upsert?: OrganizationUpsertWithoutLogsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLogsInput, OrganizationUpdateWithoutLogsInput>, OrganizationUncheckedUpdateWithoutLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumBranchStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BranchStatus | EnumBranchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BranchStatus[]
    notIn?: $Enums.BranchStatus[]
    not?: NestedEnumBranchStatusFilter<$PrismaModel> | $Enums.BranchStatus
  }

  export type NestedEnumBranchStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BranchStatus | EnumBranchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BranchStatus[]
    notIn?: $Enums.BranchStatus[]
    not?: NestedEnumBranchStatusWithAggregatesFilter<$PrismaModel> | $Enums.BranchStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBranchStatusFilter<$PrismaModel>
    _max?: NestedEnumBranchStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPatientTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PatientType | EnumPatientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PatientType[]
    notIn?: $Enums.PatientType[]
    not?: NestedEnumPatientTypeFilter<$PrismaModel> | $Enums.PatientType
  }

  export type NestedEnumPatientTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PatientType | EnumPatientTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PatientType[]
    notIn?: $Enums.PatientType[]
    not?: NestedEnumPatientTypeWithAggregatesFilter<$PrismaModel> | $Enums.PatientType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPatientTypeFilter<$PrismaModel>
    _max?: NestedEnumPatientTypeFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[]
    notIn?: $Enums.AppointmentType[]
    not?: NestedEnumAppointmentTypeFilter<$PrismaModel> | $Enums.AppointmentType
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[]
    notIn?: $Enums.AppointmentType[]
    not?: NestedEnumAppointmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAppointmentTypeFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[]
    notIn?: $Enums.AppointmentStatus[]
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumTreatmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[]
    notIn?: $Enums.TreatmentStatus[]
    not?: NestedEnumTreatmentStatusFilter<$PrismaModel> | $Enums.TreatmentStatus
  }

  export type NestedEnumTreatmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[]
    notIn?: $Enums.TreatmentStatus[]
    not?: NestedEnumTreatmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.TreatmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTreatmentStatusFilter<$PrismaModel>
    _max?: NestedEnumTreatmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumBillStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BillStatus | EnumBillStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillStatus[]
    notIn?: $Enums.BillStatus[]
    not?: NestedEnumBillStatusFilter<$PrismaModel> | $Enums.BillStatus
  }

  export type NestedEnumBillStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillStatus | EnumBillStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillStatus[]
    notIn?: $Enums.BillStatus[]
    not?: NestedEnumBillStatusWithAggregatesFilter<$PrismaModel> | $Enums.BillStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillStatusFilter<$PrismaModel>
    _max?: NestedEnumBillStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumExpenseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseType | EnumExpenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseType[]
    notIn?: $Enums.ExpenseType[]
    not?: NestedEnumExpenseTypeFilter<$PrismaModel> | $Enums.ExpenseType
  }

  export type NestedEnumExpenseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpenseType | EnumExpenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExpenseType[]
    notIn?: $Enums.ExpenseType[]
    not?: NestedEnumExpenseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExpenseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExpenseTypeFilter<$PrismaModel>
    _max?: NestedEnumExpenseTypeFilter<$PrismaModel>
  }

  export type NestedEnumSalaryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[]
    notIn?: $Enums.SalaryStatus[]
    not?: NestedEnumSalaryStatusFilter<$PrismaModel> | $Enums.SalaryStatus
  }

  export type NestedEnumSalaryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[]
    notIn?: $Enums.SalaryStatus[]
    not?: NestedEnumSalaryStatusWithAggregatesFilter<$PrismaModel> | $Enums.SalaryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSalaryStatusFilter<$PrismaModel>
    _max?: NestedEnumSalaryStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutTokenInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTokenInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
  }

  export type UserUpsertWithoutTokenInput = {
    update: XOR<UserUpdateWithoutTokenInput, UserUncheckedUpdateWithoutTokenInput>
    create: XOR<UserCreateWithoutTokenInput, UserUncheckedCreateWithoutTokenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokenInput, UserUncheckedUpdateWithoutTokenInput>
  }

  export type UserUpdateWithoutTokenInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTokenInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BranchCreateWithoutOrganizationInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutOrganizationInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutOrganizationInput, BranchUncheckedCreateWithoutOrganizationInput>
  }

  export type BranchCreateManyOrganizationInputEnvelope = {
    data: BranchCreateManyOrganizationInput | BranchCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOrganizationInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseCreateWithoutOrganizationInput = {
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutOrganizationInput = {
    id?: number
    branchId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ExpenseCreateOrConnectWithoutOrganizationInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutOrganizationInput, ExpenseUncheckedCreateWithoutOrganizationInput>
  }

  export type ExpenseCreateManyOrganizationInputEnvelope = {
    data: ExpenseCreateManyOrganizationInput | ExpenseCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutOrganizationInput = {
    activity: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLogsInput
    branch: BranchCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutOrganizationInput = {
    id?: number
    userId?: number | null
    branchId: number
    activity: string
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutOrganizationInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutOrganizationInput, LogUncheckedCreateWithoutOrganizationInput>
  }

  export type LogCreateManyOrganizationInputEnvelope = {
    data: LogCreateManyOrganizationInput | LogCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: BranchWhereUniqueInput
    update: XOR<BranchUpdateWithoutOrganizationInput, BranchUncheckedUpdateWithoutOrganizationInput>
    create: XOR<BranchCreateWithoutOrganizationInput, BranchUncheckedCreateWithoutOrganizationInput>
  }

  export type BranchUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: BranchWhereUniqueInput
    data: XOR<BranchUpdateWithoutOrganizationInput, BranchUncheckedUpdateWithoutOrganizationInput>
  }

  export type BranchUpdateManyWithWhereWithoutOrganizationInput = {
    where: BranchScalarWhereInput
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type BranchScalarWhereInput = {
    AND?: BranchScalarWhereInput | BranchScalarWhereInput[]
    OR?: BranchScalarWhereInput[]
    NOT?: BranchScalarWhereInput | BranchScalarWhereInput[]
    id?: IntFilter<"Branch"> | number
    name?: StringFilter<"Branch"> | string
    organizationId?: IntFilter<"Branch"> | number
    address?: StringFilter<"Branch"> | string
    contact?: StringFilter<"Branch"> | string
    status?: EnumBranchStatusFilter<"Branch"> | $Enums.BranchStatus
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Branch"> | Date | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    contactNo?: StringFilter<"User"> | string
    identityNo?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    branchId?: IntNullableFilter<"User"> | number | null
    organizationId?: IntFilter<"User"> | number
    identityImage?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type ExpenseUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutOrganizationInput, ExpenseUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ExpenseCreateWithoutOrganizationInput, ExpenseUncheckedCreateWithoutOrganizationInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutOrganizationInput, ExpenseUncheckedUpdateWithoutOrganizationInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutOrganizationInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ExpenseScalarWhereInput = {
    AND?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
    OR?: ExpenseScalarWhereInput[]
    NOT?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
    id?: IntFilter<"Expense"> | number
    branchId?: IntFilter<"Expense"> | number
    organizationId?: IntFilter<"Expense"> | number
    expenseName?: StringFilter<"Expense"> | string
    expenseType?: EnumExpenseTypeFilter<"Expense"> | $Enums.ExpenseType
    amount?: DecimalFilter<"Expense"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"Expense"> | Date | string
    description?: StringNullableFilter<"Expense"> | string | null
    createdAt?: DateTimeFilter<"Expense"> | Date | string
    updatedAt?: DateTimeFilter<"Expense"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Expense"> | Date | string | null
  }

  export type LogUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutOrganizationInput, LogUncheckedUpdateWithoutOrganizationInput>
    create: XOR<LogCreateWithoutOrganizationInput, LogUncheckedCreateWithoutOrganizationInput>
  }

  export type LogUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutOrganizationInput, LogUncheckedUpdateWithoutOrganizationInput>
  }

  export type LogUpdateManyWithWhereWithoutOrganizationInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: IntFilter<"Log"> | number
    userId?: IntNullableFilter<"Log"> | number | null
    branchId?: IntFilter<"Log"> | number
    organizationId?: IntFilter<"Log"> | number
    activity?: StringFilter<"Log"> | string
    createdAt?: DateTimeFilter<"Log"> | Date | string
  }

  export type OrganizationCreateWithoutBranchesInput = {
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseCreateNestedManyWithoutOrganizationInput
    logs?: LogCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutBranchesInput = {
    id?: number
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutOrganizationInput
    logs?: LogUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutBranchesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutBranchesInput, OrganizationUncheckedCreateWithoutBranchesInput>
  }

  export type UserCreateWithoutBranchInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBranchInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBranchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserCreateManyBranchInputEnvelope = {
    data: UserCreateManyBranchInput | UserCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutBranchInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBranchInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutBranchInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBranchInput, PatientUncheckedCreateWithoutBranchInput>
  }

  export type PatientCreateManyBranchInputEnvelope = {
    data: PatientCreateManyBranchInput | PatientCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseCreateWithoutBranchInput = {
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutBranchInput = {
    id?: number
    organizationId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ExpenseCreateOrConnectWithoutBranchInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutBranchInput, ExpenseUncheckedCreateWithoutBranchInput>
  }

  export type ExpenseCreateManyBranchInputEnvelope = {
    data: ExpenseCreateManyBranchInput | ExpenseCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type SalaryCreateWithoutBranchInput = {
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSalariesInput
  }

  export type SalaryUncheckedCreateWithoutBranchInput = {
    id?: number
    userId: number
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SalaryCreateOrConnectWithoutBranchInput = {
    where: SalaryWhereUniqueInput
    create: XOR<SalaryCreateWithoutBranchInput, SalaryUncheckedCreateWithoutBranchInput>
  }

  export type SalaryCreateManyBranchInputEnvelope = {
    data: SalaryCreateManyBranchInput | SalaryCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type BranchInventoryCreateWithoutBranchInput = {
    itemName: string
    currentQuantity?: number
    reorderLevel?: number | null
    costPerUnit?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchInventoryUncheckedCreateWithoutBranchInput = {
    id?: number
    itemName: string
    currentQuantity?: number
    reorderLevel?: number | null
    costPerUnit?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchInventoryCreateOrConnectWithoutBranchInput = {
    where: BranchInventoryWhereUniqueInput
    create: XOR<BranchInventoryCreateWithoutBranchInput, BranchInventoryUncheckedCreateWithoutBranchInput>
  }

  export type BranchInventoryCreateManyBranchInputEnvelope = {
    data: BranchInventoryCreateManyBranchInput | BranchInventoryCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type InventoryOrderCreateWithoutBranchInput = {
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    receivedBy: UserCreateNestedOneWithoutOrdersInput
  }

  export type InventoryOrderUncheckedCreateWithoutBranchInput = {
    id?: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    receivedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InventoryOrderCreateOrConnectWithoutBranchInput = {
    where: InventoryOrderWhereUniqueInput
    create: XOR<InventoryOrderCreateWithoutBranchInput, InventoryOrderUncheckedCreateWithoutBranchInput>
  }

  export type InventoryOrderCreateManyBranchInputEnvelope = {
    data: InventoryOrderCreateManyBranchInput | InventoryOrderCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutBranchInput = {
    activity: string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLogsInput
    organization: OrganizationCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutBranchInput = {
    id?: number
    userId?: number | null
    organizationId: number
    activity: string
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutBranchInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutBranchInput, LogUncheckedCreateWithoutBranchInput>
  }

  export type LogCreateManyBranchInputEnvelope = {
    data: LogCreateManyBranchInput | LogCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutBranchesInput = {
    update: XOR<OrganizationUpdateWithoutBranchesInput, OrganizationUncheckedUpdateWithoutBranchesInput>
    create: XOR<OrganizationCreateWithoutBranchesInput, OrganizationUncheckedCreateWithoutBranchesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutBranchesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutBranchesInput, OrganizationUncheckedUpdateWithoutBranchesInput>
  }

  export type OrganizationUpdateWithoutBranchesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUpdateManyWithoutOrganizationNestedInput
    logs?: LogUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutBranchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput
    logs?: LogUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
  }

  export type UserUpdateManyWithWhereWithoutBranchInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBranchInput>
  }

  export type PatientUpsertWithWhereUniqueWithoutBranchInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutBranchInput, PatientUncheckedUpdateWithoutBranchInput>
    create: XOR<PatientCreateWithoutBranchInput, PatientUncheckedCreateWithoutBranchInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutBranchInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutBranchInput, PatientUncheckedUpdateWithoutBranchInput>
  }

  export type PatientUpdateManyWithWhereWithoutBranchInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutBranchInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: IntFilter<"Patient"> | number
    name?: StringFilter<"Patient"> | string
    contactNumber?: StringNullableFilter<"Patient"> | string | null
    idCardNo?: StringNullableFilter<"Patient"> | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    address?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    allergies?: StringNullableFilter<"Patient"> | string | null
    branchId?: IntFilter<"Patient"> | number
    patientType?: EnumPatientTypeFilter<"Patient"> | $Enums.PatientType
    createdById?: IntFilter<"Patient"> | number
    updatedById?: IntFilter<"Patient"> | number
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Patient"> | Date | string | null
  }

  export type ExpenseUpsertWithWhereUniqueWithoutBranchInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutBranchInput, ExpenseUncheckedUpdateWithoutBranchInput>
    create: XOR<ExpenseCreateWithoutBranchInput, ExpenseUncheckedCreateWithoutBranchInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutBranchInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutBranchInput, ExpenseUncheckedUpdateWithoutBranchInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutBranchInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutBranchInput>
  }

  export type SalaryUpsertWithWhereUniqueWithoutBranchInput = {
    where: SalaryWhereUniqueInput
    update: XOR<SalaryUpdateWithoutBranchInput, SalaryUncheckedUpdateWithoutBranchInput>
    create: XOR<SalaryCreateWithoutBranchInput, SalaryUncheckedCreateWithoutBranchInput>
  }

  export type SalaryUpdateWithWhereUniqueWithoutBranchInput = {
    where: SalaryWhereUniqueInput
    data: XOR<SalaryUpdateWithoutBranchInput, SalaryUncheckedUpdateWithoutBranchInput>
  }

  export type SalaryUpdateManyWithWhereWithoutBranchInput = {
    where: SalaryScalarWhereInput
    data: XOR<SalaryUpdateManyMutationInput, SalaryUncheckedUpdateManyWithoutBranchInput>
  }

  export type SalaryScalarWhereInput = {
    AND?: SalaryScalarWhereInput | SalaryScalarWhereInput[]
    OR?: SalaryScalarWhereInput[]
    NOT?: SalaryScalarWhereInput | SalaryScalarWhereInput[]
    id?: IntFilter<"Salary"> | number
    userId?: IntFilter<"Salary"> | number
    branchId?: IntFilter<"Salary"> | number
    salaryMonth?: DateTimeFilter<"Salary"> | Date | string
    amount?: DecimalFilter<"Salary"> | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFilter<"Salary"> | $Enums.SalaryStatus
    createdAt?: DateTimeFilter<"Salary"> | Date | string
    updatedAt?: DateTimeFilter<"Salary"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Salary"> | Date | string | null
  }

  export type BranchInventoryUpsertWithWhereUniqueWithoutBranchInput = {
    where: BranchInventoryWhereUniqueInput
    update: XOR<BranchInventoryUpdateWithoutBranchInput, BranchInventoryUncheckedUpdateWithoutBranchInput>
    create: XOR<BranchInventoryCreateWithoutBranchInput, BranchInventoryUncheckedCreateWithoutBranchInput>
  }

  export type BranchInventoryUpdateWithWhereUniqueWithoutBranchInput = {
    where: BranchInventoryWhereUniqueInput
    data: XOR<BranchInventoryUpdateWithoutBranchInput, BranchInventoryUncheckedUpdateWithoutBranchInput>
  }

  export type BranchInventoryUpdateManyWithWhereWithoutBranchInput = {
    where: BranchInventoryScalarWhereInput
    data: XOR<BranchInventoryUpdateManyMutationInput, BranchInventoryUncheckedUpdateManyWithoutBranchInput>
  }

  export type BranchInventoryScalarWhereInput = {
    AND?: BranchInventoryScalarWhereInput | BranchInventoryScalarWhereInput[]
    OR?: BranchInventoryScalarWhereInput[]
    NOT?: BranchInventoryScalarWhereInput | BranchInventoryScalarWhereInput[]
    id?: IntFilter<"BranchInventory"> | number
    branchId?: IntFilter<"BranchInventory"> | number
    itemName?: StringFilter<"BranchInventory"> | string
    currentQuantity?: IntFilter<"BranchInventory"> | number
    reorderLevel?: IntNullableFilter<"BranchInventory"> | number | null
    costPerUnit?: DecimalNullableFilter<"BranchInventory"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"BranchInventory"> | Date | string
    updatedAt?: DateTimeFilter<"BranchInventory"> | Date | string
    deletedAt?: DateTimeNullableFilter<"BranchInventory"> | Date | string | null
  }

  export type InventoryOrderUpsertWithWhereUniqueWithoutBranchInput = {
    where: InventoryOrderWhereUniqueInput
    update: XOR<InventoryOrderUpdateWithoutBranchInput, InventoryOrderUncheckedUpdateWithoutBranchInput>
    create: XOR<InventoryOrderCreateWithoutBranchInput, InventoryOrderUncheckedCreateWithoutBranchInput>
  }

  export type InventoryOrderUpdateWithWhereUniqueWithoutBranchInput = {
    where: InventoryOrderWhereUniqueInput
    data: XOR<InventoryOrderUpdateWithoutBranchInput, InventoryOrderUncheckedUpdateWithoutBranchInput>
  }

  export type InventoryOrderUpdateManyWithWhereWithoutBranchInput = {
    where: InventoryOrderScalarWhereInput
    data: XOR<InventoryOrderUpdateManyMutationInput, InventoryOrderUncheckedUpdateManyWithoutBranchInput>
  }

  export type InventoryOrderScalarWhereInput = {
    AND?: InventoryOrderScalarWhereInput | InventoryOrderScalarWhereInput[]
    OR?: InventoryOrderScalarWhereInput[]
    NOT?: InventoryOrderScalarWhereInput | InventoryOrderScalarWhereInput[]
    id?: IntFilter<"InventoryOrder"> | number
    branchId?: IntFilter<"InventoryOrder"> | number
    itemName?: StringFilter<"InventoryOrder"> | string
    quantityOrdered?: IntFilter<"InventoryOrder"> | number
    costPerUnit?: DecimalFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFilter<"InventoryOrder"> | Decimal | DecimalJsLike | number | string
    supplier?: StringNullableFilter<"InventoryOrder"> | string | null
    receiptFilePath?: StringNullableFilter<"InventoryOrder"> | string | null
    orderedAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    receivedById?: IntFilter<"InventoryOrder"> | number
    createdAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryOrder"> | Date | string
    deletedAt?: DateTimeNullableFilter<"InventoryOrder"> | Date | string | null
  }

  export type LogUpsertWithWhereUniqueWithoutBranchInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutBranchInput, LogUncheckedUpdateWithoutBranchInput>
    create: XOR<LogCreateWithoutBranchInput, LogUncheckedCreateWithoutBranchInput>
  }

  export type LogUpdateWithWhereUniqueWithoutBranchInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutBranchInput, LogUncheckedUpdateWithoutBranchInput>
  }

  export type LogUpdateManyWithWhereWithoutBranchInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutBranchInput>
  }

  export type BranchCreateWithoutUsersInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutUsersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationCreateWithoutUsersInput = {
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseCreateNestedManyWithoutOrganizationInput
    logs?: LogCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchUncheckedCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutOrganizationInput
    logs?: LogUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type PatientCreateWithoutCreatedByInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCreatedByInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientCreateManyCreatedByInputEnvelope = {
    data: PatientCreateManyCreatedByInput | PatientCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutUpdatedByInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUpdatedByInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUpdatedByInput, PatientUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientCreateManyUpdatedByInputEnvelope = {
    data: PatientCreateManyUpdatedByInput | PatientCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutDoctorInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    receptionist?: UserCreateNestedOneWithoutReceptionistAppointmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAppointmentsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutDoctorInput = {
    id?: number
    patientId: number
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentCreateManyDoctorInputEnvelope = {
    data: AppointmentCreateManyDoctorInput | AppointmentCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutReceptionistInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    doctor?: UserCreateNestedOneWithoutDoctorAppointmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAppointmentsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutReceptionistInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutReceptionistInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutReceptionistInput, AppointmentUncheckedCreateWithoutReceptionistInput>
  }

  export type AppointmentCreateManyReceptionistInputEnvelope = {
    data: AppointmentCreateManyReceptionistInput | AppointmentCreateManyReceptionistInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutCreatedByInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    doctor?: UserCreateNestedOneWithoutDoctorAppointmentsInput
    receptionist?: UserCreateNestedOneWithoutReceptionistAppointmentsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAppointmentsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutCreatedByInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AppointmentCreateManyCreatedByInputEnvelope = {
    data: AppointmentCreateManyCreatedByInput | AppointmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutUpdatedByInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    doctor?: UserCreateNestedOneWithoutDoctorAppointmentsInput
    receptionist?: UserCreateNestedOneWithoutReceptionistAppointmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutUpdatedByInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutUpdatedByInput, AppointmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type AppointmentCreateManyUpdatedByInputEnvelope = {
    data: AppointmentCreateManyUpdatedByInput | AppointmentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientTreatmentCreateWithoutDoctorInput = {
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    appointment: AppointmentCreateNestedOneWithoutTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutDoctorInput = {
    id?: number
    patientId: number
    treatmentId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentCreateOrConnectWithoutDoctorInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutDoctorInput, PatientTreatmentUncheckedCreateWithoutDoctorInput>
  }

  export type PatientTreatmentCreateManyDoctorInputEnvelope = {
    data: PatientTreatmentCreateManyDoctorInput | PatientTreatmentCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutReceivedByInput = {
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    bill: PatientBillCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutReceivedByInput = {
    id?: number
    billId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    patientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutReceivedByInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutReceivedByInput, PaymentUncheckedCreateWithoutReceivedByInput>
  }

  export type PaymentCreateManyReceivedByInputEnvelope = {
    data: PaymentCreateManyReceivedByInput | PaymentCreateManyReceivedByInput[]
    skipDuplicates?: boolean
  }

  export type SalaryCreateWithoutUserInput = {
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutSalariesInput
  }

  export type SalaryUncheckedCreateWithoutUserInput = {
    id?: number
    branchId: number
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SalaryCreateOrConnectWithoutUserInput = {
    where: SalaryWhereUniqueInput
    create: XOR<SalaryCreateWithoutUserInput, SalaryUncheckedCreateWithoutUserInput>
  }

  export type SalaryCreateManyUserInputEnvelope = {
    data: SalaryCreateManyUserInput | SalaryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InventoryOrderCreateWithoutReceivedByInput = {
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutOrdersInput
  }

  export type InventoryOrderUncheckedCreateWithoutReceivedByInput = {
    id?: number
    branchId: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InventoryOrderCreateOrConnectWithoutReceivedByInput = {
    where: InventoryOrderWhereUniqueInput
    create: XOR<InventoryOrderCreateWithoutReceivedByInput, InventoryOrderUncheckedCreateWithoutReceivedByInput>
  }

  export type InventoryOrderCreateManyReceivedByInputEnvelope = {
    data: InventoryOrderCreateManyReceivedByInput | InventoryOrderCreateManyReceivedByInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutUserInput = {
    activity: string
    createdAt?: Date | string
    branch: BranchCreateNestedOneWithoutLogsInput
    organization: OrganizationCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutUserInput = {
    id?: number
    branchId: number
    organizationId: number
    activity: string
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutUserInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogCreateManyUserInputEnvelope = {
    data: LogCreateManyUserInput | LogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TokenCreateWithoutUserInput = {
    id?: string
    refreshToken: string
    accessToken: string
    expiresAt: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: string
    refreshToken: string
    accessToken: string
    expiresAt: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type BranchUpsertWithoutUsersInput = {
    update: XOR<BranchUpdateWithoutUsersInput, BranchUncheckedUpdateWithoutUsersInput>
    create: XOR<BranchCreateWithoutUsersInput, BranchUncheckedCreateWithoutUsersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutUsersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutUsersInput, BranchUncheckedUpdateWithoutUsersInput>
  }

  export type BranchUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUpdateManyWithoutOrganizationNestedInput
    logs?: LogUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUncheckedUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput
    logs?: LogUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type PatientUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutCreatedByInput, PatientUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutCreatedByInput, PatientUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutUpdatedByInput, PatientUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientCreateWithoutUpdatedByInput, PatientUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutUpdatedByInput, PatientUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutDoctorInput, AppointmentUncheckedUpdateWithoutDoctorInput>
    create: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutDoctorInput, AppointmentUncheckedUpdateWithoutDoctorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutDoctorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutDoctorInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: IntFilter<"Appointment"> | number
    patientId?: IntFilter<"Appointment"> | number
    doctorId?: IntNullableFilter<"Appointment"> | number | null
    receptionistId?: IntNullableFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    appointmentTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    type?: EnumAppointmentTypeFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFilter<"Appointment"> | boolean
    treatmentPlan?: StringNullableFilter<"Appointment"> | string | null
    createdById?: IntFilter<"Appointment"> | number
    updatedById?: IntFilter<"Appointment"> | number
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
  }

  export type AppointmentUpsertWithWhereUniqueWithoutReceptionistInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutReceptionistInput, AppointmentUncheckedUpdateWithoutReceptionistInput>
    create: XOR<AppointmentCreateWithoutReceptionistInput, AppointmentUncheckedCreateWithoutReceptionistInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutReceptionistInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutReceptionistInput, AppointmentUncheckedUpdateWithoutReceptionistInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutReceptionistInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutReceptionistInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCreatedByInput, AppointmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCreatedByInput, AppointmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutUpdatedByInput, AppointmentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<AppointmentCreateWithoutUpdatedByInput, AppointmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutUpdatedByInput, AppointmentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutDoctorInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutDoctorInput, PatientTreatmentUncheckedUpdateWithoutDoctorInput>
    create: XOR<PatientTreatmentCreateWithoutDoctorInput, PatientTreatmentUncheckedCreateWithoutDoctorInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutDoctorInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutDoctorInput, PatientTreatmentUncheckedUpdateWithoutDoctorInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutDoctorInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutDoctorInput>
  }

  export type PatientTreatmentScalarWhereInput = {
    AND?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
    OR?: PatientTreatmentScalarWhereInput[]
    NOT?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
    id?: IntFilter<"PatientTreatment"> | number
    patientId?: IntFilter<"PatientTreatment"> | number
    treatmentId?: IntFilter<"PatientTreatment"> | number
    appointmentId?: IntFilter<"PatientTreatment"> | number
    sessionNumber?: IntFilter<"PatientTreatment"> | number
    treatmentDate?: DateTimeFilter<"PatientTreatment"> | Date | string
    actualCost?: DecimalFilter<"PatientTreatment"> | Decimal | DecimalJsLike | number | string
    doctorId?: IntFilter<"PatientTreatment"> | number
    status?: EnumTreatmentStatusFilter<"PatientTreatment"> | $Enums.TreatmentStatus
    createdAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"PatientTreatment"> | Date | string | null
  }

  export type PaymentUpsertWithWhereUniqueWithoutReceivedByInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutReceivedByInput, PaymentUncheckedUpdateWithoutReceivedByInput>
    create: XOR<PaymentCreateWithoutReceivedByInput, PaymentUncheckedCreateWithoutReceivedByInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutReceivedByInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutReceivedByInput, PaymentUncheckedUpdateWithoutReceivedByInput>
  }

  export type PaymentUpdateManyWithWhereWithoutReceivedByInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutReceivedByInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    billId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    receivedById?: IntFilter<"Payment"> | number
    patientId?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type SalaryUpsertWithWhereUniqueWithoutUserInput = {
    where: SalaryWhereUniqueInput
    update: XOR<SalaryUpdateWithoutUserInput, SalaryUncheckedUpdateWithoutUserInput>
    create: XOR<SalaryCreateWithoutUserInput, SalaryUncheckedCreateWithoutUserInput>
  }

  export type SalaryUpdateWithWhereUniqueWithoutUserInput = {
    where: SalaryWhereUniqueInput
    data: XOR<SalaryUpdateWithoutUserInput, SalaryUncheckedUpdateWithoutUserInput>
  }

  export type SalaryUpdateManyWithWhereWithoutUserInput = {
    where: SalaryScalarWhereInput
    data: XOR<SalaryUpdateManyMutationInput, SalaryUncheckedUpdateManyWithoutUserInput>
  }

  export type InventoryOrderUpsertWithWhereUniqueWithoutReceivedByInput = {
    where: InventoryOrderWhereUniqueInput
    update: XOR<InventoryOrderUpdateWithoutReceivedByInput, InventoryOrderUncheckedUpdateWithoutReceivedByInput>
    create: XOR<InventoryOrderCreateWithoutReceivedByInput, InventoryOrderUncheckedCreateWithoutReceivedByInput>
  }

  export type InventoryOrderUpdateWithWhereUniqueWithoutReceivedByInput = {
    where: InventoryOrderWhereUniqueInput
    data: XOR<InventoryOrderUpdateWithoutReceivedByInput, InventoryOrderUncheckedUpdateWithoutReceivedByInput>
  }

  export type InventoryOrderUpdateManyWithWhereWithoutReceivedByInput = {
    where: InventoryOrderScalarWhereInput
    data: XOR<InventoryOrderUpdateManyMutationInput, InventoryOrderUncheckedUpdateManyWithoutReceivedByInput>
  }

  export type LogUpsertWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogUpdateWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithWhereWithoutUserInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenUpsertWithoutUserInput = {
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
    where?: TokenWhereInput
  }

  export type TokenUpdateToOneWithWhereWithoutUserInput = {
    where?: TokenWhereInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchCreateWithoutPatientsInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutPatientsInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutPatientsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutPatientsInput, BranchUncheckedCreateWithoutPatientsInput>
  }

  export type UserCreateWithoutCreatedPatientsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedPatientsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedPatientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
  }

  export type UserCreateWithoutUpdatedPatientsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedPatientsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedPatientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedPatientsInput, UserUncheckedCreateWithoutUpdatedPatientsInput>
  }

  export type AppointmentCreateWithoutPatientInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    doctor?: UserCreateNestedOneWithoutDoctorAppointmentsInput
    receptionist?: UserCreateNestedOneWithoutReceptionistAppointmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAppointmentsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: AppointmentCreateManyPatientInput | AppointmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientTreatmentCreateWithoutPatientInput = {
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    appointment: AppointmentCreateNestedOneWithoutTreatmentsInput
    doctor: UserCreateNestedOneWithoutTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutPatientInput = {
    id?: number
    treatmentId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentCreateOrConnectWithoutPatientInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutPatientInput, PatientTreatmentUncheckedCreateWithoutPatientInput>
  }

  export type PatientTreatmentCreateManyPatientInputEnvelope = {
    data: PatientTreatmentCreateManyPatientInput | PatientTreatmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientBillCreateWithoutPatientInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    treatment: TreatmentCreateNestedOneWithoutPatientBillInput
    payments?: PaymentCreateNestedManyWithoutBillInput
  }

  export type PatientBillUncheckedCreateWithoutPatientInput = {
    id?: number
    treatmentId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    payments?: PaymentUncheckedCreateNestedManyWithoutBillInput
  }

  export type PatientBillCreateOrConnectWithoutPatientInput = {
    where: PatientBillWhereUniqueInput
    create: XOR<PatientBillCreateWithoutPatientInput, PatientBillUncheckedCreateWithoutPatientInput>
  }

  export type PatientBillCreateManyPatientInputEnvelope = {
    data: PatientBillCreateManyPatientInput | PatientBillCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutPatientInput = {
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receivedBy: UserCreateNestedOneWithoutPaymentsInput
    bill: PatientBillCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPatientInput = {
    id?: number
    billId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    receivedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput>
  }

  export type PaymentCreateManyPatientInputEnvelope = {
    data: PaymentCreateManyPatientInput | PaymentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithoutPatientsInput = {
    update: XOR<BranchUpdateWithoutPatientsInput, BranchUncheckedUpdateWithoutPatientsInput>
    create: XOR<BranchCreateWithoutPatientsInput, BranchUncheckedCreateWithoutPatientsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutPatientsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutPatientsInput, BranchUncheckedUpdateWithoutPatientsInput>
  }

  export type BranchUpdateWithoutPatientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type UserUpsertWithoutCreatedPatientsInput = {
    update: XOR<UserUpdateWithoutCreatedPatientsInput, UserUncheckedUpdateWithoutCreatedPatientsInput>
    create: XOR<UserCreateWithoutCreatedPatientsInput, UserUncheckedCreateWithoutCreatedPatientsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPatientsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPatientsInput, UserUncheckedUpdateWithoutCreatedPatientsInput>
  }

  export type UserUpdateWithoutCreatedPatientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedPatientsInput = {
    update: XOR<UserUpdateWithoutUpdatedPatientsInput, UserUncheckedUpdateWithoutUpdatedPatientsInput>
    create: XOR<UserCreateWithoutUpdatedPatientsInput, UserUncheckedCreateWithoutUpdatedPatientsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedPatientsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedPatientsInput, UserUncheckedUpdateWithoutUpdatedPatientsInput>
  }

  export type UserUpdateWithoutUpdatedPatientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutPatientInput, PatientTreatmentUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientTreatmentCreateWithoutPatientInput, PatientTreatmentUncheckedCreateWithoutPatientInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutPatientInput, PatientTreatmentUncheckedUpdateWithoutPatientInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutPatientInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientBillUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientBillWhereUniqueInput
    update: XOR<PatientBillUpdateWithoutPatientInput, PatientBillUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientBillCreateWithoutPatientInput, PatientBillUncheckedCreateWithoutPatientInput>
  }

  export type PatientBillUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientBillWhereUniqueInput
    data: XOR<PatientBillUpdateWithoutPatientInput, PatientBillUncheckedUpdateWithoutPatientInput>
  }

  export type PatientBillUpdateManyWithWhereWithoutPatientInput = {
    where: PatientBillScalarWhereInput
    data: XOR<PatientBillUpdateManyMutationInput, PatientBillUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientBillScalarWhereInput = {
    AND?: PatientBillScalarWhereInput | PatientBillScalarWhereInput[]
    OR?: PatientBillScalarWhereInput[]
    NOT?: PatientBillScalarWhereInput | PatientBillScalarWhereInput[]
    id?: IntFilter<"PatientBill"> | number
    patientId?: IntFilter<"PatientBill"> | number
    treatmentId?: IntFilter<"PatientBill"> | number
    totalAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFilter<"PatientBill"> | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFilter<"PatientBill"> | $Enums.BillStatus
  }

  export type PaymentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPatientInput, PaymentUncheckedUpdateWithoutPatientInput>
    create: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPatientInput, PaymentUncheckedUpdateWithoutPatientInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPatientInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateWithoutAppointmentsInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutDoctorAppointmentsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDoctorAppointmentsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDoctorAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctorAppointmentsInput, UserUncheckedCreateWithoutDoctorAppointmentsInput>
  }

  export type UserCreateWithoutReceptionistAppointmentsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceptionistAppointmentsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceptionistAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceptionistAppointmentsInput, UserUncheckedCreateWithoutReceptionistAppointmentsInput>
  }

  export type UserCreateWithoutCreatedAppointmentsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedAppointmentsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
  }

  export type UserCreateWithoutUpdatedAppointmentsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedAppointmentsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedAppointmentsInput, UserUncheckedCreateWithoutUpdatedAppointmentsInput>
  }

  export type PatientTreatmentCreateWithoutAppointmentInput = {
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    doctor: UserCreateNestedOneWithoutTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutAppointmentInput = {
    id?: number
    patientId: number
    treatmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentCreateOrConnectWithoutAppointmentInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutAppointmentInput, PatientTreatmentUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientTreatmentCreateManyAppointmentInputEnvelope = {
    data: PatientTreatmentCreateManyAppointmentInput | PatientTreatmentCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutAppointmentsInput = {
    update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientUpdateWithoutAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutDoctorAppointmentsInput = {
    update: XOR<UserUpdateWithoutDoctorAppointmentsInput, UserUncheckedUpdateWithoutDoctorAppointmentsInput>
    create: XOR<UserCreateWithoutDoctorAppointmentsInput, UserUncheckedCreateWithoutDoctorAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctorAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctorAppointmentsInput, UserUncheckedUpdateWithoutDoctorAppointmentsInput>
  }

  export type UserUpdateWithoutDoctorAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctorAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceptionistAppointmentsInput = {
    update: XOR<UserUpdateWithoutReceptionistAppointmentsInput, UserUncheckedUpdateWithoutReceptionistAppointmentsInput>
    create: XOR<UserCreateWithoutReceptionistAppointmentsInput, UserUncheckedCreateWithoutReceptionistAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceptionistAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceptionistAppointmentsInput, UserUncheckedUpdateWithoutReceptionistAppointmentsInput>
  }

  export type UserUpdateWithoutReceptionistAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceptionistAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutCreatedAppointmentsInput = {
    update: XOR<UserUpdateWithoutCreatedAppointmentsInput, UserUncheckedUpdateWithoutCreatedAppointmentsInput>
    create: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAppointmentsInput, UserUncheckedUpdateWithoutCreatedAppointmentsInput>
  }

  export type UserUpdateWithoutCreatedAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedAppointmentsInput = {
    update: XOR<UserUpdateWithoutUpdatedAppointmentsInput, UserUncheckedUpdateWithoutUpdatedAppointmentsInput>
    create: XOR<UserCreateWithoutUpdatedAppointmentsInput, UserUncheckedCreateWithoutUpdatedAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedAppointmentsInput, UserUncheckedUpdateWithoutUpdatedAppointmentsInput>
  }

  export type UserUpdateWithoutUpdatedAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutAppointmentInput, PatientTreatmentUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PatientTreatmentCreateWithoutAppointmentInput, PatientTreatmentUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutAppointmentInput, PatientTreatmentUncheckedUpdateWithoutAppointmentInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutAppointmentInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type PatientTreatmentCreateWithoutTreatmentInput = {
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutTreatmentsInput
    appointment: AppointmentCreateNestedOneWithoutTreatmentsInput
    doctor: UserCreateNestedOneWithoutTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutTreatmentInput = {
    id?: number
    patientId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentCreateOrConnectWithoutTreatmentInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput>
  }

  export type PatientTreatmentCreateManyTreatmentInputEnvelope = {
    data: PatientTreatmentCreateManyTreatmentInput | PatientTreatmentCreateManyTreatmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientBillCreateWithoutTreatmentInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    patient: PatientCreateNestedOneWithoutBillsInput
    payments?: PaymentCreateNestedManyWithoutBillInput
  }

  export type PatientBillUncheckedCreateWithoutTreatmentInput = {
    id?: number
    patientId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    payments?: PaymentUncheckedCreateNestedManyWithoutBillInput
  }

  export type PatientBillCreateOrConnectWithoutTreatmentInput = {
    where: PatientBillWhereUniqueInput
    create: XOR<PatientBillCreateWithoutTreatmentInput, PatientBillUncheckedCreateWithoutTreatmentInput>
  }

  export type PatientBillCreateManyTreatmentInputEnvelope = {
    data: PatientBillCreateManyTreatmentInput | PatientBillCreateManyTreatmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutTreatmentInput, PatientTreatmentUncheckedUpdateWithoutTreatmentInput>
    create: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutTreatmentInput, PatientTreatmentUncheckedUpdateWithoutTreatmentInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type PatientBillUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: PatientBillWhereUniqueInput
    update: XOR<PatientBillUpdateWithoutTreatmentInput, PatientBillUncheckedUpdateWithoutTreatmentInput>
    create: XOR<PatientBillCreateWithoutTreatmentInput, PatientBillUncheckedCreateWithoutTreatmentInput>
  }

  export type PatientBillUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: PatientBillWhereUniqueInput
    data: XOR<PatientBillUpdateWithoutTreatmentInput, PatientBillUncheckedUpdateWithoutTreatmentInput>
  }

  export type PatientBillUpdateManyWithWhereWithoutTreatmentInput = {
    where: PatientBillScalarWhereInput
    data: XOR<PatientBillUpdateManyMutationInput, PatientBillUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type PatientCreateWithoutTreatmentsInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutTreatmentsInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutTreatmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
  }

  export type TreatmentCreateWithoutPatientTreatmentsInput = {
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patientBill?: PatientBillCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutPatientTreatmentsInput = {
    id?: number
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patientBill?: PatientBillUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutPatientTreatmentsInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
  }

  export type AppointmentCreateWithoutTreatmentsInput = {
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    doctor?: UserCreateNestedOneWithoutDoctorAppointmentsInput
    receptionist?: UserCreateNestedOneWithoutReceptionistAppointmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutTreatmentsInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AppointmentCreateOrConnectWithoutTreatmentsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutTreatmentsInput, AppointmentUncheckedCreateWithoutTreatmentsInput>
  }

  export type UserCreateWithoutTreatmentsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTreatmentsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTreatmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
  }

  export type PatientUpsertWithoutTreatmentsInput = {
    update: XOR<PatientUpdateWithoutTreatmentsInput, PatientUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<PatientCreateWithoutTreatmentsInput, PatientUncheckedCreateWithoutTreatmentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutTreatmentsInput, PatientUncheckedUpdateWithoutTreatmentsInput>
  }

  export type PatientUpdateWithoutTreatmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type TreatmentUpsertWithoutPatientTreatmentsInput = {
    update: XOR<TreatmentUpdateWithoutPatientTreatmentsInput, TreatmentUncheckedUpdateWithoutPatientTreatmentsInput>
    create: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutPatientTreatmentsInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutPatientTreatmentsInput, TreatmentUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type TreatmentUpdateWithoutPatientTreatmentsInput = {
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientBill?: PatientBillUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutPatientTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientBill?: PatientBillUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type AppointmentUpsertWithoutTreatmentsInput = {
    update: XOR<AppointmentUpdateWithoutTreatmentsInput, AppointmentUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<AppointmentCreateWithoutTreatmentsInput, AppointmentUncheckedCreateWithoutTreatmentsInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutTreatmentsInput, AppointmentUncheckedUpdateWithoutTreatmentsInput>
  }

  export type AppointmentUpdateWithoutTreatmentsInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    doctor?: UserUpdateOneWithoutDoctorAppointmentsNestedInput
    receptionist?: UserUpdateOneWithoutReceptionistAppointmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutTreatmentsInput = {
    update: XOR<UserUpdateWithoutTreatmentsInput, UserUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<UserCreateWithoutTreatmentsInput, UserUncheckedCreateWithoutTreatmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTreatmentsInput, UserUncheckedUpdateWithoutTreatmentsInput>
  }

  export type UserUpdateWithoutTreatmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TreatmentCreateWithoutPatientBillInput = {
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUncheckedCreateWithoutPatientBillInput = {
    id?: number
    treatmentName: string
    description?: string | null
    baseCost: Decimal | DecimalJsLike | number | string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutPatientBillInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutPatientBillInput, TreatmentUncheckedCreateWithoutPatientBillInput>
  }

  export type PatientCreateWithoutBillsInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBillsInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutBillsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBillsInput, PatientUncheckedCreateWithoutBillsInput>
  }

  export type PaymentCreateWithoutBillInput = {
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    receivedBy: UserCreateNestedOneWithoutPaymentsInput
    patient: PatientCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutBillInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    receivedById: number
    patientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutBillInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutBillInput, PaymentUncheckedCreateWithoutBillInput>
  }

  export type PaymentCreateManyBillInputEnvelope = {
    data: PaymentCreateManyBillInput | PaymentCreateManyBillInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentUpsertWithoutPatientBillInput = {
    update: XOR<TreatmentUpdateWithoutPatientBillInput, TreatmentUncheckedUpdateWithoutPatientBillInput>
    create: XOR<TreatmentCreateWithoutPatientBillInput, TreatmentUncheckedCreateWithoutPatientBillInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutPatientBillInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutPatientBillInput, TreatmentUncheckedUpdateWithoutPatientBillInput>
  }

  export type TreatmentUpdateWithoutPatientBillInput = {
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientTreatments?: PatientTreatmentUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutPatientBillInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    baseCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type PatientUpsertWithoutBillsInput = {
    update: XOR<PatientUpdateWithoutBillsInput, PatientUncheckedUpdateWithoutBillsInput>
    create: XOR<PatientCreateWithoutBillsInput, PatientUncheckedCreateWithoutBillsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutBillsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutBillsInput, PatientUncheckedUpdateWithoutBillsInput>
  }

  export type PatientUpdateWithoutBillsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PaymentUpsertWithWhereUniqueWithoutBillInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutBillInput, PaymentUncheckedUpdateWithoutBillInput>
    create: XOR<PaymentCreateWithoutBillInput, PaymentUncheckedCreateWithoutBillInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutBillInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutBillInput, PaymentUncheckedUpdateWithoutBillInput>
  }

  export type PaymentUpdateManyWithWhereWithoutBillInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutBillInput>
  }

  export type UserCreateWithoutPaymentsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPaymentsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
  }

  export type PatientCreateWithoutPaymentsInput = {
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch: BranchCreateNestedOneWithoutPatientsInput
    createdBy: UserCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentCreateNestedManyWithoutPatientInput
    bills?: PatientBillCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPaymentsInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientInput
    bills?: PatientBillUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPaymentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
  }

  export type PatientBillCreateWithoutPaymentsInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
    treatment: TreatmentCreateNestedOneWithoutPatientBillInput
    patient: PatientCreateNestedOneWithoutBillsInput
  }

  export type PatientBillUncheckedCreateWithoutPaymentsInput = {
    id?: number
    patientId: number
    treatmentId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
  }

  export type PatientBillCreateOrConnectWithoutPaymentsInput = {
    where: PatientBillWhereUniqueInput
    create: XOR<PatientBillCreateWithoutPaymentsInput, PatientBillUncheckedCreateWithoutPaymentsInput>
  }

  export type UserUpsertWithoutPaymentsInput = {
    update: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateWithoutPaymentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PatientUpsertWithoutPaymentsInput = {
    update: XOR<PatientUpdateWithoutPaymentsInput, PatientUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPaymentsInput, PatientUncheckedUpdateWithoutPaymentsInput>
  }

  export type PatientUpdateWithoutPaymentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientBillUpsertWithoutPaymentsInput = {
    update: XOR<PatientBillUpdateWithoutPaymentsInput, PatientBillUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PatientBillCreateWithoutPaymentsInput, PatientBillUncheckedCreateWithoutPaymentsInput>
    where?: PatientBillWhereInput
  }

  export type PatientBillUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PatientBillWhereInput
    data: XOR<PatientBillUpdateWithoutPaymentsInput, PatientBillUncheckedUpdateWithoutPaymentsInput>
  }

  export type PatientBillUpdateWithoutPaymentsInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    treatment?: TreatmentUpdateOneRequiredWithoutPatientBillNestedInput
    patient?: PatientUpdateOneRequiredWithoutBillsNestedInput
  }

  export type PatientBillUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
  }

  export type BranchCreateWithoutExpensesInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutExpensesInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutExpensesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutExpensesInput, BranchUncheckedCreateWithoutExpensesInput>
  }

  export type OrganizationCreateWithoutExpensesInput = {
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
    logs?: LogCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutExpensesInput = {
    id?: number
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    logs?: LogUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutExpensesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutExpensesInput, OrganizationUncheckedCreateWithoutExpensesInput>
  }

  export type BranchUpsertWithoutExpensesInput = {
    update: XOR<BranchUpdateWithoutExpensesInput, BranchUncheckedUpdateWithoutExpensesInput>
    create: XOR<BranchCreateWithoutExpensesInput, BranchUncheckedCreateWithoutExpensesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutExpensesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutExpensesInput, BranchUncheckedUpdateWithoutExpensesInput>
  }

  export type BranchUpdateWithoutExpensesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type OrganizationUpsertWithoutExpensesInput = {
    update: XOR<OrganizationUpdateWithoutExpensesInput, OrganizationUncheckedUpdateWithoutExpensesInput>
    create: XOR<OrganizationCreateWithoutExpensesInput, OrganizationUncheckedCreateWithoutExpensesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutExpensesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutExpensesInput, OrganizationUncheckedUpdateWithoutExpensesInput>
  }

  export type OrganizationUpdateWithoutExpensesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
    logs?: LogUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    logs?: LogUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserCreateWithoutSalariesInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSalariesInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSalariesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSalariesInput, UserUncheckedCreateWithoutSalariesInput>
  }

  export type BranchCreateWithoutSalariesInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutSalariesInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutSalariesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutSalariesInput, BranchUncheckedCreateWithoutSalariesInput>
  }

  export type UserUpsertWithoutSalariesInput = {
    update: XOR<UserUpdateWithoutSalariesInput, UserUncheckedUpdateWithoutSalariesInput>
    create: XOR<UserCreateWithoutSalariesInput, UserUncheckedCreateWithoutSalariesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSalariesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSalariesInput, UserUncheckedUpdateWithoutSalariesInput>
  }

  export type UserUpdateWithoutSalariesInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSalariesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BranchUpsertWithoutSalariesInput = {
    update: XOR<BranchUpdateWithoutSalariesInput, BranchUncheckedUpdateWithoutSalariesInput>
    create: XOR<BranchCreateWithoutSalariesInput, BranchUncheckedCreateWithoutSalariesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutSalariesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutSalariesInput, BranchUncheckedUpdateWithoutSalariesInput>
  }

  export type BranchUpdateWithoutSalariesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutSalariesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateWithoutInventoriesInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutInventoriesInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutInventoriesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutInventoriesInput, BranchUncheckedCreateWithoutInventoriesInput>
  }

  export type BranchUpsertWithoutInventoriesInput = {
    update: XOR<BranchUpdateWithoutInventoriesInput, BranchUncheckedUpdateWithoutInventoriesInput>
    create: XOR<BranchCreateWithoutInventoriesInput, BranchUncheckedCreateWithoutInventoriesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutInventoriesInput, BranchUncheckedUpdateWithoutInventoriesInput>
  }

  export type BranchUpdateWithoutInventoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutInventoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateWithoutOrdersInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    logs?: LogCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    logs?: LogUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutOrdersInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutOrdersInput, BranchUncheckedCreateWithoutOrdersInput>
  }

  export type UserCreateWithoutOrdersInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type BranchUpsertWithoutOrdersInput = {
    update: XOR<BranchUpdateWithoutOrdersInput, BranchUncheckedUpdateWithoutOrdersInput>
    create: XOR<BranchCreateWithoutOrdersInput, BranchUncheckedCreateWithoutOrdersInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutOrdersInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutOrdersInput, BranchUncheckedUpdateWithoutOrdersInput>
  }

  export type BranchUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutLogsInput = {
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branch?: BranchCreateNestedOneWithoutUsersInput
    organization: OrganizationCreateNestedOneWithoutUsersInput
    createdPatients?: PatientCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentCreateNestedManyWithoutDoctorInput
    payments?: PaymentCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryCreateNestedManyWithoutUserInput
    orders?: InventoryOrderCreateNestedManyWithoutReceivedByInput
    Token?: TokenCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogsInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdPatients?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientUncheckedCreateNestedManyWithoutUpdatedByInput
    doctorAppointments?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    receptionistAppointments?: AppointmentUncheckedCreateNestedManyWithoutReceptionistInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentUncheckedCreateNestedManyWithoutUpdatedByInput
    treatments?: PatientTreatmentUncheckedCreateNestedManyWithoutDoctorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutReceivedByInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutUserInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutReceivedByInput
    Token?: TokenUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type BranchCreateWithoutLogsInput = {
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutBranchesInput
    users?: UserCreateNestedManyWithoutBranchInput
    patients?: PatientCreateNestedManyWithoutBranchInput
    expenses?: ExpenseCreateNestedManyWithoutBranchInput
    salaries?: SalaryCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutLogsInput = {
    id?: number
    name: string
    organizationId: number
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutBranchInput
    patients?: PatientUncheckedCreateNestedManyWithoutBranchInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutBranchInput
    salaries?: SalaryUncheckedCreateNestedManyWithoutBranchInput
    inventories?: BranchInventoryUncheckedCreateNestedManyWithoutBranchInput
    orders?: InventoryOrderUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutLogsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutLogsInput, BranchUncheckedCreateWithoutLogsInput>
  }

  export type OrganizationCreateWithoutLogsInput = {
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchCreateNestedManyWithoutOrganizationInput
    users?: UserCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLogsInput = {
    id?: number
    name: string
    address: string
    contact: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    branches?: BranchUncheckedCreateNestedManyWithoutOrganizationInput
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLogsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLogsInput, OrganizationUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutLogsInput = {
    update: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
  }

  export type UserUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BranchUpsertWithoutLogsInput = {
    update: XOR<BranchUpdateWithoutLogsInput, BranchUncheckedUpdateWithoutLogsInput>
    create: XOR<BranchCreateWithoutLogsInput, BranchUncheckedCreateWithoutLogsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutLogsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutLogsInput, BranchUncheckedUpdateWithoutLogsInput>
  }

  export type BranchUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutBranchesNestedInput
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type OrganizationUpsertWithoutLogsInput = {
    update: XOR<OrganizationUpdateWithoutLogsInput, OrganizationUncheckedUpdateWithoutLogsInput>
    create: XOR<OrganizationCreateWithoutLogsInput, OrganizationUncheckedCreateWithoutLogsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutLogsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutLogsInput, OrganizationUncheckedUpdateWithoutLogsInput>
  }

  export type OrganizationUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUpdateManyWithoutOrganizationNestedInput
    users?: UserUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branches?: BranchUncheckedUpdateManyWithoutOrganizationNestedInput
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type BranchCreateManyOrganizationInput = {
    id?: number
    name: string
    address: string
    contact: string
    status?: $Enums.BranchStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserCreateManyOrganizationInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    branchId?: number | null
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ExpenseCreateManyOrganizationInput = {
    id?: number
    branchId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LogCreateManyOrganizationInput = {
    id?: number
    userId?: number | null
    branchId: number
    activity: string
    createdAt?: Date | string
  }

  export type BranchUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutBranchNestedInput
    patients?: PatientUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUpdateManyWithoutBranchNestedInput
    logs?: LogUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutBranchNestedInput
    patients?: PatientUncheckedUpdateManyWithoutBranchNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutBranchNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutBranchNestedInput
    inventories?: BranchInventoryUncheckedUpdateManyWithoutBranchNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutBranchNestedInput
    logs?: LogUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: EnumBranchStatusFieldUpdateOperationsInput | $Enums.BranchStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    branchId?: NullableIntFieldUpdateOperationsInput | number | null
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpenseUpdateWithoutOrganizationInput = {
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpenseUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LogUpdateWithoutOrganizationInput = {
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogsNestedInput
    branch?: BranchUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    branchId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    branchId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyBranchInput = {
    id?: number
    name: string
    contactNo: string
    identityNo: string
    avatar?: string | null
    password: string
    email: string
    role: $Enums.Role
    organizationId: number
    identityImage?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientCreateManyBranchInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    patientType?: $Enums.PatientType
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ExpenseCreateManyBranchInput = {
    id?: number
    organizationId: number
    expenseName: string
    expenseType: $Enums.ExpenseType
    amount: Decimal | DecimalJsLike | number | string
    date: Date | string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type SalaryCreateManyBranchInput = {
    id?: number
    userId: number
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type BranchInventoryCreateManyBranchInput = {
    id?: number
    itemName: string
    currentQuantity?: number
    reorderLevel?: number | null
    costPerUnit?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InventoryOrderCreateManyBranchInput = {
    id?: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    receivedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LogCreateManyBranchInput = {
    id?: number
    userId?: number | null
    organizationId: number
    activity: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutBranchInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    createdPatients?: PatientUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUpdateManyWithoutReceivedByNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    Token?: TokenUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdPatients?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctorAppointments?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    receptionistAppointments?: AppointmentUncheckedUpdateManyWithoutReceptionistNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutDoctorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutReceivedByNestedInput
    salaries?: SalaryUncheckedUpdateManyWithoutUserNestedInput
    orders?: InventoryOrderUncheckedUpdateManyWithoutReceivedByNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    Token?: TokenUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNo?: StringFieldUpdateOperationsInput | string
    identityNo?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    organizationId?: IntFieldUpdateOperationsInput | number
    identityImage?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUpdateWithoutBranchInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpenseUpdateWithoutBranchInput = {
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpenseUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    expenseName?: StringFieldUpdateOperationsInput | string
    expenseType?: EnumExpenseTypeFieldUpdateOperationsInput | $Enums.ExpenseType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SalaryUpdateWithoutBranchInput = {
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSalariesNestedInput
  }

  export type SalaryUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SalaryUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchInventoryUpdateWithoutBranchInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchInventoryUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BranchInventoryUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    currentQuantity?: IntFieldUpdateOperationsInput | number
    reorderLevel?: NullableIntFieldUpdateOperationsInput | number | null
    costPerUnit?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderUpdateWithoutBranchInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receivedBy?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type InventoryOrderUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LogUpdateWithoutBranchInput = {
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    organizationId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateManyCreatedByInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientCreateManyUpdatedByInput = {
    id?: number
    name: string
    contactNumber?: string | null
    idCardNo?: string | null
    email?: string | null
    dateOfBirth?: Date | string | null
    address?: string | null
    medicalHistory?: string | null
    allergies?: string | null
    branchId: number
    patientType?: $Enums.PatientType
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AppointmentCreateManyDoctorInput = {
    id?: number
    patientId: number
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AppointmentCreateManyReceptionistInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AppointmentCreateManyCreatedByInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AppointmentCreateManyUpdatedByInput = {
    id?: number
    patientId: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentCreateManyDoctorInput = {
    id?: number
    patientId: number
    treatmentId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PaymentCreateManyReceivedByInput = {
    id?: number
    billId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    patientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalaryCreateManyUserInput = {
    id?: number
    branchId: number
    salaryMonth: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.SalaryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InventoryOrderCreateManyReceivedByInput = {
    id?: number
    branchId: number
    itemName: string
    quantityOrdered: number
    costPerUnit: Decimal | DecimalJsLike | number | string
    totalCost: Decimal | DecimalJsLike | number | string
    supplier?: string | null
    receiptFilePath?: string | null
    orderedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LogCreateManyUserInput = {
    id?: number
    branchId: number
    organizationId: number
    activity: string
    createdAt?: Date | string
  }

  export type PatientUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUpdateWithoutUpdatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutPatientsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientNestedInput
    bills?: PatientBillUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    branchId?: IntFieldUpdateOperationsInput | number
    patientType?: EnumPatientTypeFieldUpdateOperationsInput | $Enums.PatientType
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUpdateWithoutDoctorInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    receptionist?: UserUpdateOneWithoutReceptionistAppointmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUpdateWithoutReceptionistInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    doctor?: UserUpdateOneWithoutDoctorAppointmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutReceptionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUpdateWithoutCreatedByInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    doctor?: UserUpdateOneWithoutDoctorAppointmentsNestedInput
    receptionist?: UserUpdateOneWithoutReceptionistAppointmentsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUpdateWithoutUpdatedByInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    doctor?: UserUpdateOneWithoutDoctorAppointmentsNestedInput
    receptionist?: UserUpdateOneWithoutReceptionistAppointmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUpdateWithoutDoctorInput = {
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUpdateWithoutReceivedByInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    bill?: PatientBillUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutReceivedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutReceivedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryUpdateWithoutUserInput = {
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutSalariesNestedInput
  }

  export type SalaryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SalaryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    salaryMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderUpdateWithoutReceivedByInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    branch?: BranchUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type InventoryOrderUncheckedUpdateWithoutReceivedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryOrderUncheckedUpdateManyWithoutReceivedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    quantityOrdered?: IntFieldUpdateOperationsInput | number
    costPerUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    receiptFilePath?: NullableStringFieldUpdateOperationsInput | string | null
    orderedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LogUpdateWithoutUserInput = {
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutLogsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    activity?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyPatientInput = {
    id?: number
    doctorId?: number | null
    receptionistId?: number | null
    appointmentDate: Date | string
    appointmentTime?: Date | string | null
    type?: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    isFinalAppointment?: boolean
    treatmentPlan?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentCreateManyPatientInput = {
    id?: number
    treatmentId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientBillCreateManyPatientInput = {
    id?: number
    treatmentId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
  }

  export type PaymentCreateManyPatientInput = {
    id?: number
    billId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    receivedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutPatientInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doctor?: UserUpdateOneWithoutDoctorAppointmentsNestedInput
    receptionist?: UserUpdateOneWithoutReceptionistAppointmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
    treatments?: PatientTreatmentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatments?: PatientTreatmentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    receptionistId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    isFinalAppointment?: BoolFieldUpdateOperationsInput | boolean
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUpdateWithoutPatientInput = {
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutTreatmentsNestedInput
    doctor?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientBillUpdateWithoutPatientInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    treatment?: TreatmentUpdateOneRequiredWithoutPatientBillNestedInput
    payments?: PaymentUpdateManyWithoutBillNestedInput
  }

  export type PatientBillUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    payments?: PaymentUncheckedUpdateManyWithoutBillNestedInput
  }

  export type PatientBillUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
  }

  export type PaymentUpdateWithoutPatientInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedBy?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    bill?: PatientBillUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    receivedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    billId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    receivedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientTreatmentCreateManyAppointmentInput = {
    id?: number
    patientId: number
    treatmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientTreatmentUpdateWithoutAppointmentInput = {
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    doctor?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    treatmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentCreateManyTreatmentInput = {
    id?: number
    patientId: number
    appointmentId: number
    sessionNumber?: number
    treatmentDate: Date | string
    actualCost: Decimal | DecimalJsLike | number | string
    doctorId: number
    status?: $Enums.TreatmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientBillCreateManyTreatmentInput = {
    id?: number
    patientId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string
    remainingAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.BillStatus
  }

  export type PatientTreatmentUpdateWithoutTreatmentInput = {
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutTreatmentsNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutTreatmentsNestedInput
    doctor?: UserUpdateOneRequiredWithoutTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutTreatmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutTreatmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    sessionNumber?: IntFieldUpdateOperationsInput | number
    treatmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    doctorId?: IntFieldUpdateOperationsInput | number
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientBillUpdateWithoutTreatmentInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    patient?: PatientUpdateOneRequiredWithoutBillsNestedInput
    payments?: PaymentUpdateManyWithoutBillNestedInput
  }

  export type PatientBillUncheckedUpdateWithoutTreatmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
    payments?: PaymentUncheckedUpdateManyWithoutBillNestedInput
  }

  export type PatientBillUncheckedUpdateManyWithoutTreatmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    remainingAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumBillStatusFieldUpdateOperationsInput | $Enums.BillStatus
  }

  export type PaymentCreateManyBillInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    paymentDate?: Date | string
    paymentMethod: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    receivedById: number
    patientId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateWithoutBillInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedBy?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutBillInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    receivedById?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutBillInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    receivedById?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}