generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BranchStatus {
  active
  inactive
}

enum Role {
  doctor
  receptionist
  branch_admin
  organization_admin
}

enum PatientType {
  walk_in
  regular
  appointed
}

enum AppointmentType {
  scheduled
  walk_in
}

enum AppointmentStatus {
  scheduled
  expired
  waiting
  completed
  cancelled
  rescheduled
}

enum TreatmentStatus {
  pending
  in_progress
  completed
}

enum PaymentMethod {
  cash
  card
  online
}

enum PaymentStatus {
  paid
  pending
}

enum BillStatus {
  paid
  partially_paid
  pending
}

enum ExpenseType {
  rent
  salaries
  utilities
  inventory
  other
}

enum SalaryStatus {
  paid
  unpaid
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  address   String    @db.Text
  contact   String    @db.VarChar(20)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  branches Branch[]
  users    User[]
  expenses Expense[]
  logs     Log[]

  //indexes  
  @@index([name], name: "idx_org_name")
}

model Branch {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  organizationId Int          @map("organization_id")
  address        String       @db.Text
  contact        String       @db.VarChar(20)
  status         BranchStatus @default(active)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  //references
  organization Organization @relation(fields: [organizationId], references: [id])

  // Relations
  users       User[]
  patients    Patient[]
  expenses    Expense[]
  salaries    Salary[]
  inventories BranchInventory[]
  orders      InventoryOrder[]
  logs        Log[]
}

model User {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  contactNo      String    @unique @map("contact_no") @db.VarChar(20)
  identityNo     String    @unique @map("identity_no") @db.VarChar(50)
  avatar         String?   @db.VarChar(255)
  password       String    @db.VarChar(255)
  email          String    @unique @db.VarChar(255)
  role           Role
  branchId       Int?      @map("branch_id")
  organizationId Int       @map("organization_id")
  identityImage  String?   @map("identity_image") @db.VarChar(255)
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  //references
  branch       Branch?      @relation(fields: [branchId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  // Relations
  createdPatients          Patient[]          @relation("PatientCreatedBy")
  updatedPatients          Patient[]          @relation("PatientUpdatedBy")
  doctorAppointments       Appointment[]      @relation("DoctorAppointments")
  receptionistAppointments Appointment[]      @relation("ReceptionistAppointments")
  createdAppointments      Appointment[]      @relation("AppointmentCreatedBy")
  updatedAppointments      Appointment[]      @relation("AppointmentUpdatedBy")
  treatments               PatientTreatment[]
  payments                 Payment[]
  salaries                 Salary[]
  orders                   InventoryOrder[]
  logs                     Log[]
}

model Patient {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  contactNumber  String?     @map("contact_number") @db.VarChar(20)
  idCardNo       String?     @unique @map("id_card_no") @db.VarChar(50)
  email          String?     @db.VarChar(255)
  dateOfBirth    DateTime?   @map("date_of_birth")
  address        String?     @db.Text
  medicalHistory String?     @map("medical_history") @db.Text
  allergies      String?     @db.Text
  branchId       Int         @map("branch_id")
  patientType    PatientType @default(walk_in) @map("patient_type")
  createdById    Int         @map("created_by")
  updatedById    Int         @map("updated_by")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime?   @map("deleted_at")

  //references
  branch    Branch @relation(fields: [branchId], references: [id])
  createdBy User   @relation(name: "PatientCreatedBy", fields: [createdById], references: [id])
  updatedBy User   @relation(name: "PatientUpdatedBy", fields: [updatedById], references: [id])

  // Relations
  appointments Appointment[]
  treatments   PatientTreatment[]
  bills        PatientBill[]
  payments     Payment[]

  //indexes
  @@index([name], name: "idx_patient_name")
  @@index([email], name: "idx_patient_email")
  @@index([contactNumber], name: "idx_patient_phone")
  @@index([idCardNo], name: "idx_patient_idCardNo")
  @@index([branchId], name: "idx_patient_branchId")
}

model Appointment {
  id                 Int               @id @default(autoincrement())
  patientId          Int               @map("patient_id")
  doctorId           Int?              @map("doctor_id")
  receptionistId     Int?              @map("receptionist_id")
  appointmentDate    DateTime          @map("appointment_date")
  appointmentTime    DateTime?         @map("appointment_time")
  type               AppointmentType   @default(scheduled)
  status             AppointmentStatus @default(scheduled)
  isFinalAppointment Boolean           @default(true) @map("is_final_appointment")
  treatmentPlan      String?           @db.Text
  createdById        Int               @map("created_by")
  updatedById        Int               @map("updated_by")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @default(now()) @updatedAt @map("updated_at")
  deletedAt          DateTime?         @map("deleted_at")

  //references
  patient      Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor       User?   @relation(name: "DoctorAppointments", fields: [doctorId], references: [id])
  receptionist User?   @relation(name: "ReceptionistAppointments", fields: [receptionistId], references: [id])
  createdBy    User    @relation(name: "AppointmentCreatedBy", fields: [createdById], references: [id])
  updatedBy    User    @relation(name: "AppointmentUpdatedBy", fields: [updatedById], references: [id])

  // Relations
  treatments PatientTreatment[]

  //indexes
  @@index([appointmentDate], name: "idx_appointment_date")
}

model Treatment {
  id            Int       @id @default(autoincrement())
  treatmentName String    @map("treatment_name") @db.VarChar(255)
  description   String?   @db.Text
  baseCost      Decimal   @map("base_cost") @db.Decimal(10, 2)
  duration      Int
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relations
  patientTreatments PatientTreatment[]
  patientBill       PatientBill[]
}

model PatientTreatment {
  id            Int             @id @default(autoincrement())
  patientId     Int             @map("patient_id")
  treatmentId   Int             @map("treatment_id")
  appointmentId Int             @map("appointment_id")
  sessionNumber Int             @default(1) @map("session_number")
  treatmentDate DateTime        @map("treatment_date")
  actualCost    Decimal         @map("actual_cost") @db.Decimal(10, 2)
  doctorId      Int             @map("doctor_id")
  status        TreatmentStatus @default(pending)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")

  // References
  patient     Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  treatment   Treatment   @relation(fields: [treatmentId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      User        @relation(fields: [doctorId], references: [id])
}

model PatientBill {
  id              Int        @id @default(autoincrement())
  patientId       Int        @map("patient_id")
  treatmentId     Int        @map("treatment_id")
  totalAmount     Decimal    @map("total_amount") @db.Decimal(10, 2)
  paidAmount      Decimal    @default(0) @map("paid_amount") @db.Decimal(10, 2)
  remainingAmount Decimal    @map("remaining_amount") @db.Decimal(10, 2)
  status          BillStatus @default(pending)

  //References
  treatment Treatment @relation(fields: [treatmentId], references: [id])
  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  // Relations
  payments Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  billId        Int           @map("bill_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentMethod PaymentMethod @map("payment_method")
  status        PaymentStatus @default(pending)
  receivedById  Int           @map("received_by")
  patientId     Int           @map("patient_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  //References
  receivedBy User        @relation(fields: [receivedById], references: [id])
  patient    Patient     @relation(fields: [patientId], references: [id])
  bill       PatientBill @relation(fields: [billId], references: [id])
}

model Expense {
  id             Int         @id @default(autoincrement())
  branchId       Int         @map("branch_id")
  organizationId Int         @map("organization_id")
  expenseName    String      @map("expense_name") @db.VarChar(255)
  expenseType    ExpenseType
  amount         Decimal     @db.Decimal(10, 2)
  date           DateTime
  description    String?     @db.Text
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime?   @map("deleted_at")

  //References
  branch       Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id])
}

model Salary {
  id          Int          @id @default(autoincrement())
  userId      Int          @map("user_id")
  branchId    Int          @map("branch_id")
  salaryMonth DateTime     @map("salary_month")
  amount      Decimal      @db.Decimal(10, 2)
  status      SalaryStatus @default(unpaid)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")

  //References
  user   User   @relation(fields: [userId], references: [id])
  branch Branch @relation(fields: [branchId], references: [id])
}

model BranchInventory {
  id              Int       @id @default(autoincrement())
  branchId        Int       @map("branch_id")
  itemName        String    @map("item_name") @db.VarChar(255)
  currentQuantity Int       @default(0) @map("current_quantity")
  reorderLevel    Int?      @default(10) @map("reorder_level")
  costPerUnit     Decimal?  @map("cost_per_unit") @db.Decimal(10, 2)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  //References
  branch Branch @relation(fields: [branchId], references: [id])
}

model InventoryOrder {
  id              Int       @id @default(autoincrement())
  branchId        Int       @map("branch_id")
  itemName        String    @map("item_name") @db.VarChar(255)
  quantityOrdered Int       @map("quantity_ordered")
  costPerUnit     Decimal   @map("cost_per_unit") @db.Decimal(10, 2)
  totalCost       Decimal   @map("total_cost") @db.Decimal(10, 2)
  supplier        String?   @db.VarChar(255)
  receiptFilePath String?   @map("receipt_file_path") @db.VarChar(500)
  orderedAt       DateTime  @default(now()) @map("ordered_at")
  receivedById    Int       @map("received_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  //References
  branch     Branch @relation(fields: [branchId], references: [id])
  receivedBy User   @relation(fields: [receivedById], references: [id])
}

model Log {
  id             Int      @id @default(autoincrement())
  userId         Int?     @map("user_id")
  branchId       Int      @map("branch_id")
  organizationId Int      @map("organization_id")
  activity       String   @db.Text
  createdAt      DateTime @default(now()) @map("created_at")

  //References
  user         User?        @relation(fields: [userId], references: [id])
  branch       Branch       @relation(fields: [branchId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}
