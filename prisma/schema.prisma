generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BranchStatus {
  active
  inactive
}

enum Role {
  doctor
  receptionist
  branch_admin
  organization_admin
}

enum PatientType {
  walk_in
  regular
  appointed
}

enum AppointmentType {
  scheduled
  walk_in
}

enum AppointmentStatus {
  scheduled
  expired
  waiting
  completed
  cancelled
  rescheduled
}

enum TreatmentStatus {
  pending
  in_progress
  completed
}

enum PaymentMethod {
  cash
  card
  online
}

enum PaymentStatus {
  paid
  pending
}

enum BillStatus {
  paid
  partially_paid
  pending
}

enum ExpenseType {
  rent
  salaries
  utilities
  inventory
  other
}

enum SalaryStatus {
  paid
  unpaid
}

model token {
  id            String   @id @default(uuid())
  user_id       Int      @unique
  refresh_token String   @unique
  access_token  String   @unique
  expires_at    DateTime

  //references
  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model organization {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  address    String    @db.Text
  contact    String    @db.VarChar(20)
  created_at DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @default(now()) @updatedAt @map("updated_at")
  deleted_at DateTime? @map("deleted_at")

  // Relations
  branches branch[]
  users    user[]
  expenses expense[]
  logs     log[]

  //indexes  
  @@index([name], name: "idx_org_name")
}

model branch {
  id              Int          @id @default(autoincrement())
  name            String       @db.VarChar(255)
  organization_id Int          @map("organization_id")
  address         String       @db.Text
  contact         String       @db.VarChar(20)
  status          BranchStatus @default(active)
  created_at      DateTime     @default(now()) @map("created_at")
  updated_at      DateTime     @default(now()) @updatedAt @map("updated_at")
  deleted_at      DateTime?    @map("deleted_at")

  //references
  organization organization @relation(fields: [organization_id], references: [id])

  // Relations
  users       user[]
  patients    patient[]
  expenses    expense[]
  salaries    salary[]
  inventories branch_inventory[]
  orders      inventory_order[]
  logs        log[]
}

model user {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  contact_no      String    @unique @map("contact_no") @db.VarChar(20)
  identity_no     String    @unique @map("identity_no") @db.VarChar(50)
  avatar          String?   @db.VarChar(255)
  password        String    @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  role            Role
  branch_id       Int?      @map("branch_id")
  organization_id Int       @map("organization_id")
  identity_image  String?   @map("identity_image") @db.VarChar(255)
  is_active       Boolean   @default(true) @map("is_active")
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @default(now()) @updatedAt @map("updated_at")
  deleted_at      DateTime? @map("deleted_at")

  //references
  branch       branch?      @relation(fields: [branch_id], references: [id])
  organization organization @relation(fields: [organization_id], references: [id])

  // Relations
  created_patients          patient[]           @relation("PatientCreatedBy")
  updated_patients          patient[]           @relation("PatientUpdatedBy")
  doctor_appointments       appointment[]       @relation("DoctorAppointments")
  receptionist_appointments appointment[]       @relation("ReceptionistAppointments")
  created_appointments      appointment[]       @relation("AppointmentCreatedBy")
  updated_appointments      appointment[]       @relation("AppointmentUpdatedBy")
  treatments                patient_treatment[]
  payments                  payment[]
  salaries                  salary[]
  orders                    inventory_order[]
  logs                      log[]
  token                     token?
}

model patient {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(255)
  contact_number  String?     @map("contact_number") @db.VarChar(20)
  id_card_no      String?     @unique @map("id_card_no") @db.VarChar(50)
  email           String?     @db.VarChar(255)
  date_of_birth   DateTime?   @map("date_of_birth")
  address         String?     @db.Text
  medical_history String?     @map("medical_history") @db.Text
  allergies       String?     @db.Text
  branch_id       Int         @map("branch_id")
  patient_type    PatientType @default(walk_in) @map("patient_type")
  created_by_id   Int         @map("created_by")
  updated_by_id   Int         @map("updated_by")
  created_at      DateTime    @default(now()) @map("created_at")
  updated_at      DateTime    @default(now()) @updatedAt @map("updated_at")
  deleted_at      DateTime?   @map("deleted_at")

  //references
  branch    branch @relation(fields: [branch_id], references: [id])
  createdBy user   @relation(name: "PatientCreatedBy", fields: [created_by_id], references: [id])
  updatedBy user   @relation(name: "PatientUpdatedBy", fields: [updated_by_id], references: [id])

  // Relations
  appointments appointment[]
  treatments   patient_treatment[]
  bills        patient_bill[]
  payments     payment[]

  //indexes
  @@index([name], name: "idx_patient_name")
  @@index([email], name: "idx_patient_email")
  @@index([contact_number], name: "idx_patient_phone")
}

model appointment {
  id                   Int               @id @default(autoincrement())
  patient_id           Int               @map("patient_id")
  doctor_id            Int?              @map("doctor_id")
  receptionist_id      Int?              @map("receptionist_id")
  appointment_date     DateTime          @map("appointment_date")
  appointment_time     DateTime?         @map("appointment_time")
  type                 AppointmentType   @default(scheduled)
  status               AppointmentStatus @default(scheduled)
  is_final_appointment Boolean           @default(true) @map("is_final_appointment")
  treatment_plan       String?           @db.Text
  created_by_id        Int               @map("created_by")
  updated_by_id        Int               @map("updated_by")
  created_at           DateTime          @default(now()) @map("created_at")
  updated_at           DateTime          @default(now()) @updatedAt @map("updated_at")
  deleted_at           DateTime?         @map("deleted_at")

  //references
  patient      patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor       user?   @relation(name: "DoctorAppointments", fields: [doctor_id], references: [id])
  receptionist user?   @relation(name: "ReceptionistAppointments", fields: [receptionist_id], references: [id])
  created_by   user    @relation(name: "AppointmentCreatedBy", fields: [created_by_id], references: [id])
  updated_by   user    @relation(name: "AppointmentUpdatedBy", fields: [updated_by_id], references: [id])

  // RelationsF
  treatments patient_treatment[]

  //indexes
  @@index([appointment_date], name: "idx_appointment_date")
}

model treatment {
  id             Int       @id @default(autoincrement())
  treatment_name String    @map("treatment_name") @db.VarChar(255)
  description    String?   @db.Text
  base_cost      Decimal   @map("base_cost") @db.Decimal(10, 2)
  duration       Int
  created_at     DateTime  @default(now()) @map("created_at")
  updated_at     DateTime  @default(now()) @updatedAt @map("updated_at")
  deleted_at     DateTime? @map("deleted_at")

  // Relations
  patient_treatments patient_treatment[]
  patient_bill       patient_bill[]
}

model patient_treatment {
  id             Int             @id @default(autoincrement())
  patient_id     Int             @map("patient_id")
  treatment_id   Int             @map("treatment_id")
  appointment_id Int             @map("appointment_id")
  session_number Int             @default(1) @map("session_number")
  treatment_date DateTime        @map("treatment_date")
  actual_cost    Decimal         @map("actual_cost") @db.Decimal(10, 2)
  doctor_id      Int             @map("doctor_id")
  status         TreatmentStatus @default(pending)
  created_at     DateTime        @default(now()) @map("created_at")
  updated_at     DateTime        @default(now()) @updatedAt @map("updated_at")
  deleted_at     DateTime?       @map("deleted_at")

  // References
  patient     patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  treatment   treatment   @relation(fields: [treatment_id], references: [id])
  appointment appointment @relation(fields: [appointment_id], references: [id])
  doctor      user        @relation(fields: [doctor_id], references: [id])
}

model patient_bill {
  id               Int        @id @default(autoincrement())
  patient_id       Int        @map("patient_id")
  treatment_id     Int        @map("treatment_id")
  total_amount     Decimal    @map("total_amount") @db.Decimal(10, 2)
  paid_amount      Decimal    @default(0) @map("paid_amount") @db.Decimal(10, 2)
  remaining_amount Decimal    @map("remaining_amount") @db.Decimal(10, 2)
  status           BillStatus @default(pending)

  //References
  treatment treatment @relation(fields: [treatment_id], references: [id])
  patient   patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  // Relations
  payments payment[]
}

model payment {
  id             Int           @id @default(autoincrement())
  bill_id        Int           @map("bill_id")
  amount         Decimal       @db.Decimal(10, 2)
  payment_date   DateTime      @default(now()) @map("payment_date")
  payment_method PaymentMethod @map("payment_method")
  status         PaymentStatus @default(pending)
  received_by_id Int           @map("received_by")
  patient_id     Int           @map("patient_id")
  created_at     DateTime      @default(now()) @map("created_at")
  updated_at     DateTime      @default(now()) @updatedAt @map("updated_at")

  //References
  received_by user         @relation(fields: [received_by_id], references: [id])
  patient     patient      @relation(fields: [patient_id], references: [id])
  bill        patient_bill @relation(fields: [bill_id], references: [id])
}

model expense {
  id              Int         @id @default(autoincrement())
  branch_id       Int         @map("branch_id")
  organization_id Int         @map("organization_id")
  expense_name    String      @map("expense_name") @db.VarChar(255)
  expense_type    ExpenseType
  amount          Decimal     @db.Decimal(10, 2)
  date            DateTime
  description     String?     @db.Text
  created_at      DateTime    @default(now()) @map("created_at")
  updated_at      DateTime    @default(now()) @updatedAt @map("updated_at")
  deleted_at      DateTime?   @map("deleted_at")

  //References
  branch       branch       @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  organization organization @relation(fields: [organization_id], references: [id])
}

model salary {
  id           Int          @id @default(autoincrement())
  user_id      Int          @map("user_id")
  branch_id    Int          @map("branch_id")
  salary_month DateTime     @map("salary_month")
  amount       Decimal      @db.Decimal(10, 2)
  status       SalaryStatus @default(unpaid)
  created_at   DateTime     @default(now()) @map("created_at")
  updated_at   DateTime     @default(now()) @updatedAt @map("updated_at")
  deleted_at   DateTime?    @map("deleted_at")

  //References
  user   user   @relation(fields: [user_id], references: [id])
  branch branch @relation(fields: [branch_id], references: [id])
}

model branch_inventory {
  id               Int       @id @default(autoincrement())
  branch_id        Int       @map("branch_id")
  item_name        String    @map("item_name") @db.VarChar(255)
  current_quantity Int       @default(0) @map("current_quantity")
  reorder_level    Int?      @default(10) @map("reorder_level")
  cost_per_unit    Decimal?  @map("cost_per_unit") @db.Decimal(10, 2)
  created_at       DateTime  @default(now()) @map("created_at")
  updated_at       DateTime  @default(now()) @updatedAt @map("updated_at")
  deleted_at       DateTime? @map("deleted_at")

  //References
  branch branch @relation(fields: [branch_id], references: [id])
}

model inventory_order {
  id                Int       @id @default(autoincrement())
  branch_id         Int       @map("branch_id")
  item_name         String    @map("item_name") @db.VarChar(255)
  quantity_ordered  Int       @map("quantity_ordered")
  cost_per_unit     Decimal   @map("cost_per_unit") @db.Decimal(10, 2)
  total_cost        Decimal   @map("total_cost") @db.Decimal(10, 2)
  supplier          String?   @db.VarChar(255)
  receipt_file_path String?   @map("receipt_file_path") @db.VarChar(500)
  ordered_at        DateTime  @default(now()) @map("ordered_at")
  received_by_id    Int       @map("received_by")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @default(now()) @updatedAt @map("updated_at")
  deleted_at        DateTime? @map("deleted_at")

  //References
  branch      branch @relation(fields: [branch_id], references: [id])
  received_by user   @relation(fields: [received_by_id], references: [id])
}

model log {
  id              Int      @id @default(autoincrement())
  user_id         Int?     @map("user_id")
  branch_id       Int      @map("branch_id")
  organization_id Int      @map("organization_id")
  activity        String   @db.Text
  created_at      DateTime @default(now()) @map("created_at")

  //References
  user         user?        @relation(fields: [user_id], references: [id])
  branch       branch       @relation(fields: [branch_id], references: [id])
  organization organization @relation(fields: [organization_id], references: [id])
}
